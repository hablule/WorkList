//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SRP {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dtsReportData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dtsReportData : global::System.Data.DataSet {
        
        private dtTrxSummaryDataTable tabledtTrxSummary;
        
        private dtTrxDetailDataTable tabledtTrxDetail;
        
        private dtCountSummaryDataTable tabledtCountSummary;
        
        private dtCountDetailDataTable tabledtCountDetail;
        
        private dtUsageSummaryDataTable tabledtUsageSummary;
        
        private dtUsageDetailDataTable tabledtUsageDetail;
        
        private dtMoveSummaryDataTable tabledtMoveSummary;
        
        private dtMoveDetailDataTable tabledtMoveDetail;
        
        private dtMaterialTransactionDataTable tabledtMaterialTransaction;
        
        private dtInventoryDataTable tabledtInventory;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dtsReportData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dtsReportData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtTrxSummary"] != null)) {
                    base.Tables.Add(new dtTrxSummaryDataTable(ds.Tables["dtTrxSummary"]));
                }
                if ((ds.Tables["dtTrxDetail"] != null)) {
                    base.Tables.Add(new dtTrxDetailDataTable(ds.Tables["dtTrxDetail"]));
                }
                if ((ds.Tables["dtCountSummary"] != null)) {
                    base.Tables.Add(new dtCountSummaryDataTable(ds.Tables["dtCountSummary"]));
                }
                if ((ds.Tables["dtCountDetail"] != null)) {
                    base.Tables.Add(new dtCountDetailDataTable(ds.Tables["dtCountDetail"]));
                }
                if ((ds.Tables["dtUsageSummary"] != null)) {
                    base.Tables.Add(new dtUsageSummaryDataTable(ds.Tables["dtUsageSummary"]));
                }
                if ((ds.Tables["dtUsageDetail"] != null)) {
                    base.Tables.Add(new dtUsageDetailDataTable(ds.Tables["dtUsageDetail"]));
                }
                if ((ds.Tables["dtMoveSummary"] != null)) {
                    base.Tables.Add(new dtMoveSummaryDataTable(ds.Tables["dtMoveSummary"]));
                }
                if ((ds.Tables["dtMoveDetail"] != null)) {
                    base.Tables.Add(new dtMoveDetailDataTable(ds.Tables["dtMoveDetail"]));
                }
                if ((ds.Tables["dtMaterialTransaction"] != null)) {
                    base.Tables.Add(new dtMaterialTransactionDataTable(ds.Tables["dtMaterialTransaction"]));
                }
                if ((ds.Tables["dtInventory"] != null)) {
                    base.Tables.Add(new dtInventoryDataTable(ds.Tables["dtInventory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtTrxSummaryDataTable dtTrxSummary {
            get {
                return this.tabledtTrxSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtTrxDetailDataTable dtTrxDetail {
            get {
                return this.tabledtTrxDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCountSummaryDataTable dtCountSummary {
            get {
                return this.tabledtCountSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCountDetailDataTable dtCountDetail {
            get {
                return this.tabledtCountDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUsageSummaryDataTable dtUsageSummary {
            get {
                return this.tabledtUsageSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUsageDetailDataTable dtUsageDetail {
            get {
                return this.tabledtUsageDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMoveSummaryDataTable dtMoveSummary {
            get {
                return this.tabledtMoveSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMoveDetailDataTable dtMoveDetail {
            get {
                return this.tabledtMoveDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMaterialTransactionDataTable dtMaterialTransaction {
            get {
                return this.tabledtMaterialTransaction;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtInventoryDataTable dtInventory {
            get {
                return this.tabledtInventory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dtsReportData cln = ((dtsReportData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtTrxSummary"] != null)) {
                    base.Tables.Add(new dtTrxSummaryDataTable(ds.Tables["dtTrxSummary"]));
                }
                if ((ds.Tables["dtTrxDetail"] != null)) {
                    base.Tables.Add(new dtTrxDetailDataTable(ds.Tables["dtTrxDetail"]));
                }
                if ((ds.Tables["dtCountSummary"] != null)) {
                    base.Tables.Add(new dtCountSummaryDataTable(ds.Tables["dtCountSummary"]));
                }
                if ((ds.Tables["dtCountDetail"] != null)) {
                    base.Tables.Add(new dtCountDetailDataTable(ds.Tables["dtCountDetail"]));
                }
                if ((ds.Tables["dtUsageSummary"] != null)) {
                    base.Tables.Add(new dtUsageSummaryDataTable(ds.Tables["dtUsageSummary"]));
                }
                if ((ds.Tables["dtUsageDetail"] != null)) {
                    base.Tables.Add(new dtUsageDetailDataTable(ds.Tables["dtUsageDetail"]));
                }
                if ((ds.Tables["dtMoveSummary"] != null)) {
                    base.Tables.Add(new dtMoveSummaryDataTable(ds.Tables["dtMoveSummary"]));
                }
                if ((ds.Tables["dtMoveDetail"] != null)) {
                    base.Tables.Add(new dtMoveDetailDataTable(ds.Tables["dtMoveDetail"]));
                }
                if ((ds.Tables["dtMaterialTransaction"] != null)) {
                    base.Tables.Add(new dtMaterialTransactionDataTable(ds.Tables["dtMaterialTransaction"]));
                }
                if ((ds.Tables["dtInventory"] != null)) {
                    base.Tables.Add(new dtInventoryDataTable(ds.Tables["dtInventory"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtTrxSummary = ((dtTrxSummaryDataTable)(base.Tables["dtTrxSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtTrxSummary != null)) {
                    this.tabledtTrxSummary.InitVars();
                }
            }
            this.tabledtTrxDetail = ((dtTrxDetailDataTable)(base.Tables["dtTrxDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtTrxDetail != null)) {
                    this.tabledtTrxDetail.InitVars();
                }
            }
            this.tabledtCountSummary = ((dtCountSummaryDataTable)(base.Tables["dtCountSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtCountSummary != null)) {
                    this.tabledtCountSummary.InitVars();
                }
            }
            this.tabledtCountDetail = ((dtCountDetailDataTable)(base.Tables["dtCountDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtCountDetail != null)) {
                    this.tabledtCountDetail.InitVars();
                }
            }
            this.tabledtUsageSummary = ((dtUsageSummaryDataTable)(base.Tables["dtUsageSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtUsageSummary != null)) {
                    this.tabledtUsageSummary.InitVars();
                }
            }
            this.tabledtUsageDetail = ((dtUsageDetailDataTable)(base.Tables["dtUsageDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtUsageDetail != null)) {
                    this.tabledtUsageDetail.InitVars();
                }
            }
            this.tabledtMoveSummary = ((dtMoveSummaryDataTable)(base.Tables["dtMoveSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtMoveSummary != null)) {
                    this.tabledtMoveSummary.InitVars();
                }
            }
            this.tabledtMoveDetail = ((dtMoveDetailDataTable)(base.Tables["dtMoveDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtMoveDetail != null)) {
                    this.tabledtMoveDetail.InitVars();
                }
            }
            this.tabledtMaterialTransaction = ((dtMaterialTransactionDataTable)(base.Tables["dtMaterialTransaction"]));
            if ((initTable == true)) {
                if ((this.tabledtMaterialTransaction != null)) {
                    this.tabledtMaterialTransaction.InitVars();
                }
            }
            this.tabledtInventory = ((dtInventoryDataTable)(base.Tables["dtInventory"]));
            if ((initTable == true)) {
                if ((this.tabledtInventory != null)) {
                    this.tabledtInventory.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dtsReportData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dtsReportData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtTrxSummary = new dtTrxSummaryDataTable();
            base.Tables.Add(this.tabledtTrxSummary);
            this.tabledtTrxDetail = new dtTrxDetailDataTable();
            base.Tables.Add(this.tabledtTrxDetail);
            this.tabledtCountSummary = new dtCountSummaryDataTable();
            base.Tables.Add(this.tabledtCountSummary);
            this.tabledtCountDetail = new dtCountDetailDataTable();
            base.Tables.Add(this.tabledtCountDetail);
            this.tabledtUsageSummary = new dtUsageSummaryDataTable();
            base.Tables.Add(this.tabledtUsageSummary);
            this.tabledtUsageDetail = new dtUsageDetailDataTable();
            base.Tables.Add(this.tabledtUsageDetail);
            this.tabledtMoveSummary = new dtMoveSummaryDataTable();
            base.Tables.Add(this.tabledtMoveSummary);
            this.tabledtMoveDetail = new dtMoveDetailDataTable();
            base.Tables.Add(this.tabledtMoveDetail);
            this.tabledtMaterialTransaction = new dtMaterialTransactionDataTable();
            base.Tables.Add(this.tabledtMaterialTransaction);
            this.tabledtInventory = new dtInventoryDataTable();
            base.Tables.Add(this.tabledtInventory);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtTrxSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtTrxDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCountSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCountDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtUsageSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtUsageDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMoveSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMoveDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMaterialTransaction() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtInventory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dtsReportData ds = new dtsReportData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtTrxSummaryRowChangeEventHandler(object sender, dtTrxSummaryRowChangeEvent e);
        
        public delegate void dtTrxDetailRowChangeEventHandler(object sender, dtTrxDetailRowChangeEvent e);
        
        public delegate void dtCountSummaryRowChangeEventHandler(object sender, dtCountSummaryRowChangeEvent e);
        
        public delegate void dtCountDetailRowChangeEventHandler(object sender, dtCountDetailRowChangeEvent e);
        
        public delegate void dtUsageSummaryRowChangeEventHandler(object sender, dtUsageSummaryRowChangeEvent e);
        
        public delegate void dtUsageDetailRowChangeEventHandler(object sender, dtUsageDetailRowChangeEvent e);
        
        public delegate void dtMoveSummaryRowChangeEventHandler(object sender, dtMoveSummaryRowChangeEvent e);
        
        public delegate void dtMoveDetailRowChangeEventHandler(object sender, dtMoveDetailRowChangeEvent e);
        
        public delegate void dtMaterialTransactionRowChangeEventHandler(object sender, dtMaterialTransactionRowChangeEvent e);
        
        public delegate void dtInventoryRowChangeEventHandler(object sender, dtInventoryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtTrxSummaryDataTable : global::System.Data.TypedTableBase<dtTrxSummaryRow> {
            
            private global::System.Data.DataColumn columnT_TRANSACTION_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnTRXDATE;
            
            private global::System.Data.DataColumn columnBUSINESSPARTNER;
            
            private global::System.Data.DataColumn columnISSALESTRX;
            
            private global::System.Data.DataColumn columnSUBTRXAMOUNT;
            
            private global::System.Data.DataColumn columnTRXTAXAMOUNT;
            
            private global::System.Data.DataColumn columnGRANDTRXAMOUNT;
            
            private global::System.Data.DataColumn columnDOCSTATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryDataTable() {
                this.TableName = "dtTrxSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTrxSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtTrxSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_TRANSACTION_IDColumn {
                get {
                    return this.columnT_TRANSACTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRXDATEColumn {
                get {
                    return this.columnTRXDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSPARTNERColumn {
                get {
                    return this.columnBUSINESSPARTNER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISSALESTRXColumn {
                get {
                    return this.columnISSALESTRX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SUBTRXAMOUNTColumn {
                get {
                    return this.columnSUBTRXAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRXTAXAMOUNTColumn {
                get {
                    return this.columnTRXTAXAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GRANDTRXAMOUNTColumn {
                get {
                    return this.columnGRANDTRXAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCSTATUSColumn {
                get {
                    return this.columnDOCSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRow this[int index] {
                get {
                    return ((dtTrxSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtTrxSummaryRowChangeEventHandler dtTrxSummaryRowChanging;
            
            public event dtTrxSummaryRowChangeEventHandler dtTrxSummaryRowChanged;
            
            public event dtTrxSummaryRowChangeEventHandler dtTrxSummaryRowDeleting;
            
            public event dtTrxSummaryRowChangeEventHandler dtTrxSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtTrxSummaryRow(dtTrxSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRow AdddtTrxSummaryRow(int T_TRANSACTION_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime TRXDATE, string BUSINESSPARTNER, string ISSALESTRX, decimal SUBTRXAMOUNT, decimal TRXTAXAMOUNT, decimal GRANDTRXAMOUNT, string DOCSTATUS) {
                dtTrxSummaryRow rowdtTrxSummaryRow = ((dtTrxSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_TRANSACTION_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        TRXDATE,
                        BUSINESSPARTNER,
                        ISSALESTRX,
                        SUBTRXAMOUNT,
                        TRXTAXAMOUNT,
                        GRANDTRXAMOUNT,
                        DOCSTATUS};
                rowdtTrxSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtTrxSummaryRow);
                return rowdtTrxSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRow FindByT_TRANSACTION_ID(int T_TRANSACTION_ID) {
                return ((dtTrxSummaryRow)(this.Rows.Find(new object[] {
                            T_TRANSACTION_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtTrxSummaryDataTable cln = ((dtTrxSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtTrxSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_TRANSACTION_ID = base.Columns["T_TRANSACTION_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnTRXDATE = base.Columns["TRXDATE"];
                this.columnBUSINESSPARTNER = base.Columns["BUSINESSPARTNER"];
                this.columnISSALESTRX = base.Columns["ISSALESTRX"];
                this.columnSUBTRXAMOUNT = base.Columns["SUBTRXAMOUNT"];
                this.columnTRXTAXAMOUNT = base.Columns["TRXTAXAMOUNT"];
                this.columnGRANDTRXAMOUNT = base.Columns["GRANDTRXAMOUNT"];
                this.columnDOCSTATUS = base.Columns["DOCSTATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_TRANSACTION_ID = new global::System.Data.DataColumn("T_TRANSACTION_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_TRANSACTION_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnTRXDATE = new global::System.Data.DataColumn("TRXDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRXDATE);
                this.columnBUSINESSPARTNER = new global::System.Data.DataColumn("BUSINESSPARTNER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSINESSPARTNER);
                this.columnISSALESTRX = new global::System.Data.DataColumn("ISSALESTRX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISSALESTRX);
                this.columnSUBTRXAMOUNT = new global::System.Data.DataColumn("SUBTRXAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSUBTRXAMOUNT);
                this.columnTRXTAXAMOUNT = new global::System.Data.DataColumn("TRXTAXAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRXTAXAMOUNT);
                this.columnGRANDTRXAMOUNT = new global::System.Data.DataColumn("GRANDTRXAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGRANDTRXAMOUNT);
                this.columnDOCSTATUS = new global::System.Data.DataColumn("DOCSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCSTATUS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_TRANSACTION_ID}, true));
                this.columnT_TRANSACTION_ID.AllowDBNull = false;
                this.columnT_TRANSACTION_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRow NewdtTrxSummaryRow() {
                return ((dtTrxSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtTrxSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtTrxSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtTrxSummaryRowChanged != null)) {
                    this.dtTrxSummaryRowChanged(this, new dtTrxSummaryRowChangeEvent(((dtTrxSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtTrxSummaryRowChanging != null)) {
                    this.dtTrxSummaryRowChanging(this, new dtTrxSummaryRowChangeEvent(((dtTrxSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtTrxSummaryRowDeleted != null)) {
                    this.dtTrxSummaryRowDeleted(this, new dtTrxSummaryRowChangeEvent(((dtTrxSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtTrxSummaryRowDeleting != null)) {
                    this.dtTrxSummaryRowDeleting(this, new dtTrxSummaryRowChangeEvent(((dtTrxSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtTrxSummaryRow(dtTrxSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtTrxSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtTrxDetailDataTable : global::System.Data.TypedTableBase<dtTrxDetailRow> {
            
            private global::System.Data.DataColumn columnT_TRXDETAIL_ID;
            
            private global::System.Data.DataColumn columnT_TRANSACTION_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnTRXDATE;
            
            private global::System.Data.DataColumn columnBUSINESSPARTNER;
            
            private global::System.Data.DataColumn columnISSALESTRX;
            
            private global::System.Data.DataColumn columnLINE;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnTRXQUANTITY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            private global::System.Data.DataColumn columnUNITPRICE;
            
            private global::System.Data.DataColumn columnLINENETAMT;
            
            private global::System.Data.DataColumn columnLINETAXAMOUNT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailDataTable() {
                this.TableName = "dtTrxDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTrxDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtTrxDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_TRXDETAIL_IDColumn {
                get {
                    return this.columnT_TRXDETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_TRANSACTION_IDColumn {
                get {
                    return this.columnT_TRANSACTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRXDATEColumn {
                get {
                    return this.columnTRXDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BUSINESSPARTNERColumn {
                get {
                    return this.columnBUSINESSPARTNER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ISSALESTRXColumn {
                get {
                    return this.columnISSALESTRX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINEColumn {
                get {
                    return this.columnLINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRXQUANTITYColumn {
                get {
                    return this.columnTRXQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITPRICEColumn {
                get {
                    return this.columnUNITPRICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINENETAMTColumn {
                get {
                    return this.columnLINENETAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINETAXAMOUNTColumn {
                get {
                    return this.columnLINETAXAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRow this[int index] {
                get {
                    return ((dtTrxDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtTrxDetailRowChangeEventHandler dtTrxDetailRowChanging;
            
            public event dtTrxDetailRowChangeEventHandler dtTrxDetailRowChanged;
            
            public event dtTrxDetailRowChangeEventHandler dtTrxDetailRowDeleting;
            
            public event dtTrxDetailRowChangeEventHandler dtTrxDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtTrxDetailRow(dtTrxDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRow AdddtTrxDetailRow(
                        string T_TRXDETAIL_ID, 
                        string T_TRANSACTION_ID, 
                        string ORGANISATION, 
                        string DOCUMENTNO, 
                        System.DateTime TRXDATE, 
                        string BUSINESSPARTNER, 
                        string ISSALESTRX, 
                        string LINE, 
                        string CATEGORY, 
                        string CODE, 
                        string CODE2, 
                        string BAR, 
                        string PRODUCT, 
                        string WAREHOUSE, 
                        decimal TRXQUANTITY, 
                        string UNIT, 
                        decimal UNITPRICE, 
                        decimal LINENETAMT, 
                        decimal LINETAXAMOUNT) {
                dtTrxDetailRow rowdtTrxDetailRow = ((dtTrxDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_TRXDETAIL_ID,
                        T_TRANSACTION_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        TRXDATE,
                        BUSINESSPARTNER,
                        ISSALESTRX,
                        LINE,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        WAREHOUSE,
                        TRXQUANTITY,
                        UNIT,
                        UNITPRICE,
                        LINENETAMT,
                        LINETAXAMOUNT};
                rowdtTrxDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtTrxDetailRow);
                return rowdtTrxDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRow FindByT_TRXDETAIL_ID(string T_TRXDETAIL_ID) {
                return ((dtTrxDetailRow)(this.Rows.Find(new object[] {
                            T_TRXDETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtTrxDetailDataTable cln = ((dtTrxDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtTrxDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_TRXDETAIL_ID = base.Columns["T_TRXDETAIL_ID"];
                this.columnT_TRANSACTION_ID = base.Columns["T_TRANSACTION_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnTRXDATE = base.Columns["TRXDATE"];
                this.columnBUSINESSPARTNER = base.Columns["BUSINESSPARTNER"];
                this.columnISSALESTRX = base.Columns["ISSALESTRX"];
                this.columnLINE = base.Columns["LINE"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnTRXQUANTITY = base.Columns["TRXQUANTITY"];
                this.columnUNIT = base.Columns["UNIT"];
                this.columnUNITPRICE = base.Columns["UNITPRICE"];
                this.columnLINENETAMT = base.Columns["LINENETAMT"];
                this.columnLINETAXAMOUNT = base.Columns["LINETAXAMOUNT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_TRXDETAIL_ID = new global::System.Data.DataColumn("T_TRXDETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_TRXDETAIL_ID);
                this.columnT_TRANSACTION_ID = new global::System.Data.DataColumn("T_TRANSACTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_TRANSACTION_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnTRXDATE = new global::System.Data.DataColumn("TRXDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRXDATE);
                this.columnBUSINESSPARTNER = new global::System.Data.DataColumn("BUSINESSPARTNER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBUSINESSPARTNER);
                this.columnISSALESTRX = new global::System.Data.DataColumn("ISSALESTRX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnISSALESTRX);
                this.columnLINE = new global::System.Data.DataColumn("LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnTRXQUANTITY = new global::System.Data.DataColumn("TRXQUANTITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRXQUANTITY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.columnUNITPRICE = new global::System.Data.DataColumn("UNITPRICE", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNITPRICE);
                this.columnLINENETAMT = new global::System.Data.DataColumn("LINENETAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINENETAMT);
                this.columnLINETAXAMOUNT = new global::System.Data.DataColumn("LINETAXAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINETAXAMOUNT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_TRXDETAIL_ID}, true));
                this.columnT_TRXDETAIL_ID.AllowDBNull = false;
                this.columnT_TRXDETAIL_ID.Unique = true;
                this.columnT_TRANSACTION_ID.AllowDBNull = false;
                this.columnLINE.Caption = "SUBTRXAMOUNT";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnTRXQUANTITY.Caption = "DOCSTATUS";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRow NewdtTrxDetailRow() {
                return ((dtTrxDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtTrxDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtTrxDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtTrxDetailRowChanged != null)) {
                    this.dtTrxDetailRowChanged(this, new dtTrxDetailRowChangeEvent(((dtTrxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtTrxDetailRowChanging != null)) {
                    this.dtTrxDetailRowChanging(this, new dtTrxDetailRowChangeEvent(((dtTrxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtTrxDetailRowDeleted != null)) {
                    this.dtTrxDetailRowDeleted(this, new dtTrxDetailRowChangeEvent(((dtTrxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtTrxDetailRowDeleting != null)) {
                    this.dtTrxDetailRowDeleting(this, new dtTrxDetailRowChangeEvent(((dtTrxDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtTrxDetailRow(dtTrxDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtTrxDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCountSummaryDataTable : global::System.Data.TypedTableBase<dtCountSummaryRow> {
            
            private global::System.Data.DataColumn columnT_PHYSICALCOUNT_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnCOUNTDATE;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnDOCSTATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryDataTable() {
                this.TableName = "dtCountSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCountSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_PHYSICALCOUNT_IDColumn {
                get {
                    return this.columnT_PHYSICALCOUNT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTDATEColumn {
                get {
                    return this.columnCOUNTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCSTATUSColumn {
                get {
                    return this.columnDOCSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow this[int index] {
                get {
                    return ((dtCountSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowChanging;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowChanged;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowDeleting;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCountSummaryRow(dtCountSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow AdddtCountSummaryRow(int T_PHYSICALCOUNT_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime COUNTDATE, string WAREHOUSE, string DOCSTATUS) {
                dtCountSummaryRow rowdtCountSummaryRow = ((dtCountSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_PHYSICALCOUNT_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        COUNTDATE,
                        WAREHOUSE,
                        DOCSTATUS};
                rowdtCountSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCountSummaryRow);
                return rowdtCountSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow FindByT_PHYSICALCOUNT_ID(int T_PHYSICALCOUNT_ID) {
                return ((dtCountSummaryRow)(this.Rows.Find(new object[] {
                            T_PHYSICALCOUNT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCountSummaryDataTable cln = ((dtCountSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCountSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_PHYSICALCOUNT_ID = base.Columns["T_PHYSICALCOUNT_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnCOUNTDATE = base.Columns["COUNTDATE"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnDOCSTATUS = base.Columns["DOCSTATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_PHYSICALCOUNT_ID = new global::System.Data.DataColumn("T_PHYSICALCOUNT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_PHYSICALCOUNT_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnCOUNTDATE = new global::System.Data.DataColumn("COUNTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTDATE);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnDOCSTATUS = new global::System.Data.DataColumn("DOCSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCSTATUS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_PHYSICALCOUNT_ID}, true));
                this.columnT_PHYSICALCOUNT_ID.AllowDBNull = false;
                this.columnT_PHYSICALCOUNT_ID.Unique = true;
                this.columnT_PHYSICALCOUNT_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnCOUNTDATE.Caption = "TRXDATE";
                this.columnWAREHOUSE.Caption = "BUSINESSPARTNER";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow NewdtCountSummaryRow() {
                return ((dtCountSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCountSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCountSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCountSummaryRowChanged != null)) {
                    this.dtCountSummaryRowChanged(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCountSummaryRowChanging != null)) {
                    this.dtCountSummaryRowChanging(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCountSummaryRowDeleted != null)) {
                    this.dtCountSummaryRowDeleted(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCountSummaryRowDeleting != null)) {
                    this.dtCountSummaryRowDeleting(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCountSummaryRow(dtCountSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCountSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCountDetailDataTable : global::System.Data.TypedTableBase<dtCountDetailRow> {
            
            private global::System.Data.DataColumn columnT_PHYSICALCOUNTDETAIL_ID;
            
            private global::System.Data.DataColumn columnT_PHYSICALCOUNT_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnCOUNTDATE;
            
            private global::System.Data.DataColumn columnLINE;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnBOOKQUANTITY;
            
            private global::System.Data.DataColumn columnCOUNTQUANTITY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailDataTable() {
                this.TableName = "dtCountDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCountDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_PHYSICALCOUNTDETAIL_IDColumn {
                get {
                    return this.columnT_PHYSICALCOUNTDETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_PHYSICALCOUNT_IDColumn {
                get {
                    return this.columnT_PHYSICALCOUNT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTDATEColumn {
                get {
                    return this.columnCOUNTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINEColumn {
                get {
                    return this.columnLINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BOOKQUANTITYColumn {
                get {
                    return this.columnBOOKQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COUNTQUANTITYColumn {
                get {
                    return this.columnCOUNTQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow this[int index] {
                get {
                    return ((dtCountDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowChanging;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowChanged;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowDeleting;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCountDetailRow(dtCountDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow AdddtCountDetailRow(string T_PHYSICALCOUNTDETAIL_ID, string T_PHYSICALCOUNT_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime COUNTDATE, string LINE, string CATEGORY, string CODE, string CODE2, string BAR, string PRODUCT, string WAREHOUSE, decimal BOOKQUANTITY, decimal COUNTQUANTITY, string UNIT) {
                dtCountDetailRow rowdtCountDetailRow = ((dtCountDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_PHYSICALCOUNTDETAIL_ID,
                        T_PHYSICALCOUNT_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        COUNTDATE,
                        LINE,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        WAREHOUSE,
                        BOOKQUANTITY,
                        COUNTQUANTITY,
                        UNIT};
                rowdtCountDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCountDetailRow);
                return rowdtCountDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow FindByT_PHYSICALCOUNTDETAIL_ID(string T_PHYSICALCOUNTDETAIL_ID) {
                return ((dtCountDetailRow)(this.Rows.Find(new object[] {
                            T_PHYSICALCOUNTDETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCountDetailDataTable cln = ((dtCountDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCountDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_PHYSICALCOUNTDETAIL_ID = base.Columns["T_PHYSICALCOUNTDETAIL_ID"];
                this.columnT_PHYSICALCOUNT_ID = base.Columns["T_PHYSICALCOUNT_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnCOUNTDATE = base.Columns["COUNTDATE"];
                this.columnLINE = base.Columns["LINE"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnBOOKQUANTITY = base.Columns["BOOKQUANTITY"];
                this.columnCOUNTQUANTITY = base.Columns["COUNTQUANTITY"];
                this.columnUNIT = base.Columns["UNIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_PHYSICALCOUNTDETAIL_ID = new global::System.Data.DataColumn("T_PHYSICALCOUNTDETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_PHYSICALCOUNTDETAIL_ID);
                this.columnT_PHYSICALCOUNT_ID = new global::System.Data.DataColumn("T_PHYSICALCOUNT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_PHYSICALCOUNT_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnCOUNTDATE = new global::System.Data.DataColumn("COUNTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTDATE);
                this.columnLINE = new global::System.Data.DataColumn("LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnBOOKQUANTITY = new global::System.Data.DataColumn("BOOKQUANTITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBOOKQUANTITY);
                this.columnCOUNTQUANTITY = new global::System.Data.DataColumn("COUNTQUANTITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOUNTQUANTITY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_PHYSICALCOUNTDETAIL_ID}, true));
                this.columnT_PHYSICALCOUNTDETAIL_ID.AllowDBNull = false;
                this.columnT_PHYSICALCOUNTDETAIL_ID.Unique = true;
                this.columnT_PHYSICALCOUNTDETAIL_ID.Caption = "T_TRXDETAIL_ID";
                this.columnT_PHYSICALCOUNT_ID.AllowDBNull = false;
                this.columnT_PHYSICALCOUNT_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnCOUNTDATE.Caption = "TRXDATE";
                this.columnLINE.Caption = "SUBTRXAMOUNT";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnBOOKQUANTITY.Caption = "DOCSTATUS";
                this.columnCOUNTQUANTITY.Caption = "UNIT";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow NewdtCountDetailRow() {
                return ((dtCountDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCountDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCountDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCountDetailRowChanged != null)) {
                    this.dtCountDetailRowChanged(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCountDetailRowChanging != null)) {
                    this.dtCountDetailRowChanging(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCountDetailRowDeleted != null)) {
                    this.dtCountDetailRowDeleted(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCountDetailRowDeleting != null)) {
                    this.dtCountDetailRowDeleting(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCountDetailRow(dtCountDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCountDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtUsageSummaryDataTable : global::System.Data.TypedTableBase<dtUsageSummaryRow> {
            
            private global::System.Data.DataColumn columnT_INVENTORYUSE_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnUSEDATE;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnDOCSTATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryDataTable() {
                this.TableName = "dtUsageSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtUsageSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_INVENTORYUSE_IDColumn {
                get {
                    return this.columnT_INVENTORYUSE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USEDATEColumn {
                get {
                    return this.columnUSEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCSTATUSColumn {
                get {
                    return this.columnDOCSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow this[int index] {
                get {
                    return ((dtUsageSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowChanging;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowChanged;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowDeleting;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtUsageSummaryRow(dtUsageSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow AdddtUsageSummaryRow(int T_INVENTORYUSE_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime USEDATE, string WAREHOUSE, string DOCSTATUS) {
                dtUsageSummaryRow rowdtUsageSummaryRow = ((dtUsageSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_INVENTORYUSE_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        USEDATE,
                        WAREHOUSE,
                        DOCSTATUS};
                rowdtUsageSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtUsageSummaryRow);
                return rowdtUsageSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow FindByT_INVENTORYUSE_ID(int T_INVENTORYUSE_ID) {
                return ((dtUsageSummaryRow)(this.Rows.Find(new object[] {
                            T_INVENTORYUSE_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtUsageSummaryDataTable cln = ((dtUsageSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtUsageSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_INVENTORYUSE_ID = base.Columns["T_INVENTORYUSE_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnUSEDATE = base.Columns["USEDATE"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnDOCSTATUS = base.Columns["DOCSTATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_INVENTORYUSE_ID = new global::System.Data.DataColumn("T_INVENTORYUSE_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_INVENTORYUSE_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnUSEDATE = new global::System.Data.DataColumn("USEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSEDATE);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnDOCSTATUS = new global::System.Data.DataColumn("DOCSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCSTATUS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_INVENTORYUSE_ID}, true));
                this.columnT_INVENTORYUSE_ID.AllowDBNull = false;
                this.columnT_INVENTORYUSE_ID.Unique = true;
                this.columnT_INVENTORYUSE_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnUSEDATE.Caption = "TRXDATE";
                this.columnWAREHOUSE.Caption = "BUSINESSPARTNER";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow NewdtUsageSummaryRow() {
                return ((dtUsageSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtUsageSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtUsageSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtUsageSummaryRowChanged != null)) {
                    this.dtUsageSummaryRowChanged(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtUsageSummaryRowChanging != null)) {
                    this.dtUsageSummaryRowChanging(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtUsageSummaryRowDeleted != null)) {
                    this.dtUsageSummaryRowDeleted(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtUsageSummaryRowDeleting != null)) {
                    this.dtUsageSummaryRowDeleting(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtUsageSummaryRow(dtUsageSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtUsageSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtUsageDetailDataTable : global::System.Data.TypedTableBase<dtUsageDetailRow> {
            
            private global::System.Data.DataColumn columnT_INVENTORYUSEDETAIL_ID;
            
            private global::System.Data.DataColumn columnT_INVENTORYUSE_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnUSEDATE;
            
            private global::System.Data.DataColumn columnLINE;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnUSEDQUANTITY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailDataTable() {
                this.TableName = "dtUsageDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtUsageDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_INVENTORYUSEDETAIL_IDColumn {
                get {
                    return this.columnT_INVENTORYUSEDETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_INVENTORYUSE_IDColumn {
                get {
                    return this.columnT_INVENTORYUSE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USEDATEColumn {
                get {
                    return this.columnUSEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINEColumn {
                get {
                    return this.columnLINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn USEDQUANTITYColumn {
                get {
                    return this.columnUSEDQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow this[int index] {
                get {
                    return ((dtUsageDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowChanging;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowChanged;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowDeleting;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtUsageDetailRow(dtUsageDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow AdddtUsageDetailRow(string T_INVENTORYUSEDETAIL_ID, string T_INVENTORYUSE_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime USEDATE, string LINE, string CATEGORY, string CODE, string CODE2, string BAR, string PRODUCT, string WAREHOUSE, decimal USEDQUANTITY, string UNIT) {
                dtUsageDetailRow rowdtUsageDetailRow = ((dtUsageDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_INVENTORYUSEDETAIL_ID,
                        T_INVENTORYUSE_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        USEDATE,
                        LINE,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        WAREHOUSE,
                        USEDQUANTITY,
                        UNIT};
                rowdtUsageDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtUsageDetailRow);
                return rowdtUsageDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow FindByT_INVENTORYUSEDETAIL_ID(string T_INVENTORYUSEDETAIL_ID) {
                return ((dtUsageDetailRow)(this.Rows.Find(new object[] {
                            T_INVENTORYUSEDETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtUsageDetailDataTable cln = ((dtUsageDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtUsageDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_INVENTORYUSEDETAIL_ID = base.Columns["T_INVENTORYUSEDETAIL_ID"];
                this.columnT_INVENTORYUSE_ID = base.Columns["T_INVENTORYUSE_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnUSEDATE = base.Columns["USEDATE"];
                this.columnLINE = base.Columns["LINE"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnUSEDQUANTITY = base.Columns["USEDQUANTITY"];
                this.columnUNIT = base.Columns["UNIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_INVENTORYUSEDETAIL_ID = new global::System.Data.DataColumn("T_INVENTORYUSEDETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_INVENTORYUSEDETAIL_ID);
                this.columnT_INVENTORYUSE_ID = new global::System.Data.DataColumn("T_INVENTORYUSE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_INVENTORYUSE_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnUSEDATE = new global::System.Data.DataColumn("USEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSEDATE);
                this.columnLINE = new global::System.Data.DataColumn("LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnUSEDQUANTITY = new global::System.Data.DataColumn("USEDQUANTITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUSEDQUANTITY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_INVENTORYUSEDETAIL_ID}, true));
                this.columnT_INVENTORYUSEDETAIL_ID.AllowDBNull = false;
                this.columnT_INVENTORYUSEDETAIL_ID.Unique = true;
                this.columnT_INVENTORYUSEDETAIL_ID.Caption = "T_TRXDETAIL_ID";
                this.columnT_INVENTORYUSE_ID.AllowDBNull = false;
                this.columnT_INVENTORYUSE_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnUSEDATE.Caption = "TRXDATE";
                this.columnLINE.Caption = "SUBTRXAMOUNT";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnUSEDQUANTITY.Caption = "UNIT";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow NewdtUsageDetailRow() {
                return ((dtUsageDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtUsageDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtUsageDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtUsageDetailRowChanged != null)) {
                    this.dtUsageDetailRowChanged(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtUsageDetailRowChanging != null)) {
                    this.dtUsageDetailRowChanging(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtUsageDetailRowDeleted != null)) {
                    this.dtUsageDetailRowDeleted(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtUsageDetailRowDeleting != null)) {
                    this.dtUsageDetailRowDeleting(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtUsageDetailRow(dtUsageDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtUsageDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMoveSummaryDataTable : global::System.Data.TypedTableBase<dtMoveSummaryRow> {
            
            private global::System.Data.DataColumn columnT_MOVEMENT_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnMOVEDATE;
            
            private global::System.Data.DataColumn columnMOVEDFROM;
            
            private global::System.Data.DataColumn columnMOVEDTO;
            
            private global::System.Data.DataColumn columnDOCSTATUS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryDataTable() {
                this.TableName = "dtMoveSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMoveSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMoveSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_MOVEMENT_IDColumn {
                get {
                    return this.columnT_MOVEMENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDATEColumn {
                get {
                    return this.columnMOVEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDFROMColumn {
                get {
                    return this.columnMOVEDFROM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDTOColumn {
                get {
                    return this.columnMOVEDTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCSTATUSColumn {
                get {
                    return this.columnDOCSTATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRow this[int index] {
                get {
                    return ((dtMoveSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtMoveSummaryRowChangeEventHandler dtMoveSummaryRowChanging;
            
            public event dtMoveSummaryRowChangeEventHandler dtMoveSummaryRowChanged;
            
            public event dtMoveSummaryRowChangeEventHandler dtMoveSummaryRowDeleting;
            
            public event dtMoveSummaryRowChangeEventHandler dtMoveSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMoveSummaryRow(dtMoveSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRow AdddtMoveSummaryRow(int T_MOVEMENT_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime MOVEDATE, string MOVEDFROM, string MOVEDTO, string DOCSTATUS) {
                dtMoveSummaryRow rowdtMoveSummaryRow = ((dtMoveSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_MOVEMENT_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        MOVEDATE,
                        MOVEDFROM,
                        MOVEDTO,
                        DOCSTATUS};
                rowdtMoveSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMoveSummaryRow);
                return rowdtMoveSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRow FindByT_MOVEMENT_ID(int T_MOVEMENT_ID) {
                return ((dtMoveSummaryRow)(this.Rows.Find(new object[] {
                            T_MOVEMENT_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMoveSummaryDataTable cln = ((dtMoveSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMoveSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_MOVEMENT_ID = base.Columns["T_MOVEMENT_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnMOVEDATE = base.Columns["MOVEDATE"];
                this.columnMOVEDFROM = base.Columns["MOVEDFROM"];
                this.columnMOVEDTO = base.Columns["MOVEDTO"];
                this.columnDOCSTATUS = base.Columns["DOCSTATUS"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_MOVEMENT_ID = new global::System.Data.DataColumn("T_MOVEMENT_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_MOVEMENT_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnMOVEDATE = new global::System.Data.DataColumn("MOVEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDATE);
                this.columnMOVEDFROM = new global::System.Data.DataColumn("MOVEDFROM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDFROM);
                this.columnMOVEDTO = new global::System.Data.DataColumn("MOVEDTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDTO);
                this.columnDOCSTATUS = new global::System.Data.DataColumn("DOCSTATUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCSTATUS);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_MOVEMENT_ID}, true));
                this.columnT_MOVEMENT_ID.AllowDBNull = false;
                this.columnT_MOVEMENT_ID.Unique = true;
                this.columnT_MOVEMENT_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnMOVEDATE.Caption = "TRXDATE";
                this.columnMOVEDFROM.Caption = "BUSINESSPARTNER";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRow NewdtMoveSummaryRow() {
                return ((dtMoveSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMoveSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMoveSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMoveSummaryRowChanged != null)) {
                    this.dtMoveSummaryRowChanged(this, new dtMoveSummaryRowChangeEvent(((dtMoveSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMoveSummaryRowChanging != null)) {
                    this.dtMoveSummaryRowChanging(this, new dtMoveSummaryRowChangeEvent(((dtMoveSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMoveSummaryRowDeleted != null)) {
                    this.dtMoveSummaryRowDeleted(this, new dtMoveSummaryRowChangeEvent(((dtMoveSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMoveSummaryRowDeleting != null)) {
                    this.dtMoveSummaryRowDeleting(this, new dtMoveSummaryRowChangeEvent(((dtMoveSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMoveSummaryRow(dtMoveSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMoveSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMoveDetailDataTable : global::System.Data.TypedTableBase<dtMoveDetailRow> {
            
            private global::System.Data.DataColumn columnT_MOVEMENTDETAIL_ID;
            
            private global::System.Data.DataColumn columnT_MOVEMENT_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnMOVEDATE;
            
            private global::System.Data.DataColumn columnLINE;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnMOVEDFROM;
            
            private global::System.Data.DataColumn columnMOVEDTO;
            
            private global::System.Data.DataColumn columnMOVEQUANTITY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailDataTable() {
                this.TableName = "dtMoveDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMoveDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMoveDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_MOVEMENTDETAIL_IDColumn {
                get {
                    return this.columnT_MOVEMENTDETAIL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn T_MOVEMENT_IDColumn {
                get {
                    return this.columnT_MOVEMENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDATEColumn {
                get {
                    return this.columnMOVEDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINEColumn {
                get {
                    return this.columnLINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDFROMColumn {
                get {
                    return this.columnMOVEDFROM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEDTOColumn {
                get {
                    return this.columnMOVEDTO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEQUANTITYColumn {
                get {
                    return this.columnMOVEQUANTITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRow this[int index] {
                get {
                    return ((dtMoveDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtMoveDetailRowChangeEventHandler dtMoveDetailRowChanging;
            
            public event dtMoveDetailRowChangeEventHandler dtMoveDetailRowChanged;
            
            public event dtMoveDetailRowChangeEventHandler dtMoveDetailRowDeleting;
            
            public event dtMoveDetailRowChangeEventHandler dtMoveDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMoveDetailRow(dtMoveDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRow AdddtMoveDetailRow(string T_MOVEMENTDETAIL_ID, string T_MOVEMENT_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime MOVEDATE, string LINE, string CATEGORY, string CODE, string CODE2, string BAR, string PRODUCT, string MOVEDFROM, string MOVEDTO, decimal MOVEQUANTITY, string UNIT) {
                dtMoveDetailRow rowdtMoveDetailRow = ((dtMoveDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        T_MOVEMENTDETAIL_ID,
                        T_MOVEMENT_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        MOVEDATE,
                        LINE,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        MOVEDFROM,
                        MOVEDTO,
                        MOVEQUANTITY,
                        UNIT};
                rowdtMoveDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMoveDetailRow);
                return rowdtMoveDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRow FindByT_MOVEMENTDETAIL_ID(string T_MOVEMENTDETAIL_ID) {
                return ((dtMoveDetailRow)(this.Rows.Find(new object[] {
                            T_MOVEMENTDETAIL_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMoveDetailDataTable cln = ((dtMoveDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMoveDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnT_MOVEMENTDETAIL_ID = base.Columns["T_MOVEMENTDETAIL_ID"];
                this.columnT_MOVEMENT_ID = base.Columns["T_MOVEMENT_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnMOVEDATE = base.Columns["MOVEDATE"];
                this.columnLINE = base.Columns["LINE"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnMOVEDFROM = base.Columns["MOVEDFROM"];
                this.columnMOVEDTO = base.Columns["MOVEDTO"];
                this.columnMOVEQUANTITY = base.Columns["MOVEQUANTITY"];
                this.columnUNIT = base.Columns["UNIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnT_MOVEMENTDETAIL_ID = new global::System.Data.DataColumn("T_MOVEMENTDETAIL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_MOVEMENTDETAIL_ID);
                this.columnT_MOVEMENT_ID = new global::System.Data.DataColumn("T_MOVEMENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnT_MOVEMENT_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnMOVEDATE = new global::System.Data.DataColumn("MOVEDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDATE);
                this.columnLINE = new global::System.Data.DataColumn("LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnMOVEDFROM = new global::System.Data.DataColumn("MOVEDFROM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDFROM);
                this.columnMOVEDTO = new global::System.Data.DataColumn("MOVEDTO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEDTO);
                this.columnMOVEQUANTITY = new global::System.Data.DataColumn("MOVEQUANTITY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEQUANTITY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnT_MOVEMENTDETAIL_ID}, true));
                this.columnT_MOVEMENTDETAIL_ID.AllowDBNull = false;
                this.columnT_MOVEMENTDETAIL_ID.Unique = true;
                this.columnT_MOVEMENTDETAIL_ID.Caption = "T_TRXDETAIL_ID";
                this.columnT_MOVEMENT_ID.AllowDBNull = false;
                this.columnT_MOVEMENT_ID.Caption = "T_TRANSACTION_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnMOVEDATE.Caption = "TRXDATE";
                this.columnLINE.Caption = "SUBTRXAMOUNT";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnMOVEDFROM.Caption = "WAREHOUSE";
                this.columnMOVEQUANTITY.Caption = "UNIT";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRow NewdtMoveDetailRow() {
                return ((dtMoveDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMoveDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMoveDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMoveDetailRowChanged != null)) {
                    this.dtMoveDetailRowChanged(this, new dtMoveDetailRowChangeEvent(((dtMoveDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMoveDetailRowChanging != null)) {
                    this.dtMoveDetailRowChanging(this, new dtMoveDetailRowChangeEvent(((dtMoveDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMoveDetailRowDeleted != null)) {
                    this.dtMoveDetailRowDeleted(this, new dtMoveDetailRowChangeEvent(((dtMoveDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMoveDetailRowDeleting != null)) {
                    this.dtMoveDetailRowDeleting(this, new dtMoveDetailRowChangeEvent(((dtMoveDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMoveDetailRow(dtMoveDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMoveDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMaterialTransactionDataTable : global::System.Data.TypedTableBase<dtMaterialTransactionRow> {
            
            private global::System.Data.DataColumn columnM_TRANSACTION_ID;
            
            private global::System.Data.DataColumn columnORGANISATION;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnMOVEMENTDATE;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnMOVEMENTQTY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            private global::System.Data.DataColumn columnType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionDataTable() {
                this.TableName = "dtMaterialTransaction";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMaterialTransactionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMaterialTransactionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M_TRANSACTION_IDColumn {
                get {
                    return this.columnM_TRANSACTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ORGANISATIONColumn {
                get {
                    return this.columnORGANISATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEMENTDATEColumn {
                get {
                    return this.columnMOVEMENTDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MOVEMENTQTYColumn {
                get {
                    return this.columnMOVEMENTQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRow this[int index] {
                get {
                    return ((dtMaterialTransactionRow)(this.Rows[index]));
                }
            }
            
            public event dtMaterialTransactionRowChangeEventHandler dtMaterialTransactionRowChanging;
            
            public event dtMaterialTransactionRowChangeEventHandler dtMaterialTransactionRowChanged;
            
            public event dtMaterialTransactionRowChangeEventHandler dtMaterialTransactionRowDeleting;
            
            public event dtMaterialTransactionRowChangeEventHandler dtMaterialTransactionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMaterialTransactionRow(dtMaterialTransactionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRow AdddtMaterialTransactionRow(string M_TRANSACTION_ID, string ORGANISATION, string DOCUMENTNO, System.DateTime MOVEMENTDATE, string CATEGORY, string CODE, string CODE2, string BAR, string PRODUCT, string WAREHOUSE, decimal MOVEMENTQTY, string UNIT, string Type) {
                dtMaterialTransactionRow rowdtMaterialTransactionRow = ((dtMaterialTransactionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        M_TRANSACTION_ID,
                        ORGANISATION,
                        DOCUMENTNO,
                        MOVEMENTDATE,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        WAREHOUSE,
                        MOVEMENTQTY,
                        UNIT,
                        Type};
                rowdtMaterialTransactionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMaterialTransactionRow);
                return rowdtMaterialTransactionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRow FindByM_TRANSACTION_ID(string M_TRANSACTION_ID) {
                return ((dtMaterialTransactionRow)(this.Rows.Find(new object[] {
                            M_TRANSACTION_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMaterialTransactionDataTable cln = ((dtMaterialTransactionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMaterialTransactionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnM_TRANSACTION_ID = base.Columns["M_TRANSACTION_ID"];
                this.columnORGANISATION = base.Columns["ORGANISATION"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnMOVEMENTDATE = base.Columns["MOVEMENTDATE"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnMOVEMENTQTY = base.Columns["MOVEMENTQTY"];
                this.columnUNIT = base.Columns["UNIT"];
                this.columnType = base.Columns["Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnM_TRANSACTION_ID = new global::System.Data.DataColumn("M_TRANSACTION_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM_TRANSACTION_ID);
                this.columnORGANISATION = new global::System.Data.DataColumn("ORGANISATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnORGANISATION);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnMOVEMENTDATE = new global::System.Data.DataColumn("MOVEMENTDATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEMENTDATE);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnMOVEMENTQTY = new global::System.Data.DataColumn("MOVEMENTQTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMOVEMENTQTY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnM_TRANSACTION_ID}, true));
                this.columnM_TRANSACTION_ID.AllowDBNull = false;
                this.columnM_TRANSACTION_ID.Unique = true;
                this.columnM_TRANSACTION_ID.Caption = "T_TRXDETAIL_ID";
                this.columnORGANISATION.Caption = "STATION";
                this.columnMOVEMENTDATE.Caption = "TRXDATE";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnMOVEMENTQTY.Caption = "UNIT";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRow NewdtMaterialTransactionRow() {
                return ((dtMaterialTransactionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMaterialTransactionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMaterialTransactionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMaterialTransactionRowChanged != null)) {
                    this.dtMaterialTransactionRowChanged(this, new dtMaterialTransactionRowChangeEvent(((dtMaterialTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMaterialTransactionRowChanging != null)) {
                    this.dtMaterialTransactionRowChanging(this, new dtMaterialTransactionRowChangeEvent(((dtMaterialTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMaterialTransactionRowDeleted != null)) {
                    this.dtMaterialTransactionRowDeleted(this, new dtMaterialTransactionRowChangeEvent(((dtMaterialTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMaterialTransactionRowDeleting != null)) {
                    this.dtMaterialTransactionRowDeleting(this, new dtMaterialTransactionRowChangeEvent(((dtMaterialTransactionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMaterialTransactionRow(dtMaterialTransactionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMaterialTransactionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtInventoryDataTable : global::System.Data.TypedTableBase<dtInventoryRow> {
            
            private global::System.Data.DataColumn columnM_PRODUCT_ID;
            
            private global::System.Data.DataColumn columnM_WAREHOUSE_ID;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnPRODUCT;
            
            private global::System.Data.DataColumn columnWAREHOUSE;
            
            private global::System.Data.DataColumn columnCURRENTQTY;
            
            private global::System.Data.DataColumn columnUNIT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryDataTable() {
                this.TableName = "dtInventory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtInventoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtInventoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M_PRODUCT_IDColumn {
                get {
                    return this.columnM_PRODUCT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M_WAREHOUSE_IDColumn {
                get {
                    return this.columnM_WAREHOUSE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRODUCTColumn {
                get {
                    return this.columnPRODUCT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WAREHOUSEColumn {
                get {
                    return this.columnWAREHOUSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CURRENTQTYColumn {
                get {
                    return this.columnCURRENTQTY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UNITColumn {
                get {
                    return this.columnUNIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryRow this[int index] {
                get {
                    return ((dtInventoryRow)(this.Rows[index]));
                }
            }
            
            public event dtInventoryRowChangeEventHandler dtInventoryRowChanging;
            
            public event dtInventoryRowChangeEventHandler dtInventoryRowChanged;
            
            public event dtInventoryRowChangeEventHandler dtInventoryRowDeleting;
            
            public event dtInventoryRowChangeEventHandler dtInventoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtInventoryRow(dtInventoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryRow AdddtInventoryRow(string M_PRODUCT_ID, string M_WAREHOUSE_ID, string CATEGORY, string CODE, string CODE2, string BAR, string PRODUCT, string WAREHOUSE, decimal CURRENTQTY, string UNIT) {
                dtInventoryRow rowdtInventoryRow = ((dtInventoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        M_PRODUCT_ID,
                        M_WAREHOUSE_ID,
                        CATEGORY,
                        CODE,
                        CODE2,
                        BAR,
                        PRODUCT,
                        WAREHOUSE,
                        CURRENTQTY,
                        UNIT};
                rowdtInventoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtInventoryRow);
                return rowdtInventoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtInventoryDataTable cln = ((dtInventoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtInventoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnM_PRODUCT_ID = base.Columns["M_PRODUCT_ID"];
                this.columnM_WAREHOUSE_ID = base.Columns["M_WAREHOUSE_ID"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnCODE = base.Columns["CODE"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnPRODUCT = base.Columns["PRODUCT"];
                this.columnWAREHOUSE = base.Columns["WAREHOUSE"];
                this.columnCURRENTQTY = base.Columns["CURRENTQTY"];
                this.columnUNIT = base.Columns["UNIT"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnM_PRODUCT_ID = new global::System.Data.DataColumn("M_PRODUCT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM_PRODUCT_ID);
                this.columnM_WAREHOUSE_ID = new global::System.Data.DataColumn("M_WAREHOUSE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM_WAREHOUSE_ID);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnPRODUCT = new global::System.Data.DataColumn("PRODUCT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRODUCT);
                this.columnWAREHOUSE = new global::System.Data.DataColumn("WAREHOUSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWAREHOUSE);
                this.columnCURRENTQTY = new global::System.Data.DataColumn("CURRENTQTY", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCURRENTQTY);
                this.columnUNIT = new global::System.Data.DataColumn("UNIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUNIT);
                this.columnM_PRODUCT_ID.AllowDBNull = false;
                this.columnM_PRODUCT_ID.Caption = "T_TRXDETAIL_ID";
                this.columnCODE.Caption = "TRXTAXAMOUNT";
                this.columnPRODUCT.Caption = "GRANDTRXAMOUNT";
                this.columnCURRENTQTY.Caption = "UNIT";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryRow NewdtInventoryRow() {
                return ((dtInventoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtInventoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtInventoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtInventoryRowChanged != null)) {
                    this.dtInventoryRowChanged(this, new dtInventoryRowChangeEvent(((dtInventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtInventoryRowChanging != null)) {
                    this.dtInventoryRowChanging(this, new dtInventoryRowChangeEvent(((dtInventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtInventoryRowDeleted != null)) {
                    this.dtInventoryRowDeleted(this, new dtInventoryRowChangeEvent(((dtInventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtInventoryRowDeleting != null)) {
                    this.dtInventoryRowDeleting(this, new dtInventoryRowChangeEvent(((dtInventoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtInventoryRow(dtInventoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsReportData ds = new dtsReportData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtInventoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtTrxSummaryRow : global::System.Data.DataRow {
            
            private dtTrxSummaryDataTable tabledtTrxSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTrxSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtTrxSummary = ((dtTrxSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_TRANSACTION_ID {
                get {
                    return ((int)(this[this.tabledtTrxSummary.T_TRANSACTION_IDColumn]));
                }
                set {
                    this[this.tabledtTrxSummary.T_TRANSACTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxSummary.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxSummary.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TRXDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtTrxSummary.TRXDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRXDATE\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.TRXDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUSINESSPARTNER {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxSummary.BUSINESSPARTNERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUSINESSPARTNER\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.BUSINESSPARTNERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISSALESTRX {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxSummary.ISSALESTRXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISSALESTRX\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.ISSALESTRXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SUBTRXAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxSummary.SUBTRXAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SUBTRXAMOUNT\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.SUBTRXAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TRXTAXAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxSummary.TRXTAXAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRXTAXAMOUNT\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.TRXTAXAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal GRANDTRXAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxSummary.GRANDTRXAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GRANDTRXAMOUNT\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.GRANDTRXAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCSTATUS {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxSummary.DOCSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCSTATUS\' in table \'dtTrxSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxSummary.DOCSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtTrxSummary.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtTrxSummary.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtTrxSummary.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtTrxSummary.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRXDATENull() {
                return this.IsNull(this.tabledtTrxSummary.TRXDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRXDATENull() {
                this[this.tabledtTrxSummary.TRXDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSINESSPARTNERNull() {
                return this.IsNull(this.tabledtTrxSummary.BUSINESSPARTNERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSINESSPARTNERNull() {
                this[this.tabledtTrxSummary.BUSINESSPARTNERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISSALESTRXNull() {
                return this.IsNull(this.tabledtTrxSummary.ISSALESTRXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISSALESTRXNull() {
                this[this.tabledtTrxSummary.ISSALESTRXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSUBTRXAMOUNTNull() {
                return this.IsNull(this.tabledtTrxSummary.SUBTRXAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSUBTRXAMOUNTNull() {
                this[this.tabledtTrxSummary.SUBTRXAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRXTAXAMOUNTNull() {
                return this.IsNull(this.tabledtTrxSummary.TRXTAXAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRXTAXAMOUNTNull() {
                this[this.tabledtTrxSummary.TRXTAXAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGRANDTRXAMOUNTNull() {
                return this.IsNull(this.tabledtTrxSummary.GRANDTRXAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGRANDTRXAMOUNTNull() {
                this[this.tabledtTrxSummary.GRANDTRXAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCSTATUSNull() {
                return this.IsNull(this.tabledtTrxSummary.DOCSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCSTATUSNull() {
                this[this.tabledtTrxSummary.DOCSTATUSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtTrxDetailRow : global::System.Data.DataRow {
            
            private dtTrxDetailDataTable tabledtTrxDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtTrxDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtTrxDetail = ((dtTrxDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_TRXDETAIL_ID {
                get {
                    return ((string)(this[this.tabledtTrxDetail.T_TRXDETAIL_IDColumn]));
                }
                set {
                    this[this.tabledtTrxDetail.T_TRXDETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_TRANSACTION_ID {
                get {
                    return ((string)(this[this.tabledtTrxDetail.T_TRANSACTION_IDColumn]));
                }
                set {
                    this[this.tabledtTrxDetail.T_TRANSACTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TRXDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtTrxDetail.TRXDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRXDATE\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.TRXDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BUSINESSPARTNER {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.BUSINESSPARTNERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BUSINESSPARTNER\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.BUSINESSPARTNERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ISSALESTRX {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.ISSALESTRXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ISSALESTRX\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.ISSALESTRXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TRXQUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxDetail.TRXQUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRXQUANTITY\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.TRXQUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtTrxDetail.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UNITPRICE {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxDetail.UNITPRICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNITPRICE\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.UNITPRICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LINENETAMT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxDetail.LINENETAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINENETAMT\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.LINENETAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LINETAXAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtTrxDetail.LINETAXAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINETAXAMOUNT\' in table \'dtTrxDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtTrxDetail.LINETAXAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtTrxDetail.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtTrxDetail.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtTrxDetail.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtTrxDetail.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRXDATENull() {
                return this.IsNull(this.tabledtTrxDetail.TRXDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRXDATENull() {
                this[this.tabledtTrxDetail.TRXDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBUSINESSPARTNERNull() {
                return this.IsNull(this.tabledtTrxDetail.BUSINESSPARTNERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBUSINESSPARTNERNull() {
                this[this.tabledtTrxDetail.BUSINESSPARTNERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsISSALESTRXNull() {
                return this.IsNull(this.tabledtTrxDetail.ISSALESTRXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetISSALESTRXNull() {
                this[this.tabledtTrxDetail.ISSALESTRXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENull() {
                return this.IsNull(this.tabledtTrxDetail.LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENull() {
                this[this.tabledtTrxDetail.LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtTrxDetail.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtTrxDetail.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtTrxDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtTrxDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtTrxDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtTrxDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtTrxDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtTrxDetail.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtTrxDetail.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtTrxDetail.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtTrxDetail.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtTrxDetail.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRXQUANTITYNull() {
                return this.IsNull(this.tabledtTrxDetail.TRXQUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRXQUANTITYNull() {
                this[this.tabledtTrxDetail.TRXQUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtTrxDetail.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtTrxDetail.UNITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITPRICENull() {
                return this.IsNull(this.tabledtTrxDetail.UNITPRICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITPRICENull() {
                this[this.tabledtTrxDetail.UNITPRICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENETAMTNull() {
                return this.IsNull(this.tabledtTrxDetail.LINENETAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENETAMTNull() {
                this[this.tabledtTrxDetail.LINENETAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINETAXAMOUNTNull() {
                return this.IsNull(this.tabledtTrxDetail.LINETAXAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINETAXAMOUNTNull() {
                this[this.tabledtTrxDetail.LINETAXAMOUNTColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCountSummaryRow : global::System.Data.DataRow {
            
            private dtCountSummaryDataTable tabledtCountSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCountSummary = ((dtCountSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_PHYSICALCOUNT_ID {
                get {
                    return ((int)(this[this.tabledtCountSummary.T_PHYSICALCOUNT_IDColumn]));
                }
                set {
                    this[this.tabledtCountSummary.T_PHYSICALCOUNT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime COUNTDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtCountSummary.COUNTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTDATE\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.COUNTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCSTATUS {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.DOCSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCSTATUS\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DOCSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtCountSummary.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtCountSummary.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtCountSummary.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtCountSummary.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTDATENull() {
                return this.IsNull(this.tabledtCountSummary.COUNTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTDATENull() {
                this[this.tabledtCountSummary.COUNTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtCountSummary.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtCountSummary.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCSTATUSNull() {
                return this.IsNull(this.tabledtCountSummary.DOCSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCSTATUSNull() {
                this[this.tabledtCountSummary.DOCSTATUSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCountDetailRow : global::System.Data.DataRow {
            
            private dtCountDetailDataTable tabledtCountDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCountDetail = ((dtCountDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_PHYSICALCOUNTDETAIL_ID {
                get {
                    return ((string)(this[this.tabledtCountDetail.T_PHYSICALCOUNTDETAIL_IDColumn]));
                }
                set {
                    this[this.tabledtCountDetail.T_PHYSICALCOUNTDETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_PHYSICALCOUNT_ID {
                get {
                    return ((string)(this[this.tabledtCountDetail.T_PHYSICALCOUNT_IDColumn]));
                }
                set {
                    this[this.tabledtCountDetail.T_PHYSICALCOUNT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime COUNTDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtCountDetail.COUNTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTDATE\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.COUNTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal BOOKQUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCountDetail.BOOKQUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BOOKQUANTITY\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.BOOKQUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal COUNTQUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCountDetail.COUNTQUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COUNTQUANTITY\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.COUNTQUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtCountDetail.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtCountDetail.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtCountDetail.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtCountDetail.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTDATENull() {
                return this.IsNull(this.tabledtCountDetail.COUNTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTDATENull() {
                this[this.tabledtCountDetail.COUNTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENull() {
                return this.IsNull(this.tabledtCountDetail.LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENull() {
                this[this.tabledtCountDetail.LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtCountDetail.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtCountDetail.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtCountDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtCountDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtCountDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtCountDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtCountDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtCountDetail.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtCountDetail.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtCountDetail.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtCountDetail.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtCountDetail.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBOOKQUANTITYNull() {
                return this.IsNull(this.tabledtCountDetail.BOOKQUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBOOKQUANTITYNull() {
                this[this.tabledtCountDetail.BOOKQUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOUNTQUANTITYNull() {
                return this.IsNull(this.tabledtCountDetail.COUNTQUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOUNTQUANTITYNull() {
                this[this.tabledtCountDetail.COUNTQUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtCountDetail.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtCountDetail.UNITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtUsageSummaryRow : global::System.Data.DataRow {
            
            private dtUsageSummaryDataTable tabledtUsageSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtUsageSummary = ((dtUsageSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_INVENTORYUSE_ID {
                get {
                    return ((int)(this[this.tabledtUsageSummary.T_INVENTORYUSE_IDColumn]));
                }
                set {
                    this[this.tabledtUsageSummary.T_INVENTORYUSE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime USEDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtUsageSummary.USEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USEDATE\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.USEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCSTATUS {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.DOCSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCSTATUS\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DOCSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtUsageSummary.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtUsageSummary.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtUsageSummary.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtUsageSummary.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSEDATENull() {
                return this.IsNull(this.tabledtUsageSummary.USEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSEDATENull() {
                this[this.tabledtUsageSummary.USEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtUsageSummary.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtUsageSummary.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCSTATUSNull() {
                return this.IsNull(this.tabledtUsageSummary.DOCSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCSTATUSNull() {
                this[this.tabledtUsageSummary.DOCSTATUSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtUsageDetailRow : global::System.Data.DataRow {
            
            private dtUsageDetailDataTable tabledtUsageDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtUsageDetail = ((dtUsageDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_INVENTORYUSEDETAIL_ID {
                get {
                    return ((string)(this[this.tabledtUsageDetail.T_INVENTORYUSEDETAIL_IDColumn]));
                }
                set {
                    this[this.tabledtUsageDetail.T_INVENTORYUSEDETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_INVENTORYUSE_ID {
                get {
                    return ((string)(this[this.tabledtUsageDetail.T_INVENTORYUSE_IDColumn]));
                }
                set {
                    this[this.tabledtUsageDetail.T_INVENTORYUSE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime USEDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtUsageDetail.USEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USEDATE\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.USEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal USEDQUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtUsageDetail.USEDQUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'USEDQUANTITY\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.USEDQUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtUsageDetail.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtUsageDetail.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtUsageDetail.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtUsageDetail.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSEDATENull() {
                return this.IsNull(this.tabledtUsageDetail.USEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSEDATENull() {
                this[this.tabledtUsageDetail.USEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENull() {
                return this.IsNull(this.tabledtUsageDetail.LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENull() {
                this[this.tabledtUsageDetail.LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtUsageDetail.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtUsageDetail.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtUsageDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtUsageDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtUsageDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtUsageDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtUsageDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtUsageDetail.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtUsageDetail.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtUsageDetail.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtUsageDetail.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtUsageDetail.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUSEDQUANTITYNull() {
                return this.IsNull(this.tabledtUsageDetail.USEDQUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUSEDQUANTITYNull() {
                this[this.tabledtUsageDetail.USEDQUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtUsageDetail.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtUsageDetail.UNITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMoveSummaryRow : global::System.Data.DataRow {
            
            private dtMoveSummaryDataTable tabledtMoveSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMoveSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMoveSummary = ((dtMoveSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int T_MOVEMENT_ID {
                get {
                    return ((int)(this[this.tabledtMoveSummary.T_MOVEMENT_IDColumn]));
                }
                set {
                    this[this.tabledtMoveSummary.T_MOVEMENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveSummary.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveSummary.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MOVEDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMoveSummary.MOVEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDATE\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.MOVEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOVEDFROM {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveSummary.MOVEDFROMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDFROM\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.MOVEDFROMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOVEDTO {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveSummary.MOVEDTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDTO\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.MOVEDTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCSTATUS {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveSummary.DOCSTATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCSTATUS\' in table \'dtMoveSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveSummary.DOCSTATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtMoveSummary.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtMoveSummary.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtMoveSummary.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtMoveSummary.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDATENull() {
                return this.IsNull(this.tabledtMoveSummary.MOVEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDATENull() {
                this[this.tabledtMoveSummary.MOVEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDFROMNull() {
                return this.IsNull(this.tabledtMoveSummary.MOVEDFROMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDFROMNull() {
                this[this.tabledtMoveSummary.MOVEDFROMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDTONull() {
                return this.IsNull(this.tabledtMoveSummary.MOVEDTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDTONull() {
                this[this.tabledtMoveSummary.MOVEDTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCSTATUSNull() {
                return this.IsNull(this.tabledtMoveSummary.DOCSTATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCSTATUSNull() {
                this[this.tabledtMoveSummary.DOCSTATUSColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMoveDetailRow : global::System.Data.DataRow {
            
            private dtMoveDetailDataTable tabledtMoveDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMoveDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMoveDetail = ((dtMoveDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_MOVEMENTDETAIL_ID {
                get {
                    return ((string)(this[this.tabledtMoveDetail.T_MOVEMENTDETAIL_IDColumn]));
                }
                set {
                    this[this.tabledtMoveDetail.T_MOVEMENTDETAIL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string T_MOVEMENT_ID {
                get {
                    return ((string)(this[this.tabledtMoveDetail.T_MOVEMENT_IDColumn]));
                }
                set {
                    this[this.tabledtMoveDetail.T_MOVEMENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MOVEDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMoveDetail.MOVEDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDATE\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.MOVEDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOVEDFROM {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.MOVEDFROMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDFROM\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.MOVEDFROMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MOVEDTO {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.MOVEDTOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEDTO\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.MOVEDTOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MOVEQUANTITY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtMoveDetail.MOVEQUANTITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEQUANTITY\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.MOVEQUANTITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtMoveDetail.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtMoveDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMoveDetail.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtMoveDetail.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtMoveDetail.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtMoveDetail.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtMoveDetail.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDATENull() {
                return this.IsNull(this.tabledtMoveDetail.MOVEDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDATENull() {
                this[this.tabledtMoveDetail.MOVEDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENull() {
                return this.IsNull(this.tabledtMoveDetail.LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENull() {
                this[this.tabledtMoveDetail.LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtMoveDetail.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtMoveDetail.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtMoveDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtMoveDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtMoveDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtMoveDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtMoveDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtMoveDetail.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtMoveDetail.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtMoveDetail.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDFROMNull() {
                return this.IsNull(this.tabledtMoveDetail.MOVEDFROMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDFROMNull() {
                this[this.tabledtMoveDetail.MOVEDFROMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEDTONull() {
                return this.IsNull(this.tabledtMoveDetail.MOVEDTOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEDTONull() {
                this[this.tabledtMoveDetail.MOVEDTOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEQUANTITYNull() {
                return this.IsNull(this.tabledtMoveDetail.MOVEQUANTITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEQUANTITYNull() {
                this[this.tabledtMoveDetail.MOVEQUANTITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtMoveDetail.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtMoveDetail.UNITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMaterialTransactionRow : global::System.Data.DataRow {
            
            private dtMaterialTransactionDataTable tabledtMaterialTransaction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMaterialTransactionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMaterialTransaction = ((dtMaterialTransactionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M_TRANSACTION_ID {
                get {
                    return ((string)(this[this.tabledtMaterialTransaction.M_TRANSACTION_IDColumn]));
                }
                set {
                    this[this.tabledtMaterialTransaction.M_TRANSACTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ORGANISATION {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.ORGANISATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ORGANISATION\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.ORGANISATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime MOVEMENTDATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMaterialTransaction.MOVEMENTDATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEMENTDATE\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.MOVEMENTDATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MOVEMENTQTY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtMaterialTransaction.MOVEMENTQTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MOVEMENTQTY\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.MOVEMENTQTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    try {
                        return ((string)(this[this.tabledtMaterialTransaction.TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Type\' in table \'dtMaterialTransaction\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMaterialTransaction.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsORGANISATIONNull() {
                return this.IsNull(this.tabledtMaterialTransaction.ORGANISATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetORGANISATIONNull() {
                this[this.tabledtMaterialTransaction.ORGANISATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtMaterialTransaction.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtMaterialTransaction.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEMENTDATENull() {
                return this.IsNull(this.tabledtMaterialTransaction.MOVEMENTDATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEMENTDATENull() {
                this[this.tabledtMaterialTransaction.MOVEMENTDATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtMaterialTransaction.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtMaterialTransaction.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtMaterialTransaction.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtMaterialTransaction.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtMaterialTransaction.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtMaterialTransaction.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtMaterialTransaction.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtMaterialTransaction.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtMaterialTransaction.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtMaterialTransaction.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtMaterialTransaction.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtMaterialTransaction.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMOVEMENTQTYNull() {
                return this.IsNull(this.tabledtMaterialTransaction.MOVEMENTQTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMOVEMENTQTYNull() {
                this[this.tabledtMaterialTransaction.MOVEMENTQTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtMaterialTransaction.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtMaterialTransaction.UNITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTypeNull() {
                return this.IsNull(this.tabledtMaterialTransaction.TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTypeNull() {
                this[this.tabledtMaterialTransaction.TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtInventoryRow : global::System.Data.DataRow {
            
            private dtInventoryDataTable tabledtInventory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtInventoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtInventory = ((dtInventoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M_PRODUCT_ID {
                get {
                    return ((string)(this[this.tabledtInventory.M_PRODUCT_IDColumn]));
                }
                set {
                    this[this.tabledtInventory.M_PRODUCT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M_WAREHOUSE_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.M_WAREHOUSE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M_WAREHOUSE_ID\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.M_WAREHOUSE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PRODUCT {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.PRODUCTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRODUCT\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.PRODUCTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WAREHOUSE {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.WAREHOUSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WAREHOUSE\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.WAREHOUSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CURRENTQTY {
                get {
                    try {
                        return ((decimal)(this[this.tabledtInventory.CURRENTQTYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CURRENTQTY\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.CURRENTQTYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UNIT {
                get {
                    try {
                        return ((string)(this[this.tabledtInventory.UNITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UNIT\' in table \'dtInventory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtInventory.UNITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM_WAREHOUSE_IDNull() {
                return this.IsNull(this.tabledtInventory.M_WAREHOUSE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM_WAREHOUSE_IDNull() {
                this[this.tabledtInventory.M_WAREHOUSE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tabledtInventory.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCATEGORYNull() {
                this[this.tabledtInventory.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtInventory.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtInventory.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtInventory.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtInventory.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtInventory.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtInventory.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRODUCTNull() {
                return this.IsNull(this.tabledtInventory.PRODUCTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRODUCTNull() {
                this[this.tabledtInventory.PRODUCTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWAREHOUSENull() {
                return this.IsNull(this.tabledtInventory.WAREHOUSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWAREHOUSENull() {
                this[this.tabledtInventory.WAREHOUSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCURRENTQTYNull() {
                return this.IsNull(this.tabledtInventory.CURRENTQTYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCURRENTQTYNull() {
                this[this.tabledtInventory.CURRENTQTYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUNITNull() {
                return this.IsNull(this.tabledtInventory.UNITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUNITNull() {
                this[this.tabledtInventory.UNITColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtTrxSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtTrxSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRowChangeEvent(dtTrxSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtTrxDetailRowChangeEvent : global::System.EventArgs {
            
            private dtTrxDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRowChangeEvent(dtTrxDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtTrxDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCountSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtCountSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRowChangeEvent(dtCountSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCountDetailRowChangeEvent : global::System.EventArgs {
            
            private dtCountDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRowChangeEvent(dtCountDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtUsageSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtUsageSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRowChangeEvent(dtUsageSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtUsageDetailRowChangeEvent : global::System.EventArgs {
            
            private dtUsageDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRowChangeEvent(dtUsageDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMoveSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtMoveSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRowChangeEvent(dtMoveSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMoveDetailRowChangeEvent : global::System.EventArgs {
            
            private dtMoveDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRowChangeEvent(dtMoveDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMoveDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMaterialTransactionRowChangeEvent : global::System.EventArgs {
            
            private dtMaterialTransactionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRowChangeEvent(dtMaterialTransactionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMaterialTransactionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtInventoryRowChangeEvent : global::System.EventArgs {
            
            private dtInventoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryRowChangeEvent(dtInventoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtInventoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591