//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SRP {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dtsPOSDocumentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dtsPOSDocumentData : global::System.Data.DataSet {
        
        private dtRefundSummaryDataTable tabledtRefundSummary;
        
        private dtDispatchDetailDataTable tabledtDispatchDetail;
        
        private dtDispatchSummaryDataTable tabledtDispatchSummary;
        
        private dtSaleDepartmentInfoDataTable tabledtSaleDepartmentInfo;
        
        private dtAttachmentSummaryDataTable tabledtAttachmentSummary;
        
        private dtSalesDetailDataTable tabledtSalesDetail;
        
        private dtMovementDetailDataTable tabledtMovementDetail;
        
        private dtMovementSummaryDataTable tabledtMovementSummary;
        
        private dtCountDetailDataTable tabledtCountDetail;
        
        private dtCountSummaryDataTable tabledtCountSummary;
        
        private dtUsageDetailDataTable tabledtUsageDetail;
        
        private dtUsageSummaryDataTable tabledtUsageSummary;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dtsPOSDocumentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dtsPOSDocumentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtRefundSummary"] != null)) {
                    base.Tables.Add(new dtRefundSummaryDataTable(ds.Tables["dtRefundSummary"]));
                }
                if ((ds.Tables["dtDispatchDetail"] != null)) {
                    base.Tables.Add(new dtDispatchDetailDataTable(ds.Tables["dtDispatchDetail"]));
                }
                if ((ds.Tables["dtDispatchSummary"] != null)) {
                    base.Tables.Add(new dtDispatchSummaryDataTable(ds.Tables["dtDispatchSummary"]));
                }
                if ((ds.Tables["dtSaleDepartmentInfo"] != null)) {
                    base.Tables.Add(new dtSaleDepartmentInfoDataTable(ds.Tables["dtSaleDepartmentInfo"]));
                }
                if ((ds.Tables["dtAttachmentSummary"] != null)) {
                    base.Tables.Add(new dtAttachmentSummaryDataTable(ds.Tables["dtAttachmentSummary"]));
                }
                if ((ds.Tables["dtSalesDetail"] != null)) {
                    base.Tables.Add(new dtSalesDetailDataTable(ds.Tables["dtSalesDetail"]));
                }
                if ((ds.Tables["dtMovementDetail"] != null)) {
                    base.Tables.Add(new dtMovementDetailDataTable(ds.Tables["dtMovementDetail"]));
                }
                if ((ds.Tables["dtMovementSummary"] != null)) {
                    base.Tables.Add(new dtMovementSummaryDataTable(ds.Tables["dtMovementSummary"]));
                }
                if ((ds.Tables["dtCountDetail"] != null)) {
                    base.Tables.Add(new dtCountDetailDataTable(ds.Tables["dtCountDetail"]));
                }
                if ((ds.Tables["dtCountSummary"] != null)) {
                    base.Tables.Add(new dtCountSummaryDataTable(ds.Tables["dtCountSummary"]));
                }
                if ((ds.Tables["dtUsageDetail"] != null)) {
                    base.Tables.Add(new dtUsageDetailDataTable(ds.Tables["dtUsageDetail"]));
                }
                if ((ds.Tables["dtUsageSummary"] != null)) {
                    base.Tables.Add(new dtUsageSummaryDataTable(ds.Tables["dtUsageSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtRefundSummaryDataTable dtRefundSummary {
            get {
                return this.tabledtRefundSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDispatchDetailDataTable dtDispatchDetail {
            get {
                return this.tabledtDispatchDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDispatchSummaryDataTable dtDispatchSummary {
            get {
                return this.tabledtDispatchSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtSaleDepartmentInfoDataTable dtSaleDepartmentInfo {
            get {
                return this.tabledtSaleDepartmentInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtAttachmentSummaryDataTable dtAttachmentSummary {
            get {
                return this.tabledtAttachmentSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtSalesDetailDataTable dtSalesDetail {
            get {
                return this.tabledtSalesDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMovementDetailDataTable dtMovementDetail {
            get {
                return this.tabledtMovementDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtMovementSummaryDataTable dtMovementSummary {
            get {
                return this.tabledtMovementSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCountDetailDataTable dtCountDetail {
            get {
                return this.tabledtCountDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCountSummaryDataTable dtCountSummary {
            get {
                return this.tabledtCountSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUsageDetailDataTable dtUsageDetail {
            get {
                return this.tabledtUsageDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtUsageSummaryDataTable dtUsageSummary {
            get {
                return this.tabledtUsageSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dtsPOSDocumentData cln = ((dtsPOSDocumentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtRefundSummary"] != null)) {
                    base.Tables.Add(new dtRefundSummaryDataTable(ds.Tables["dtRefundSummary"]));
                }
                if ((ds.Tables["dtDispatchDetail"] != null)) {
                    base.Tables.Add(new dtDispatchDetailDataTable(ds.Tables["dtDispatchDetail"]));
                }
                if ((ds.Tables["dtDispatchSummary"] != null)) {
                    base.Tables.Add(new dtDispatchSummaryDataTable(ds.Tables["dtDispatchSummary"]));
                }
                if ((ds.Tables["dtSaleDepartmentInfo"] != null)) {
                    base.Tables.Add(new dtSaleDepartmentInfoDataTable(ds.Tables["dtSaleDepartmentInfo"]));
                }
                if ((ds.Tables["dtAttachmentSummary"] != null)) {
                    base.Tables.Add(new dtAttachmentSummaryDataTable(ds.Tables["dtAttachmentSummary"]));
                }
                if ((ds.Tables["dtSalesDetail"] != null)) {
                    base.Tables.Add(new dtSalesDetailDataTable(ds.Tables["dtSalesDetail"]));
                }
                if ((ds.Tables["dtMovementDetail"] != null)) {
                    base.Tables.Add(new dtMovementDetailDataTable(ds.Tables["dtMovementDetail"]));
                }
                if ((ds.Tables["dtMovementSummary"] != null)) {
                    base.Tables.Add(new dtMovementSummaryDataTable(ds.Tables["dtMovementSummary"]));
                }
                if ((ds.Tables["dtCountDetail"] != null)) {
                    base.Tables.Add(new dtCountDetailDataTable(ds.Tables["dtCountDetail"]));
                }
                if ((ds.Tables["dtCountSummary"] != null)) {
                    base.Tables.Add(new dtCountSummaryDataTable(ds.Tables["dtCountSummary"]));
                }
                if ((ds.Tables["dtUsageDetail"] != null)) {
                    base.Tables.Add(new dtUsageDetailDataTable(ds.Tables["dtUsageDetail"]));
                }
                if ((ds.Tables["dtUsageSummary"] != null)) {
                    base.Tables.Add(new dtUsageSummaryDataTable(ds.Tables["dtUsageSummary"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtRefundSummary = ((dtRefundSummaryDataTable)(base.Tables["dtRefundSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtRefundSummary != null)) {
                    this.tabledtRefundSummary.InitVars();
                }
            }
            this.tabledtDispatchDetail = ((dtDispatchDetailDataTable)(base.Tables["dtDispatchDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtDispatchDetail != null)) {
                    this.tabledtDispatchDetail.InitVars();
                }
            }
            this.tabledtDispatchSummary = ((dtDispatchSummaryDataTable)(base.Tables["dtDispatchSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtDispatchSummary != null)) {
                    this.tabledtDispatchSummary.InitVars();
                }
            }
            this.tabledtSaleDepartmentInfo = ((dtSaleDepartmentInfoDataTable)(base.Tables["dtSaleDepartmentInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtSaleDepartmentInfo != null)) {
                    this.tabledtSaleDepartmentInfo.InitVars();
                }
            }
            this.tabledtAttachmentSummary = ((dtAttachmentSummaryDataTable)(base.Tables["dtAttachmentSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtAttachmentSummary != null)) {
                    this.tabledtAttachmentSummary.InitVars();
                }
            }
            this.tabledtSalesDetail = ((dtSalesDetailDataTable)(base.Tables["dtSalesDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtSalesDetail != null)) {
                    this.tabledtSalesDetail.InitVars();
                }
            }
            this.tabledtMovementDetail = ((dtMovementDetailDataTable)(base.Tables["dtMovementDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtMovementDetail != null)) {
                    this.tabledtMovementDetail.InitVars();
                }
            }
            this.tabledtMovementSummary = ((dtMovementSummaryDataTable)(base.Tables["dtMovementSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtMovementSummary != null)) {
                    this.tabledtMovementSummary.InitVars();
                }
            }
            this.tabledtCountDetail = ((dtCountDetailDataTable)(base.Tables["dtCountDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtCountDetail != null)) {
                    this.tabledtCountDetail.InitVars();
                }
            }
            this.tabledtCountSummary = ((dtCountSummaryDataTable)(base.Tables["dtCountSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtCountSummary != null)) {
                    this.tabledtCountSummary.InitVars();
                }
            }
            this.tabledtUsageDetail = ((dtUsageDetailDataTable)(base.Tables["dtUsageDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtUsageDetail != null)) {
                    this.tabledtUsageDetail.InitVars();
                }
            }
            this.tabledtUsageSummary = ((dtUsageSummaryDataTable)(base.Tables["dtUsageSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtUsageSummary != null)) {
                    this.tabledtUsageSummary.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dtsPOSDocumentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dtsPOSDocumentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtRefundSummary = new dtRefundSummaryDataTable();
            base.Tables.Add(this.tabledtRefundSummary);
            this.tabledtDispatchDetail = new dtDispatchDetailDataTable();
            base.Tables.Add(this.tabledtDispatchDetail);
            this.tabledtDispatchSummary = new dtDispatchSummaryDataTable();
            base.Tables.Add(this.tabledtDispatchSummary);
            this.tabledtSaleDepartmentInfo = new dtSaleDepartmentInfoDataTable();
            base.Tables.Add(this.tabledtSaleDepartmentInfo);
            this.tabledtAttachmentSummary = new dtAttachmentSummaryDataTable();
            base.Tables.Add(this.tabledtAttachmentSummary);
            this.tabledtSalesDetail = new dtSalesDetailDataTable();
            base.Tables.Add(this.tabledtSalesDetail);
            this.tabledtMovementDetail = new dtMovementDetailDataTable();
            base.Tables.Add(this.tabledtMovementDetail);
            this.tabledtMovementSummary = new dtMovementSummaryDataTable();
            base.Tables.Add(this.tabledtMovementSummary);
            this.tabledtCountDetail = new dtCountDetailDataTable();
            base.Tables.Add(this.tabledtCountDetail);
            this.tabledtCountSummary = new dtCountSummaryDataTable();
            base.Tables.Add(this.tabledtCountSummary);
            this.tabledtUsageDetail = new dtUsageDetailDataTable();
            base.Tables.Add(this.tabledtUsageDetail);
            this.tabledtUsageSummary = new dtUsageSummaryDataTable();
            base.Tables.Add(this.tabledtUsageSummary);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtRefundSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDispatchDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDispatchSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtSaleDepartmentInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtAttachmentSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtSalesDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMovementDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtMovementSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCountDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCountSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtUsageDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtUsageSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dtsPOSDocumentData ds = new dtsPOSDocumentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtRefundSummaryRowChangeEventHandler(object sender, dtRefundSummaryRowChangeEvent e);
        
        public delegate void dtDispatchDetailRowChangeEventHandler(object sender, dtDispatchDetailRowChangeEvent e);
        
        public delegate void dtDispatchSummaryRowChangeEventHandler(object sender, dtDispatchSummaryRowChangeEvent e);
        
        public delegate void dtSaleDepartmentInfoRowChangeEventHandler(object sender, dtSaleDepartmentInfoRowChangeEvent e);
        
        public delegate void dtAttachmentSummaryRowChangeEventHandler(object sender, dtAttachmentSummaryRowChangeEvent e);
        
        public delegate void dtSalesDetailRowChangeEventHandler(object sender, dtSalesDetailRowChangeEvent e);
        
        public delegate void dtMovementDetailRowChangeEventHandler(object sender, dtMovementDetailRowChangeEvent e);
        
        public delegate void dtMovementSummaryRowChangeEventHandler(object sender, dtMovementSummaryRowChangeEvent e);
        
        public delegate void dtCountDetailRowChangeEventHandler(object sender, dtCountDetailRowChangeEvent e);
        
        public delegate void dtCountSummaryRowChangeEventHandler(object sender, dtCountSummaryRowChangeEvent e);
        
        public delegate void dtUsageDetailRowChangeEventHandler(object sender, dtUsageDetailRowChangeEvent e);
        
        public delegate void dtUsageSummaryRowChangeEventHandler(object sender, dtUsageSummaryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtRefundSummaryDataTable : global::System.Data.TypedTableBase<dtRefundSummaryRow> {
            
            private global::System.Data.DataColumn columnsalesId;
            
            private global::System.Data.DataColumn columnrefundId;
            
            private global::System.Data.DataColumn columnrefundStation;
            
            private global::System.Data.DataColumn columnrefundNode;
            
            private global::System.Data.DataColumn columnrefundNumber;
            
            private global::System.Data.DataColumn columnrefundDateAndTime;
            
            private global::System.Data.DataColumn columnrefundReason;
            
            private global::System.Data.DataColumn columnrefundBy;
            
            private global::System.Data.DataColumn columnnumberOfRePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryDataTable() {
                this.TableName = "dtRefundSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtRefundSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtRefundSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesIdColumn {
                get {
                    return this.columnsalesId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundIdColumn {
                get {
                    return this.columnrefundId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundStationColumn {
                get {
                    return this.columnrefundStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundNodeColumn {
                get {
                    return this.columnrefundNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundNumberColumn {
                get {
                    return this.columnrefundNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundDateAndTimeColumn {
                get {
                    return this.columnrefundDateAndTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundReasonColumn {
                get {
                    return this.columnrefundReason;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn refundByColumn {
                get {
                    return this.columnrefundBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberOfRePrintColumn {
                get {
                    return this.columnnumberOfRePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryRow this[int index] {
                get {
                    return ((dtRefundSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtRefundSummaryRowChangeEventHandler dtRefundSummaryRowChanging;
            
            public event dtRefundSummaryRowChangeEventHandler dtRefundSummaryRowChanged;
            
            public event dtRefundSummaryRowChangeEventHandler dtRefundSummaryRowDeleting;
            
            public event dtRefundSummaryRowChangeEventHandler dtRefundSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtRefundSummaryRow(dtRefundSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryRow AdddtRefundSummaryRow(string salesId, string refundId, string refundStation, string refundNode, string refundNumber, string refundDateAndTime, string refundReason, string refundBy, string numberOfRePrint) {
                dtRefundSummaryRow rowdtRefundSummaryRow = ((dtRefundSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        salesId,
                        refundId,
                        refundStation,
                        refundNode,
                        refundNumber,
                        refundDateAndTime,
                        refundReason,
                        refundBy,
                        numberOfRePrint};
                rowdtRefundSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtRefundSummaryRow);
                return rowdtRefundSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtRefundSummaryDataTable cln = ((dtRefundSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtRefundSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsalesId = base.Columns["salesId"];
                this.columnrefundId = base.Columns["refundId"];
                this.columnrefundStation = base.Columns["refundStation"];
                this.columnrefundNode = base.Columns["refundNode"];
                this.columnrefundNumber = base.Columns["refundNumber"];
                this.columnrefundDateAndTime = base.Columns["refundDateAndTime"];
                this.columnrefundReason = base.Columns["refundReason"];
                this.columnrefundBy = base.Columns["refundBy"];
                this.columnnumberOfRePrint = base.Columns["numberOfRePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsalesId = new global::System.Data.DataColumn("salesId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesId);
                this.columnrefundId = new global::System.Data.DataColumn("refundId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundId);
                this.columnrefundStation = new global::System.Data.DataColumn("refundStation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundStation);
                this.columnrefundNode = new global::System.Data.DataColumn("refundNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundNode);
                this.columnrefundNumber = new global::System.Data.DataColumn("refundNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundNumber);
                this.columnrefundDateAndTime = new global::System.Data.DataColumn("refundDateAndTime", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundDateAndTime);
                this.columnrefundReason = new global::System.Data.DataColumn("refundReason", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundReason);
                this.columnrefundBy = new global::System.Data.DataColumn("refundBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrefundBy);
                this.columnnumberOfRePrint = new global::System.Data.DataColumn("numberOfRePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumberOfRePrint);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryRow NewdtRefundSummaryRow() {
                return ((dtRefundSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtRefundSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtRefundSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtRefundSummaryRowChanged != null)) {
                    this.dtRefundSummaryRowChanged(this, new dtRefundSummaryRowChangeEvent(((dtRefundSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtRefundSummaryRowChanging != null)) {
                    this.dtRefundSummaryRowChanging(this, new dtRefundSummaryRowChangeEvent(((dtRefundSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtRefundSummaryRowDeleted != null)) {
                    this.dtRefundSummaryRowDeleted(this, new dtRefundSummaryRowChangeEvent(((dtRefundSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtRefundSummaryRowDeleting != null)) {
                    this.dtRefundSummaryRowDeleting(this, new dtRefundSummaryRowChangeEvent(((dtRefundSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtRefundSummaryRow(dtRefundSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtRefundSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDispatchDetailDataTable : global::System.Data.TypedTableBase<dtDispatchDetailRow> {
            
            private global::System.Data.DataColumn columnsalesDetailId;
            
            private global::System.Data.DataColumn columnsalesDetailStation;
            
            private global::System.Data.DataColumn columnsalesDetailNode;
            
            private global::System.Data.DataColumn columnsalesID;
            
            private global::System.Data.DataColumn columnitem_id;
            
            private global::System.Data.DataColumn columnlocatorFromId;
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnUOM;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnBAR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailDataTable() {
                this.TableName = "dtDispatchDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDispatchDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDispatchDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesDetailIdColumn {
                get {
                    return this.columnsalesDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesDetailStationColumn {
                get {
                    return this.columnsalesDetailStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesDetailNodeColumn {
                get {
                    return this.columnsalesDetailNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn salesIDColumn {
                get {
                    return this.columnsalesID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn item_idColumn {
                get {
                    return this.columnitem_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn locatorFromIdColumn {
                get {
                    return this.columnlocatorFromId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMColumn {
                get {
                    return this.columnUOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailRow this[int index] {
                get {
                    return ((dtDispatchDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtDispatchDetailRowChangeEventHandler dtDispatchDetailRowChanging;
            
            public event dtDispatchDetailRowChangeEventHandler dtDispatchDetailRowChanged;
            
            public event dtDispatchDetailRowChangeEventHandler dtDispatchDetailRowDeleting;
            
            public event dtDispatchDetailRowChangeEventHandler dtDispatchDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDispatchDetailRow(dtDispatchDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailRow AdddtDispatchDetailRow(string salesDetailId, string salesDetailStation, string salesDetailNode, string salesID, string item_id, string locatorFromId, string _Sn_, string Description, string Quantity, string UOM, string Comment, string Remark, string CODE2, string CODE, string BAR) {
                dtDispatchDetailRow rowdtDispatchDetailRow = ((dtDispatchDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        salesDetailId,
                        salesDetailStation,
                        salesDetailNode,
                        salesID,
                        item_id,
                        locatorFromId,
                        _Sn_,
                        Description,
                        Quantity,
                        UOM,
                        Comment,
                        Remark,
                        CODE2,
                        CODE,
                        BAR};
                rowdtDispatchDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDispatchDetailRow);
                return rowdtDispatchDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDispatchDetailDataTable cln = ((dtDispatchDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDispatchDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsalesDetailId = base.Columns["salesDetailId"];
                this.columnsalesDetailStation = base.Columns["salesDetailStation"];
                this.columnsalesDetailNode = base.Columns["salesDetailNode"];
                this.columnsalesID = base.Columns["salesID"];
                this.columnitem_id = base.Columns["item_id"];
                this.columnlocatorFromId = base.Columns["locatorFromId"];
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnUOM = base.Columns["UOM"];
                this.columnComment = base.Columns["Comment"];
                this.columnRemark = base.Columns["Remark"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnCODE = base.Columns["CODE"];
                this.columnBAR = base.Columns["BAR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsalesDetailId = new global::System.Data.DataColumn("salesDetailId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesDetailId);
                this.columnsalesDetailStation = new global::System.Data.DataColumn("salesDetailStation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesDetailStation);
                this.columnsalesDetailNode = new global::System.Data.DataColumn("salesDetailNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesDetailNode);
                this.columnsalesID = new global::System.Data.DataColumn("salesID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsalesID);
                this.columnitem_id = new global::System.Data.DataColumn("item_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem_id);
                this.columnlocatorFromId = new global::System.Data.DataColumn("locatorFromId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocatorFromId);
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnUOM = new global::System.Data.DataColumn("UOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOM);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailRow NewdtDispatchDetailRow() {
                return ((dtDispatchDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDispatchDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDispatchDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDispatchDetailRowChanged != null)) {
                    this.dtDispatchDetailRowChanged(this, new dtDispatchDetailRowChangeEvent(((dtDispatchDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDispatchDetailRowChanging != null)) {
                    this.dtDispatchDetailRowChanging(this, new dtDispatchDetailRowChangeEvent(((dtDispatchDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDispatchDetailRowDeleted != null)) {
                    this.dtDispatchDetailRowDeleted(this, new dtDispatchDetailRowChangeEvent(((dtDispatchDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDispatchDetailRowDeleting != null)) {
                    this.dtDispatchDetailRowDeleting(this, new dtDispatchDetailRowChangeEvent(((dtDispatchDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDispatchDetailRow(dtDispatchDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDispatchDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDispatchSummaryDataTable : global::System.Data.TypedTableBase<dtDispatchSummaryRow> {
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnDeliveryOrderNumber;
            
            private global::System.Data.DataColumn columnDispatchFrom;
            
            private global::System.Data.DataColumn columnnumberOfRePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryDataTable() {
                this.TableName = "dtDispatchSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDispatchSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDispatchSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryOrderNumberColumn {
                get {
                    return this.columnDeliveryOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DispatchFromColumn {
                get {
                    return this.columnDispatchFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberOfRePrintColumn {
                get {
                    return this.columnnumberOfRePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryRow this[int index] {
                get {
                    return ((dtDispatchSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtDispatchSummaryRowChangeEventHandler dtDispatchSummaryRowChanging;
            
            public event dtDispatchSummaryRowChangeEventHandler dtDispatchSummaryRowChanged;
            
            public event dtDispatchSummaryRowChangeEventHandler dtDispatchSummaryRowDeleting;
            
            public event dtDispatchSummaryRowChangeEventHandler dtDispatchSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDispatchSummaryRow(dtDispatchSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryRow AdddtDispatchSummaryRow(string DocumentName, string DeliveryOrderNumber, string DispatchFrom, string numberOfRePrint) {
                dtDispatchSummaryRow rowdtDispatchSummaryRow = ((dtDispatchSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DocumentName,
                        DeliveryOrderNumber,
                        DispatchFrom,
                        numberOfRePrint};
                rowdtDispatchSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDispatchSummaryRow);
                return rowdtDispatchSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDispatchSummaryDataTable cln = ((dtDispatchSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDispatchSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnDeliveryOrderNumber = base.Columns["DeliveryOrderNumber"];
                this.columnDispatchFrom = base.Columns["DispatchFrom"];
                this.columnnumberOfRePrint = base.Columns["numberOfRePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnDeliveryOrderNumber = new global::System.Data.DataColumn("DeliveryOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryOrderNumber);
                this.columnDispatchFrom = new global::System.Data.DataColumn("DispatchFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDispatchFrom);
                this.columnnumberOfRePrint = new global::System.Data.DataColumn("numberOfRePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumberOfRePrint);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryRow NewdtDispatchSummaryRow() {
                return ((dtDispatchSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDispatchSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDispatchSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDispatchSummaryRowChanged != null)) {
                    this.dtDispatchSummaryRowChanged(this, new dtDispatchSummaryRowChangeEvent(((dtDispatchSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDispatchSummaryRowChanging != null)) {
                    this.dtDispatchSummaryRowChanging(this, new dtDispatchSummaryRowChangeEvent(((dtDispatchSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDispatchSummaryRowDeleted != null)) {
                    this.dtDispatchSummaryRowDeleted(this, new dtDispatchSummaryRowChangeEvent(((dtDispatchSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDispatchSummaryRowDeleting != null)) {
                    this.dtDispatchSummaryRowDeleting(this, new dtDispatchSummaryRowChangeEvent(((dtDispatchSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDispatchSummaryRow(dtDispatchSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDispatchSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtSaleDepartmentInfoDataTable : global::System.Data.TypedTableBase<dtSaleDepartmentInfoRow> {
            
            private global::System.Data.DataColumn columnSubCity;
            
            private global::System.Data.DataColumn columnkebele;
            
            private global::System.Data.DataColumn columnHouseNumber;
            
            private global::System.Data.DataColumn columnVATRegistrationNumber;
            
            private global::System.Data.DataColumn columnTINNumber;
            
            private global::System.Data.DataColumn columnDateRegistered;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoDataTable() {
                this.TableName = "dtSaleDepartmentInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSaleDepartmentInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtSaleDepartmentInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubCityColumn {
                get {
                    return this.columnSubCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn kebeleColumn {
                get {
                    return this.columnkebele;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HouseNumberColumn {
                get {
                    return this.columnHouseNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VATRegistrationNumberColumn {
                get {
                    return this.columnVATRegistrationNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TINNumberColumn {
                get {
                    return this.columnTINNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateRegisteredColumn {
                get {
                    return this.columnDateRegistered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoRow this[int index] {
                get {
                    return ((dtSaleDepartmentInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtSaleDepartmentInfoRowChangeEventHandler dtSaleDepartmentInfoRowChanging;
            
            public event dtSaleDepartmentInfoRowChangeEventHandler dtSaleDepartmentInfoRowChanged;
            
            public event dtSaleDepartmentInfoRowChangeEventHandler dtSaleDepartmentInfoRowDeleting;
            
            public event dtSaleDepartmentInfoRowChangeEventHandler dtSaleDepartmentInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtSaleDepartmentInfoRow(dtSaleDepartmentInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoRow AdddtSaleDepartmentInfoRow(string SubCity, string kebele, string HouseNumber, string VATRegistrationNumber, string TINNumber, string DateRegistered) {
                dtSaleDepartmentInfoRow rowdtSaleDepartmentInfoRow = ((dtSaleDepartmentInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SubCity,
                        kebele,
                        HouseNumber,
                        VATRegistrationNumber,
                        TINNumber,
                        DateRegistered};
                rowdtSaleDepartmentInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtSaleDepartmentInfoRow);
                return rowdtSaleDepartmentInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtSaleDepartmentInfoDataTable cln = ((dtSaleDepartmentInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtSaleDepartmentInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSubCity = base.Columns["SubCity"];
                this.columnkebele = base.Columns["kebele"];
                this.columnHouseNumber = base.Columns["HouseNumber"];
                this.columnVATRegistrationNumber = base.Columns["VATRegistrationNumber"];
                this.columnTINNumber = base.Columns["TINNumber"];
                this.columnDateRegistered = base.Columns["DateRegistered"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSubCity = new global::System.Data.DataColumn("SubCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubCity);
                this.columnkebele = new global::System.Data.DataColumn("kebele", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkebele);
                this.columnHouseNumber = new global::System.Data.DataColumn("HouseNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHouseNumber);
                this.columnVATRegistrationNumber = new global::System.Data.DataColumn("VATRegistrationNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVATRegistrationNumber);
                this.columnTINNumber = new global::System.Data.DataColumn("TINNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTINNumber);
                this.columnDateRegistered = new global::System.Data.DataColumn("DateRegistered", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateRegistered);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoRow NewdtSaleDepartmentInfoRow() {
                return ((dtSaleDepartmentInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtSaleDepartmentInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtSaleDepartmentInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtSaleDepartmentInfoRowChanged != null)) {
                    this.dtSaleDepartmentInfoRowChanged(this, new dtSaleDepartmentInfoRowChangeEvent(((dtSaleDepartmentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtSaleDepartmentInfoRowChanging != null)) {
                    this.dtSaleDepartmentInfoRowChanging(this, new dtSaleDepartmentInfoRowChangeEvent(((dtSaleDepartmentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtSaleDepartmentInfoRowDeleted != null)) {
                    this.dtSaleDepartmentInfoRowDeleted(this, new dtSaleDepartmentInfoRowChangeEvent(((dtSaleDepartmentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtSaleDepartmentInfoRowDeleting != null)) {
                    this.dtSaleDepartmentInfoRowDeleting(this, new dtSaleDepartmentInfoRowChangeEvent(((dtSaleDepartmentInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtSaleDepartmentInfoRow(dtSaleDepartmentInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtSaleDepartmentInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtAttachmentSummaryDataTable : global::System.Data.TypedTableBase<dtAttachmentSummaryRow> {
            
            private global::System.Data.DataColumn columntransactionID;
            
            private global::System.Data.DataColumn columnstationID;
            
            private global::System.Data.DataColumn columnnodeID;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columntransactionPerson;
            
            private global::System.Data.DataColumn columnDepartmentStore;
            
            private global::System.Data.DataColumn columnDeliveryOrderNumber;
            
            private global::System.Data.DataColumn columnFSNumber;
            
            private global::System.Data.DataColumn columnReferenceNumber;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnBuyersTradeName;
            
            private global::System.Data.DataColumn columnBuyersTIN;
            
            private global::System.Data.DataColumn columnBuyersVAT;
            
            private global::System.Data.DataColumn columnBuyersZoneORSubCity;
            
            private global::System.Data.DataColumn columnBuyersKebele;
            
            private global::System.Data.DataColumn columnBuyersHouseNumber;
            
            private global::System.Data.DataColumn columnBuyersPhoneNumber;
            
            private global::System.Data.DataColumn columntransactionTotal;
            
            private global::System.Data.DataColumn columntransactionVAT;
            
            private global::System.Data.DataColumn columntransactionGrandTotal;
            
            private global::System.Data.DataColumn columntransactionWithHolding;
            
            private global::System.Data.DataColumn columntransactionNetPay;
            
            private global::System.Data.DataColumn columntransactionAmountInWord;
            
            private global::System.Data.DataColumn columntransactionPaymentMethod;
            
            private global::System.Data.DataColumn columnMRC;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnnumberOfRePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryDataTable() {
                this.TableName = "dtAttachmentSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAttachmentSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtAttachmentSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionIDColumn {
                get {
                    return this.columntransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn stationIDColumn {
                get {
                    return this.columnstationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nodeIDColumn {
                get {
                    return this.columnnodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionPersonColumn {
                get {
                    return this.columntransactionPerson;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentStoreColumn {
                get {
                    return this.columnDepartmentStore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryOrderNumberColumn {
                get {
                    return this.columnDeliveryOrderNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FSNumberColumn {
                get {
                    return this.columnFSNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReferenceNumberColumn {
                get {
                    return this.columnReferenceNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersTradeNameColumn {
                get {
                    return this.columnBuyersTradeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersTINColumn {
                get {
                    return this.columnBuyersTIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersVATColumn {
                get {
                    return this.columnBuyersVAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersZoneORSubCityColumn {
                get {
                    return this.columnBuyersZoneORSubCity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersKebeleColumn {
                get {
                    return this.columnBuyersKebele;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersHouseNumberColumn {
                get {
                    return this.columnBuyersHouseNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BuyersPhoneNumberColumn {
                get {
                    return this.columnBuyersPhoneNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionTotalColumn {
                get {
                    return this.columntransactionTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionVATColumn {
                get {
                    return this.columntransactionVAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionGrandTotalColumn {
                get {
                    return this.columntransactionGrandTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionWithHoldingColumn {
                get {
                    return this.columntransactionWithHolding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionNetPayColumn {
                get {
                    return this.columntransactionNetPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionAmountInWordColumn {
                get {
                    return this.columntransactionAmountInWord;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionPaymentMethodColumn {
                get {
                    return this.columntransactionPaymentMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MRCColumn {
                get {
                    return this.columnMRC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn numberOfRePrintColumn {
                get {
                    return this.columnnumberOfRePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRow this[int index] {
                get {
                    return ((dtAttachmentSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtAttachmentSummaryRowChangeEventHandler dtAttachmentSummaryRowChanging;
            
            public event dtAttachmentSummaryRowChangeEventHandler dtAttachmentSummaryRowChanged;
            
            public event dtAttachmentSummaryRowChangeEventHandler dtAttachmentSummaryRowDeleting;
            
            public event dtAttachmentSummaryRowChangeEventHandler dtAttachmentSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtAttachmentSummaryRow(dtAttachmentSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRow AdddtAttachmentSummaryRow(
                        string transactionID, 
                        string stationID, 
                        string nodeID, 
                        string DocumentName, 
                        string transactionPerson, 
                        string DepartmentStore, 
                        string DeliveryOrderNumber, 
                        string FSNumber, 
                        string ReferenceNumber, 
                        System.DateTime Date, 
                        System.DateTime Time, 
                        string BuyersTradeName, 
                        string BuyersTIN, 
                        string BuyersVAT, 
                        string BuyersZoneORSubCity, 
                        string BuyersKebele, 
                        string BuyersHouseNumber, 
                        string BuyersPhoneNumber, 
                        decimal transactionTotal, 
                        decimal transactionVAT, 
                        decimal transactionGrandTotal, 
                        decimal transactionWithHolding, 
                        decimal transactionNetPay, 
                        string transactionAmountInWord, 
                        string transactionPaymentMethod, 
                        string MRC, 
                        string Note, 
                        string numberOfRePrint) {
                dtAttachmentSummaryRow rowdtAttachmentSummaryRow = ((dtAttachmentSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        transactionID,
                        stationID,
                        nodeID,
                        DocumentName,
                        transactionPerson,
                        DepartmentStore,
                        DeliveryOrderNumber,
                        FSNumber,
                        ReferenceNumber,
                        Date,
                        Time,
                        BuyersTradeName,
                        BuyersTIN,
                        BuyersVAT,
                        BuyersZoneORSubCity,
                        BuyersKebele,
                        BuyersHouseNumber,
                        BuyersPhoneNumber,
                        transactionTotal,
                        transactionVAT,
                        transactionGrandTotal,
                        transactionWithHolding,
                        transactionNetPay,
                        transactionAmountInWord,
                        transactionPaymentMethod,
                        MRC,
                        Note,
                        numberOfRePrint};
                rowdtAttachmentSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtAttachmentSummaryRow);
                return rowdtAttachmentSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRow FindBytransactionIDstationID(string transactionID, string stationID) {
                return ((dtAttachmentSummaryRow)(this.Rows.Find(new object[] {
                            transactionID,
                            stationID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtAttachmentSummaryDataTable cln = ((dtAttachmentSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtAttachmentSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntransactionID = base.Columns["transactionID"];
                this.columnstationID = base.Columns["stationID"];
                this.columnnodeID = base.Columns["nodeID"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columntransactionPerson = base.Columns["transactionPerson"];
                this.columnDepartmentStore = base.Columns["DepartmentStore"];
                this.columnDeliveryOrderNumber = base.Columns["DeliveryOrderNumber"];
                this.columnFSNumber = base.Columns["FSNumber"];
                this.columnReferenceNumber = base.Columns["ReferenceNumber"];
                this.columnDate = base.Columns["Date"];
                this.columnTime = base.Columns["Time"];
                this.columnBuyersTradeName = base.Columns["BuyersTradeName"];
                this.columnBuyersTIN = base.Columns["BuyersTIN"];
                this.columnBuyersVAT = base.Columns["BuyersVAT"];
                this.columnBuyersZoneORSubCity = base.Columns["BuyersZoneORSubCity"];
                this.columnBuyersKebele = base.Columns["BuyersKebele"];
                this.columnBuyersHouseNumber = base.Columns["BuyersHouseNumber"];
                this.columnBuyersPhoneNumber = base.Columns["BuyersPhoneNumber"];
                this.columntransactionTotal = base.Columns["transactionTotal"];
                this.columntransactionVAT = base.Columns["transactionVAT"];
                this.columntransactionGrandTotal = base.Columns["transactionGrandTotal"];
                this.columntransactionWithHolding = base.Columns["transactionWithHolding"];
                this.columntransactionNetPay = base.Columns["transactionNetPay"];
                this.columntransactionAmountInWord = base.Columns["transactionAmountInWord"];
                this.columntransactionPaymentMethod = base.Columns["transactionPaymentMethod"];
                this.columnMRC = base.Columns["MRC"];
                this.columnNote = base.Columns["Note"];
                this.columnnumberOfRePrint = base.Columns["numberOfRePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntransactionID = new global::System.Data.DataColumn("transactionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionID);
                this.columnstationID = new global::System.Data.DataColumn("stationID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstationID);
                this.columnnodeID = new global::System.Data.DataColumn("nodeID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnodeID);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columntransactionPerson = new global::System.Data.DataColumn("transactionPerson", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionPerson);
                this.columnDepartmentStore = new global::System.Data.DataColumn("DepartmentStore", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentStore);
                this.columnDeliveryOrderNumber = new global::System.Data.DataColumn("DeliveryOrderNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryOrderNumber);
                this.columnFSNumber = new global::System.Data.DataColumn("FSNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFSNumber);
                this.columnReferenceNumber = new global::System.Data.DataColumn("ReferenceNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReferenceNumber);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnBuyersTradeName = new global::System.Data.DataColumn("BuyersTradeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersTradeName);
                this.columnBuyersTIN = new global::System.Data.DataColumn("BuyersTIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersTIN);
                this.columnBuyersVAT = new global::System.Data.DataColumn("BuyersVAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersVAT);
                this.columnBuyersZoneORSubCity = new global::System.Data.DataColumn("BuyersZoneORSubCity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersZoneORSubCity);
                this.columnBuyersKebele = new global::System.Data.DataColumn("BuyersKebele", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersKebele);
                this.columnBuyersHouseNumber = new global::System.Data.DataColumn("BuyersHouseNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersHouseNumber);
                this.columnBuyersPhoneNumber = new global::System.Data.DataColumn("BuyersPhoneNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuyersPhoneNumber);
                this.columntransactionTotal = new global::System.Data.DataColumn("transactionTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionTotal);
                this.columntransactionVAT = new global::System.Data.DataColumn("transactionVAT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionVAT);
                this.columntransactionGrandTotal = new global::System.Data.DataColumn("transactionGrandTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionGrandTotal);
                this.columntransactionWithHolding = new global::System.Data.DataColumn("transactionWithHolding", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionWithHolding);
                this.columntransactionNetPay = new global::System.Data.DataColumn("transactionNetPay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionNetPay);
                this.columntransactionAmountInWord = new global::System.Data.DataColumn("transactionAmountInWord", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionAmountInWord);
                this.columntransactionPaymentMethod = new global::System.Data.DataColumn("transactionPaymentMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionPaymentMethod);
                this.columnMRC = new global::System.Data.DataColumn("MRC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMRC);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnnumberOfRePrint = new global::System.Data.DataColumn("numberOfRePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnumberOfRePrint);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("pkdtAtt", new global::System.Data.DataColumn[] {
                                this.columntransactionID,
                                this.columnstationID}, true));
                this.columntransactionID.AllowDBNull = false;
                this.columnstationID.AllowDBNull = false;
                this.columntransactionPerson.Caption = "Sales Person";
                this.columnDepartmentStore.Caption = "Dept. Store.";
                this.columnDeliveryOrderNumber.Caption = "Delivery Order No.";
                this.columnFSNumber.Caption = "FS No.";
                this.columnReferenceNumber.AllowDBNull = false;
                this.columnReferenceNumber.Caption = "Ref. No.";
                this.columnBuyersTradeName.Caption = "Buyer\'s/TradeName";
                this.columnBuyersTIN.Caption = "Buyer\'s TIN";
                this.columnBuyersVAT.Caption = "Buyer\'s VAT";
                this.columnBuyersZoneORSubCity.Caption = "Zone/S.City";
                this.columnBuyersKebele.Caption = "Kebele";
                this.columnBuyersHouseNumber.Caption = "House No.";
                this.columnBuyersPhoneNumber.Caption = "Phone No.";
                this.columntransactionTotal.Caption = "Sub Total";
                this.columntransactionVAT.Caption = "VAT (15%)";
                this.columntransactionGrandTotal.Caption = "Grand Total";
                this.columntransactionWithHolding.Caption = "Withholding Tax (2%)";
                this.columntransactionNetPay.Caption = "Net Paid";
                this.columntransactionAmountInWord.Caption = "Birr";
                this.columntransactionPaymentMethod.Caption = "Payed By";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRow NewdtAttachmentSummaryRow() {
                return ((dtAttachmentSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtAttachmentSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtAttachmentSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtAttachmentSummaryRowChanged != null)) {
                    this.dtAttachmentSummaryRowChanged(this, new dtAttachmentSummaryRowChangeEvent(((dtAttachmentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtAttachmentSummaryRowChanging != null)) {
                    this.dtAttachmentSummaryRowChanging(this, new dtAttachmentSummaryRowChangeEvent(((dtAttachmentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtAttachmentSummaryRowDeleted != null)) {
                    this.dtAttachmentSummaryRowDeleted(this, new dtAttachmentSummaryRowChangeEvent(((dtAttachmentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtAttachmentSummaryRowDeleting != null)) {
                    this.dtAttachmentSummaryRowDeleting(this, new dtAttachmentSummaryRowChangeEvent(((dtAttachmentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtAttachmentSummaryRow(dtAttachmentSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtAttachmentSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtSalesDetailDataTable : global::System.Data.TypedTableBase<dtSalesDetailRow> {
            
            private global::System.Data.DataColumn columntransactionDetailId;
            
            private global::System.Data.DataColumn columntransactionDetailStation;
            
            private global::System.Data.DataColumn columntransactionDetailNode;
            
            private global::System.Data.DataColumn columntransactionID;
            
            private global::System.Data.DataColumn columnitem_id;
            
            private global::System.Data.DataColumn columnlocatorFromId;
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnUOM;
            
            private global::System.Data.DataColumn columnUnitPrice;
            
            private global::System.Data.DataColumn columnTotalAmount;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnBAR;
            
            private global::System.Data.DataColumn columnCODE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailDataTable() {
                this.TableName = "dtSalesDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSalesDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtSalesDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionDetailIdColumn {
                get {
                    return this.columntransactionDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionDetailStationColumn {
                get {
                    return this.columntransactionDetailStation;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionDetailNodeColumn {
                get {
                    return this.columntransactionDetailNode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactionIDColumn {
                get {
                    return this.columntransactionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn item_idColumn {
                get {
                    return this.columnitem_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn locatorFromIdColumn {
                get {
                    return this.columnlocatorFromId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UOMColumn {
                get {
                    return this.columnUOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitPriceColumn {
                get {
                    return this.columnUnitPrice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAmountColumn {
                get {
                    return this.columnTotalAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRow this[int index] {
                get {
                    return ((dtSalesDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtSalesDetailRowChangeEventHandler dtSalesDetailRowChanging;
            
            public event dtSalesDetailRowChangeEventHandler dtSalesDetailRowChanged;
            
            public event dtSalesDetailRowChangeEventHandler dtSalesDetailRowDeleting;
            
            public event dtSalesDetailRowChangeEventHandler dtSalesDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtSalesDetailRow(dtSalesDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRow AdddtSalesDetailRow(
                        string transactionDetailId, 
                        string transactionDetailStation, 
                        string transactionDetailNode, 
                        string transactionID, 
                        string item_id, 
                        string locatorFromId, 
                        string _Sn_, 
                        string Description, 
                        string Quantity, 
                        string UOM, 
                        decimal UnitPrice, 
                        decimal TotalAmount, 
                        string Comment, 
                        string CODE2, 
                        string BAR, 
                        string CODE) {
                dtSalesDetailRow rowdtSalesDetailRow = ((dtSalesDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        transactionDetailId,
                        transactionDetailStation,
                        transactionDetailNode,
                        transactionID,
                        item_id,
                        locatorFromId,
                        _Sn_,
                        Description,
                        Quantity,
                        UOM,
                        UnitPrice,
                        TotalAmount,
                        Comment,
                        CODE2,
                        BAR,
                        CODE};
                rowdtSalesDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtSalesDetailRow);
                return rowdtSalesDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRow FindBytransactionDetailIdtransactionDetailStation(string transactionDetailId, string transactionDetailStation) {
                return ((dtSalesDetailRow)(this.Rows.Find(new object[] {
                            transactionDetailId,
                            transactionDetailStation})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtSalesDetailDataTable cln = ((dtSalesDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtSalesDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntransactionDetailId = base.Columns["transactionDetailId"];
                this.columntransactionDetailStation = base.Columns["transactionDetailStation"];
                this.columntransactionDetailNode = base.Columns["transactionDetailNode"];
                this.columntransactionID = base.Columns["transactionID"];
                this.columnitem_id = base.Columns["item_id"];
                this.columnlocatorFromId = base.Columns["locatorFromId"];
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnUOM = base.Columns["UOM"];
                this.columnUnitPrice = base.Columns["UnitPrice"];
                this.columnTotalAmount = base.Columns["TotalAmount"];
                this.columnComment = base.Columns["Comment"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnBAR = base.Columns["BAR"];
                this.columnCODE = base.Columns["CODE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntransactionDetailId = new global::System.Data.DataColumn("transactionDetailId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionDetailId);
                this.columntransactionDetailStation = new global::System.Data.DataColumn("transactionDetailStation", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionDetailStation);
                this.columntransactionDetailNode = new global::System.Data.DataColumn("transactionDetailNode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionDetailNode);
                this.columntransactionID = new global::System.Data.DataColumn("transactionID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactionID);
                this.columnitem_id = new global::System.Data.DataColumn("item_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnitem_id);
                this.columnlocatorFromId = new global::System.Data.DataColumn("locatorFromId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocatorFromId);
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnUOM = new global::System.Data.DataColumn("UOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOM);
                this.columnUnitPrice = new global::System.Data.DataColumn("UnitPrice", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitPrice);
                this.columnTotalAmount = new global::System.Data.DataColumn("TotalAmount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalAmount);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntransactionDetailId,
                                this.columntransactionDetailStation}, true));
                this.columntransactionDetailId.AllowDBNull = false;
                this.columntransactionDetailStation.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRow NewdtSalesDetailRow() {
                return ((dtSalesDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtSalesDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtSalesDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtSalesDetailRowChanged != null)) {
                    this.dtSalesDetailRowChanged(this, new dtSalesDetailRowChangeEvent(((dtSalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtSalesDetailRowChanging != null)) {
                    this.dtSalesDetailRowChanging(this, new dtSalesDetailRowChangeEvent(((dtSalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtSalesDetailRowDeleted != null)) {
                    this.dtSalesDetailRowDeleted(this, new dtSalesDetailRowChangeEvent(((dtSalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtSalesDetailRowDeleting != null)) {
                    this.dtSalesDetailRowDeleting(this, new dtSalesDetailRowChangeEvent(((dtSalesDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtSalesDetailRow(dtSalesDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtSalesDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMovementDetailDataTable : global::System.Data.TypedTableBase<dtMovementDetailRow> {
            
            private global::System.Data.DataColumn columnMovementDetailId;
            
            private global::System.Data.DataColumn columnMovementId;
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnBAR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailDataTable() {
                this.TableName = "dtMovementDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMovementDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMovementDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovementDetailIdColumn {
                get {
                    return this.columnMovementDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovementIdColumn {
                get {
                    return this.columnMovementId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRow this[int index] {
                get {
                    return ((dtMovementDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtMovementDetailRowChangeEventHandler dtMovementDetailRowChanging;
            
            public event dtMovementDetailRowChangeEventHandler dtMovementDetailRowChanged;
            
            public event dtMovementDetailRowChangeEventHandler dtMovementDetailRowDeleting;
            
            public event dtMovementDetailRowChangeEventHandler dtMovementDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMovementDetailRow(dtMovementDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRow AdddtMovementDetailRow(int MovementDetailId, int MovementId, string _Sn_, string Description, string Unit, decimal Quantity, string Remark, string comment, string CODE2, string CODE, string BAR) {
                dtMovementDetailRow rowdtMovementDetailRow = ((dtMovementDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MovementDetailId,
                        MovementId,
                        _Sn_,
                        Description,
                        Unit,
                        Quantity,
                        Remark,
                        comment,
                        CODE2,
                        CODE,
                        BAR};
                rowdtMovementDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMovementDetailRow);
                return rowdtMovementDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRow FindByMovementDetailId(int MovementDetailId) {
                return ((dtMovementDetailRow)(this.Rows.Find(new object[] {
                            MovementDetailId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMovementDetailDataTable cln = ((dtMovementDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMovementDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMovementDetailId = base.Columns["MovementDetailId"];
                this.columnMovementId = base.Columns["MovementId"];
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnUnit = base.Columns["Unit"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnRemark = base.Columns["Remark"];
                this.columncomment = base.Columns["comment"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnCODE = base.Columns["CODE"];
                this.columnBAR = base.Columns["BAR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMovementDetailId = new global::System.Data.DataColumn("MovementDetailId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMovementDetailId);
                this.columnMovementId = new global::System.Data.DataColumn("MovementId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMovementId);
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMovementDetailId}, true));
                this.columnMovementDetailId.AllowDBNull = false;
                this.columnMovementDetailId.Unique = true;
                this._columnSn_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRow NewdtMovementDetailRow() {
                return ((dtMovementDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMovementDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMovementDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMovementDetailRowChanged != null)) {
                    this.dtMovementDetailRowChanged(this, new dtMovementDetailRowChangeEvent(((dtMovementDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMovementDetailRowChanging != null)) {
                    this.dtMovementDetailRowChanging(this, new dtMovementDetailRowChangeEvent(((dtMovementDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMovementDetailRowDeleted != null)) {
                    this.dtMovementDetailRowDeleted(this, new dtMovementDetailRowChangeEvent(((dtMovementDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMovementDetailRowDeleting != null)) {
                    this.dtMovementDetailRowDeleting(this, new dtMovementDetailRowChangeEvent(((dtMovementDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMovementDetailRow(dtMovementDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMovementDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtMovementSummaryDataTable : global::System.Data.TypedTableBase<dtMovementSummaryRow> {
            
            private global::System.Data.DataColumn columnMovementId;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnStoreFrom;
            
            private global::System.Data.DataColumn columnStoreTo;
            
            private global::System.Data.DataColumn columnRequestNumber;
            
            private global::System.Data.DataColumn columnDocumentNumber;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnDocumentNote;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnCheckdBy;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnrePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryDataTable() {
                this.TableName = "dtMovementSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMovementSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtMovementSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovementIdColumn {
                get {
                    return this.columnMovementId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreFromColumn {
                get {
                    return this.columnStoreFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreToColumn {
                get {
                    return this.columnStoreTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestNumberColumn {
                get {
                    return this.columnRequestNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNumberColumn {
                get {
                    return this.columnDocumentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNoteColumn {
                get {
                    return this.columnDocumentNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckdByColumn {
                get {
                    return this.columnCheckdBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rePrintColumn {
                get {
                    return this.columnrePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRow this[int index] {
                get {
                    return ((dtMovementSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtMovementSummaryRowChangeEventHandler dtMovementSummaryRowChanging;
            
            public event dtMovementSummaryRowChangeEventHandler dtMovementSummaryRowChanged;
            
            public event dtMovementSummaryRowChangeEventHandler dtMovementSummaryRowDeleting;
            
            public event dtMovementSummaryRowChangeEventHandler dtMovementSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtMovementSummaryRow(dtMovementSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRow AdddtMovementSummaryRow(int MovementId, string DocumentName, string StoreFrom, string StoreTo, string RequestNumber, string DocumentNumber, System.DateTime DocumentDate, string DocumentNote, string PreparedBy, string CheckdBy, string ApprovedBy, string rePrint) {
                dtMovementSummaryRow rowdtMovementSummaryRow = ((dtMovementSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MovementId,
                        DocumentName,
                        StoreFrom,
                        StoreTo,
                        RequestNumber,
                        DocumentNumber,
                        DocumentDate,
                        DocumentNote,
                        PreparedBy,
                        CheckdBy,
                        ApprovedBy,
                        rePrint};
                rowdtMovementSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtMovementSummaryRow);
                return rowdtMovementSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRow FindByMovementId(int MovementId) {
                return ((dtMovementSummaryRow)(this.Rows.Find(new object[] {
                            MovementId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtMovementSummaryDataTable cln = ((dtMovementSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtMovementSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMovementId = base.Columns["MovementId"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnStoreFrom = base.Columns["StoreFrom"];
                this.columnStoreTo = base.Columns["StoreTo"];
                this.columnRequestNumber = base.Columns["RequestNumber"];
                this.columnDocumentNumber = base.Columns["DocumentNumber"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnDocumentNote = base.Columns["DocumentNote"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnCheckdBy = base.Columns["CheckdBy"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnrePrint = base.Columns["rePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMovementId = new global::System.Data.DataColumn("MovementId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMovementId);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnStoreFrom = new global::System.Data.DataColumn("StoreFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreFrom);
                this.columnStoreTo = new global::System.Data.DataColumn("StoreTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreTo);
                this.columnRequestNumber = new global::System.Data.DataColumn("RequestNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestNumber);
                this.columnDocumentNumber = new global::System.Data.DataColumn("DocumentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNumber);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnDocumentNote = new global::System.Data.DataColumn("DocumentNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNote);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnCheckdBy = new global::System.Data.DataColumn("CheckdBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckdBy);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnrePrint = new global::System.Data.DataColumn("rePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrePrint);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMovementId}, true));
                this.columnMovementId.AllowDBNull = false;
                this.columnMovementId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRow NewdtMovementSummaryRow() {
                return ((dtMovementSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtMovementSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtMovementSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtMovementSummaryRowChanged != null)) {
                    this.dtMovementSummaryRowChanged(this, new dtMovementSummaryRowChangeEvent(((dtMovementSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtMovementSummaryRowChanging != null)) {
                    this.dtMovementSummaryRowChanging(this, new dtMovementSummaryRowChangeEvent(((dtMovementSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtMovementSummaryRowDeleted != null)) {
                    this.dtMovementSummaryRowDeleted(this, new dtMovementSummaryRowChangeEvent(((dtMovementSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtMovementSummaryRowDeleting != null)) {
                    this.dtMovementSummaryRowDeleting(this, new dtMovementSummaryRowChangeEvent(((dtMovementSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtMovementSummaryRow(dtMovementSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtMovementSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCountDetailDataTable : global::System.Data.TypedTableBase<dtCountDetailRow> {
            
            private global::System.Data.DataColumn columnCountDetailId;
            
            private global::System.Data.DataColumn columnCountId;
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnBook_Qty;
            
            private global::System.Data.DataColumn columnCount_Qty;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnBAR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailDataTable() {
                this.TableName = "dtCountDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCountDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountDetailIdColumn {
                get {
                    return this.columnCountDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountIdColumn {
                get {
                    return this.columnCountId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Book_QtyColumn {
                get {
                    return this.columnBook_Qty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Count_QtyColumn {
                get {
                    return this.columnCount_Qty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow this[int index] {
                get {
                    return ((dtCountDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowChanging;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowChanged;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowDeleting;
            
            public event dtCountDetailRowChangeEventHandler dtCountDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCountDetailRow(dtCountDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow AdddtCountDetailRow(int CountDetailId, int CountId, string _Sn_, string Description, string Unit, decimal Book_Qty, decimal Count_Qty, string Remark, string comment, string CODE2, string CODE, string BAR) {
                dtCountDetailRow rowdtCountDetailRow = ((dtCountDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CountDetailId,
                        CountId,
                        _Sn_,
                        Description,
                        Unit,
                        Book_Qty,
                        Count_Qty,
                        Remark,
                        comment,
                        CODE2,
                        CODE,
                        BAR};
                rowdtCountDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCountDetailRow);
                return rowdtCountDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow FindByCountDetailId(int CountDetailId) {
                return ((dtCountDetailRow)(this.Rows.Find(new object[] {
                            CountDetailId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCountDetailDataTable cln = ((dtCountDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCountDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountDetailId = base.Columns["CountDetailId"];
                this.columnCountId = base.Columns["CountId"];
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnUnit = base.Columns["Unit"];
                this.columnBook_Qty = base.Columns["Book Qty"];
                this.columnCount_Qty = base.Columns["Count Qty"];
                this.columnRemark = base.Columns["Remark"];
                this.columncomment = base.Columns["comment"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnCODE = base.Columns["CODE"];
                this.columnBAR = base.Columns["BAR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountDetailId = new global::System.Data.DataColumn("CountDetailId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountDetailId);
                this.columnCountId = new global::System.Data.DataColumn("CountId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountId);
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnBook_Qty = new global::System.Data.DataColumn("Book Qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBook_Qty);
                this.columnCount_Qty = new global::System.Data.DataColumn("Count Qty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount_Qty);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCountDetailId}, true));
                this.columnCountDetailId.AllowDBNull = false;
                this.columnCountDetailId.Unique = true;
                this._columnSn_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow NewdtCountDetailRow() {
                return ((dtCountDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCountDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCountDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCountDetailRowChanged != null)) {
                    this.dtCountDetailRowChanged(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCountDetailRowChanging != null)) {
                    this.dtCountDetailRowChanging(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCountDetailRowDeleted != null)) {
                    this.dtCountDetailRowDeleted(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCountDetailRowDeleting != null)) {
                    this.dtCountDetailRowDeleting(this, new dtCountDetailRowChangeEvent(((dtCountDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCountDetailRow(dtCountDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCountDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCountSummaryDataTable : global::System.Data.TypedTableBase<dtCountSummaryRow> {
            
            private global::System.Data.DataColumn columnCountId;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnStore;
            
            private global::System.Data.DataColumn columnDocumentNumber;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnDocumentNote;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnCheckdBy;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnrePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryDataTable() {
                this.TableName = "dtCountSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCountSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountIdColumn {
                get {
                    return this.columnCountId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreColumn {
                get {
                    return this.columnStore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNumberColumn {
                get {
                    return this.columnDocumentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNoteColumn {
                get {
                    return this.columnDocumentNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckdByColumn {
                get {
                    return this.columnCheckdBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rePrintColumn {
                get {
                    return this.columnrePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow this[int index] {
                get {
                    return ((dtCountSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowChanging;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowChanged;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowDeleting;
            
            public event dtCountSummaryRowChangeEventHandler dtCountSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCountSummaryRow(dtCountSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow AdddtCountSummaryRow(int CountId, string DocumentName, string Store, string DocumentNumber, System.DateTime DocumentDate, string DocumentNote, string PreparedBy, string CheckdBy, string ApprovedBy, string rePrint) {
                dtCountSummaryRow rowdtCountSummaryRow = ((dtCountSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CountId,
                        DocumentName,
                        Store,
                        DocumentNumber,
                        DocumentDate,
                        DocumentNote,
                        PreparedBy,
                        CheckdBy,
                        ApprovedBy,
                        rePrint};
                rowdtCountSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCountSummaryRow);
                return rowdtCountSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow FindByCountId(int CountId) {
                return ((dtCountSummaryRow)(this.Rows.Find(new object[] {
                            CountId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCountSummaryDataTable cln = ((dtCountSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCountSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountId = base.Columns["CountId"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnStore = base.Columns["Store"];
                this.columnDocumentNumber = base.Columns["DocumentNumber"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnDocumentNote = base.Columns["DocumentNote"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnCheckdBy = base.Columns["CheckdBy"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnrePrint = base.Columns["rePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountId = new global::System.Data.DataColumn("CountId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountId);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnStore = new global::System.Data.DataColumn("Store", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStore);
                this.columnDocumentNumber = new global::System.Data.DataColumn("DocumentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNumber);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnDocumentNote = new global::System.Data.DataColumn("DocumentNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNote);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnCheckdBy = new global::System.Data.DataColumn("CheckdBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckdBy);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnrePrint = new global::System.Data.DataColumn("rePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrePrint);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCountId}, true));
                this.columnCountId.AllowDBNull = false;
                this.columnCountId.Unique = true;
                this.columnStore.Caption = "StoreFrom";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow NewdtCountSummaryRow() {
                return ((dtCountSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCountSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCountSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCountSummaryRowChanged != null)) {
                    this.dtCountSummaryRowChanged(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCountSummaryRowChanging != null)) {
                    this.dtCountSummaryRowChanging(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCountSummaryRowDeleted != null)) {
                    this.dtCountSummaryRowDeleted(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCountSummaryRowDeleting != null)) {
                    this.dtCountSummaryRowDeleting(this, new dtCountSummaryRowChangeEvent(((dtCountSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCountSummaryRow(dtCountSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCountSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtUsageDetailDataTable : global::System.Data.TypedTableBase<dtUsageDetailRow> {
            
            private global::System.Data.DataColumn columnUsageDetailId;
            
            private global::System.Data.DataColumn columnUsageId;
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columnCODE2;
            
            private global::System.Data.DataColumn columnCODE;
            
            private global::System.Data.DataColumn columnBAR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailDataTable() {
                this.TableName = "dtUsageDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtUsageDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsageDetailIdColumn {
                get {
                    return this.columnUsageDetailId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsageIdColumn {
                get {
                    return this.columnUsageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODE2Column {
                get {
                    return this.columnCODE2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CODEColumn {
                get {
                    return this.columnCODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BARColumn {
                get {
                    return this.columnBAR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow this[int index] {
                get {
                    return ((dtUsageDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowChanging;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowChanged;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowDeleting;
            
            public event dtUsageDetailRowChangeEventHandler dtUsageDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtUsageDetailRow(dtUsageDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow AdddtUsageDetailRow(int UsageDetailId, int UsageId, string _Sn_, string Description, string Unit, decimal Quantity, string Remark, string comment, string CODE2, string CODE, string BAR) {
                dtUsageDetailRow rowdtUsageDetailRow = ((dtUsageDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UsageDetailId,
                        UsageId,
                        _Sn_,
                        Description,
                        Unit,
                        Quantity,
                        Remark,
                        comment,
                        CODE2,
                        CODE,
                        BAR};
                rowdtUsageDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtUsageDetailRow);
                return rowdtUsageDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow FindByUsageDetailId(int UsageDetailId) {
                return ((dtUsageDetailRow)(this.Rows.Find(new object[] {
                            UsageDetailId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtUsageDetailDataTable cln = ((dtUsageDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtUsageDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUsageDetailId = base.Columns["UsageDetailId"];
                this.columnUsageId = base.Columns["UsageId"];
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnUnit = base.Columns["Unit"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnRemark = base.Columns["Remark"];
                this.columncomment = base.Columns["comment"];
                this.columnCODE2 = base.Columns["CODE2"];
                this.columnCODE = base.Columns["CODE"];
                this.columnBAR = base.Columns["BAR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUsageDetailId = new global::System.Data.DataColumn("UsageDetailId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsageDetailId);
                this.columnUsageId = new global::System.Data.DataColumn("UsageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsageId);
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnCODE2 = new global::System.Data.DataColumn("CODE2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE2);
                this.columnCODE = new global::System.Data.DataColumn("CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCODE);
                this.columnBAR = new global::System.Data.DataColumn("BAR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBAR);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUsageDetailId}, true));
                this.columnUsageDetailId.AllowDBNull = false;
                this.columnUsageDetailId.Unique = true;
                this._columnSn_.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow NewdtUsageDetailRow() {
                return ((dtUsageDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtUsageDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtUsageDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtUsageDetailRowChanged != null)) {
                    this.dtUsageDetailRowChanged(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtUsageDetailRowChanging != null)) {
                    this.dtUsageDetailRowChanging(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtUsageDetailRowDeleted != null)) {
                    this.dtUsageDetailRowDeleted(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtUsageDetailRowDeleting != null)) {
                    this.dtUsageDetailRowDeleting(this, new dtUsageDetailRowChangeEvent(((dtUsageDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtUsageDetailRow(dtUsageDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtUsageDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtUsageSummaryDataTable : global::System.Data.TypedTableBase<dtUsageSummaryRow> {
            
            private global::System.Data.DataColumn columnUsageId;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnStoreFrom;
            
            private global::System.Data.DataColumn columnDocumentNumber;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnDocumentNote;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnCheckdBy;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnrePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryDataTable() {
                this.TableName = "dtUsageSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtUsageSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsageIdColumn {
                get {
                    return this.columnUsageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreFromColumn {
                get {
                    return this.columnStoreFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNumberColumn {
                get {
                    return this.columnDocumentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNoteColumn {
                get {
                    return this.columnDocumentNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckdByColumn {
                get {
                    return this.columnCheckdBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rePrintColumn {
                get {
                    return this.columnrePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow this[int index] {
                get {
                    return ((dtUsageSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowChanging;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowChanged;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowDeleting;
            
            public event dtUsageSummaryRowChangeEventHandler dtUsageSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtUsageSummaryRow(dtUsageSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow AdddtUsageSummaryRow(int UsageId, string DocumentName, string StoreFrom, string DocumentNumber, System.DateTime DocumentDate, string DocumentNote, string PreparedBy, string CheckdBy, string ApprovedBy, string rePrint) {
                dtUsageSummaryRow rowdtUsageSummaryRow = ((dtUsageSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UsageId,
                        DocumentName,
                        StoreFrom,
                        DocumentNumber,
                        DocumentDate,
                        DocumentNote,
                        PreparedBy,
                        CheckdBy,
                        ApprovedBy,
                        rePrint};
                rowdtUsageSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtUsageSummaryRow);
                return rowdtUsageSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow FindByUsageId(int UsageId) {
                return ((dtUsageSummaryRow)(this.Rows.Find(new object[] {
                            UsageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtUsageSummaryDataTable cln = ((dtUsageSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtUsageSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUsageId = base.Columns["UsageId"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnStoreFrom = base.Columns["StoreFrom"];
                this.columnDocumentNumber = base.Columns["DocumentNumber"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnDocumentNote = base.Columns["DocumentNote"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnCheckdBy = base.Columns["CheckdBy"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnrePrint = base.Columns["rePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUsageId = new global::System.Data.DataColumn("UsageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsageId);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnStoreFrom = new global::System.Data.DataColumn("StoreFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreFrom);
                this.columnDocumentNumber = new global::System.Data.DataColumn("DocumentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNumber);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnDocumentNote = new global::System.Data.DataColumn("DocumentNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNote);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnCheckdBy = new global::System.Data.DataColumn("CheckdBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckdBy);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnrePrint = new global::System.Data.DataColumn("rePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrePrint);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUsageId}, true));
                this.columnUsageId.AllowDBNull = false;
                this.columnUsageId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow NewdtUsageSummaryRow() {
                return ((dtUsageSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtUsageSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtUsageSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtUsageSummaryRowChanged != null)) {
                    this.dtUsageSummaryRowChanged(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtUsageSummaryRowChanging != null)) {
                    this.dtUsageSummaryRowChanging(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtUsageSummaryRowDeleted != null)) {
                    this.dtUsageSummaryRowDeleted(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtUsageSummaryRowDeleting != null)) {
                    this.dtUsageSummaryRowDeleting(this, new dtUsageSummaryRowChangeEvent(((dtUsageSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtUsageSummaryRow(dtUsageSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsPOSDocumentData ds = new dtsPOSDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtUsageSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtRefundSummaryRow : global::System.Data.DataRow {
            
            private dtRefundSummaryDataTable tabledtRefundSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtRefundSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtRefundSummary = ((dtRefundSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salesId {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.salesIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesId\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.salesIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundId {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundId\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundStation {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundStationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundStation\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundNode {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundNode\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundNumber\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundDateAndTime {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundDateAndTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundDateAndTime\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundDateAndTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundReason {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundReasonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundReason\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundReasonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string refundBy {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.refundByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'refundBy\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.refundByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numberOfRePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtRefundSummary.numberOfRePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numberOfRePrint\' in table \'dtRefundSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtRefundSummary.numberOfRePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesIdNull() {
                return this.IsNull(this.tabledtRefundSummary.salesIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesIdNull() {
                this[this.tabledtRefundSummary.salesIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundIdNull() {
                return this.IsNull(this.tabledtRefundSummary.refundIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundIdNull() {
                this[this.tabledtRefundSummary.refundIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundStationNull() {
                return this.IsNull(this.tabledtRefundSummary.refundStationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundStationNull() {
                this[this.tabledtRefundSummary.refundStationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundNodeNull() {
                return this.IsNull(this.tabledtRefundSummary.refundNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundNodeNull() {
                this[this.tabledtRefundSummary.refundNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundNumberNull() {
                return this.IsNull(this.tabledtRefundSummary.refundNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundNumberNull() {
                this[this.tabledtRefundSummary.refundNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundDateAndTimeNull() {
                return this.IsNull(this.tabledtRefundSummary.refundDateAndTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundDateAndTimeNull() {
                this[this.tabledtRefundSummary.refundDateAndTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundReasonNull() {
                return this.IsNull(this.tabledtRefundSummary.refundReasonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundReasonNull() {
                this[this.tabledtRefundSummary.refundReasonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrefundByNull() {
                return this.IsNull(this.tabledtRefundSummary.refundByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrefundByNull() {
                this[this.tabledtRefundSummary.refundByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberOfRePrintNull() {
                return this.IsNull(this.tabledtRefundSummary.numberOfRePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberOfRePrintNull() {
                this[this.tabledtRefundSummary.numberOfRePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDispatchDetailRow : global::System.Data.DataRow {
            
            private dtDispatchDetailDataTable tabledtDispatchDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDispatchDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDispatchDetail = ((dtDispatchDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salesDetailId {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.salesDetailIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesDetailId\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.salesDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salesDetailStation {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.salesDetailStationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesDetailStation\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.salesDetailStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salesDetailNode {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.salesDetailNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesDetailNode\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.salesDetailNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string salesID {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.salesIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'salesID\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.salesIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item_id {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.item_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'item_id\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.item_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string locatorFromId {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.locatorFromIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'locatorFromId\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.locatorFromIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail._Sn_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sn.\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOM {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.UOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOM\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.UOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtDispatchDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesDetailIdNull() {
                return this.IsNull(this.tabledtDispatchDetail.salesDetailIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesDetailIdNull() {
                this[this.tabledtDispatchDetail.salesDetailIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesDetailStationNull() {
                return this.IsNull(this.tabledtDispatchDetail.salesDetailStationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesDetailStationNull() {
                this[this.tabledtDispatchDetail.salesDetailStationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesDetailNodeNull() {
                return this.IsNull(this.tabledtDispatchDetail.salesDetailNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesDetailNodeNull() {
                this[this.tabledtDispatchDetail.salesDetailNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssalesIDNull() {
                return this.IsNull(this.tabledtDispatchDetail.salesIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsalesIDNull() {
                this[this.tabledtDispatchDetail.salesIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isitem_idNull() {
                return this.IsNull(this.tabledtDispatchDetail.item_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setitem_idNull() {
                this[this.tabledtDispatchDetail.item_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslocatorFromIdNull() {
                return this.IsNull(this.tabledtDispatchDetail.locatorFromIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlocatorFromIdNull() {
                this[this.tabledtDispatchDetail.locatorFromIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Sn_Null() {
                return this.IsNull(this.tabledtDispatchDetail._Sn_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Sn_Null() {
                this[this.tabledtDispatchDetail._Sn_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtDispatchDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtDispatchDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtDispatchDetail.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtDispatchDetail.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMNull() {
                return this.IsNull(this.tabledtDispatchDetail.UOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMNull() {
                this[this.tabledtDispatchDetail.UOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tabledtDispatchDetail.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tabledtDispatchDetail.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledtDispatchDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledtDispatchDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtDispatchDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtDispatchDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtDispatchDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtDispatchDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtDispatchDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtDispatchDetail.BARColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDispatchSummaryRow : global::System.Data.DataRow {
            
            private dtDispatchSummaryDataTable tabledtDispatchSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDispatchSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDispatchSummary = ((dtDispatchSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtDispatchSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliveryOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchSummary.DeliveryOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryOrderNumber\' in table \'dtDispatchSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtDispatchSummary.DeliveryOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DispatchFrom {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchSummary.DispatchFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DispatchFrom\' in table \'dtDispatchSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchSummary.DispatchFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numberOfRePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtDispatchSummary.numberOfRePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numberOfRePrint\' in table \'dtDispatchSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDispatchSummary.numberOfRePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtDispatchSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtDispatchSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryOrderNumberNull() {
                return this.IsNull(this.tabledtDispatchSummary.DeliveryOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryOrderNumberNull() {
                this[this.tabledtDispatchSummary.DeliveryOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDispatchFromNull() {
                return this.IsNull(this.tabledtDispatchSummary.DispatchFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDispatchFromNull() {
                this[this.tabledtDispatchSummary.DispatchFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberOfRePrintNull() {
                return this.IsNull(this.tabledtDispatchSummary.numberOfRePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberOfRePrintNull() {
                this[this.tabledtDispatchSummary.numberOfRePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtSaleDepartmentInfoRow : global::System.Data.DataRow {
            
            private dtSaleDepartmentInfoDataTable tabledtSaleDepartmentInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSaleDepartmentInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtSaleDepartmentInfo = ((dtSaleDepartmentInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubCity {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.SubCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SubCity\' in table \'dtSaleDepartmentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.SubCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string kebele {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.kebeleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'kebele\' in table \'dtSaleDepartmentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.kebeleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HouseNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.HouseNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HouseNumber\' in table \'dtSaleDepartmentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.HouseNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VATRegistrationNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.VATRegistrationNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VATRegistrationNumber\' in table \'dtSaleDepartmentInfo\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.VATRegistrationNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TINNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.TINNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TINNumber\' in table \'dtSaleDepartmentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.TINNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DateRegistered {
                get {
                    try {
                        return ((string)(this[this.tabledtSaleDepartmentInfo.DateRegisteredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateRegistered\' in table \'dtSaleDepartmentInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSaleDepartmentInfo.DateRegisteredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSubCityNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.SubCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSubCityNull() {
                this[this.tabledtSaleDepartmentInfo.SubCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskebeleNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.kebeleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkebeleNull() {
                this[this.tabledtSaleDepartmentInfo.kebeleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHouseNumberNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.HouseNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHouseNumberNull() {
                this[this.tabledtSaleDepartmentInfo.HouseNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVATRegistrationNumberNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.VATRegistrationNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVATRegistrationNumberNull() {
                this[this.tabledtSaleDepartmentInfo.VATRegistrationNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTINNumberNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.TINNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTINNumberNull() {
                this[this.tabledtSaleDepartmentInfo.TINNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateRegisteredNull() {
                return this.IsNull(this.tabledtSaleDepartmentInfo.DateRegisteredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateRegisteredNull() {
                this[this.tabledtSaleDepartmentInfo.DateRegisteredColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtAttachmentSummaryRow : global::System.Data.DataRow {
            
            private dtAttachmentSummaryDataTable tabledtAttachmentSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAttachmentSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtAttachmentSummary = ((dtAttachmentSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionID {
                get {
                    return ((string)(this[this.tabledtAttachmentSummary.transactionIDColumn]));
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string stationID {
                get {
                    return ((string)(this[this.tabledtAttachmentSummary.stationIDColumn]));
                }
                set {
                    this[this.tabledtAttachmentSummary.stationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nodeID {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.nodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'nodeID\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.nodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionPerson {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.transactionPersonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionPerson\' in table \'dtAttachmentSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionPersonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentStore {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.DepartmentStoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DepartmentStore\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.DepartmentStoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliveryOrderNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.DeliveryOrderNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryOrderNumber\' in table \'dtAttachmentSummary\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.DeliveryOrderNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FSNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.FSNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FSNumber\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.FSNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReferenceNumber {
                get {
                    return ((string)(this[this.tabledtAttachmentSummary.ReferenceNumberColumn]));
                }
                set {
                    this[this.tabledtAttachmentSummary.ReferenceNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAttachmentSummary.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Time {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAttachmentSummary.TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Time\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersTradeName {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersTradeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersTradeName\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersTradeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersTIN {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersTINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersTIN\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersTINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersVAT {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersVATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersVAT\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersVATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersZoneORSubCity {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersZoneORSubCityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersZoneORSubCity\' in table \'dtAttachmentSummary\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersZoneORSubCityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersKebele {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersKebeleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersKebele\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersKebeleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersHouseNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersHouseNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersHouseNumber\' in table \'dtAttachmentSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersHouseNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BuyersPhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.BuyersPhoneNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BuyersPhoneNumber\' in table \'dtAttachmentSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.BuyersPhoneNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transactionTotal {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAttachmentSummary.transactionTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionTotal\' in table \'dtAttachmentSummary\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transactionVAT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAttachmentSummary.transactionVATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionVAT\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionVATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transactionGrandTotal {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAttachmentSummary.transactionGrandTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionGrandTotal\' in table \'dtAttachmentSummary\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionGrandTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transactionWithHolding {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAttachmentSummary.transactionWithHoldingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionWithHolding\' in table \'dtAttachmentSummary\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionWithHoldingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal transactionNetPay {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAttachmentSummary.transactionNetPayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionNetPay\' in table \'dtAttachmentSummary\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionNetPayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionAmountInWord {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.transactionAmountInWordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionAmountInWord\' in table \'dtAttachmentSummary\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionAmountInWordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionPaymentMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.transactionPaymentMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionPaymentMethod\' in table \'dtAttachmentSummary\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.transactionPaymentMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MRC {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.MRCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MRC\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.MRCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string numberOfRePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtAttachmentSummary.numberOfRePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'numberOfRePrint\' in table \'dtAttachmentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttachmentSummary.numberOfRePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnodeIDNull() {
                return this.IsNull(this.tabledtAttachmentSummary.nodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnodeIDNull() {
                this[this.tabledtAttachmentSummary.nodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtAttachmentSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtAttachmentSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionPersonNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionPersonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionPersonNull() {
                this[this.tabledtAttachmentSummary.transactionPersonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDepartmentStoreNull() {
                return this.IsNull(this.tabledtAttachmentSummary.DepartmentStoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDepartmentStoreNull() {
                this[this.tabledtAttachmentSummary.DepartmentStoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryOrderNumberNull() {
                return this.IsNull(this.tabledtAttachmentSummary.DeliveryOrderNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryOrderNumberNull() {
                this[this.tabledtAttachmentSummary.DeliveryOrderNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFSNumberNull() {
                return this.IsNull(this.tabledtAttachmentSummary.FSNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFSNumberNull() {
                this[this.tabledtAttachmentSummary.FSNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tabledtAttachmentSummary.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tabledtAttachmentSummary.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeNull() {
                return this.IsNull(this.tabledtAttachmentSummary.TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeNull() {
                this[this.tabledtAttachmentSummary.TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersTradeNameNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersTradeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersTradeNameNull() {
                this[this.tabledtAttachmentSummary.BuyersTradeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersTINNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersTINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersTINNull() {
                this[this.tabledtAttachmentSummary.BuyersTINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersVATNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersVATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersVATNull() {
                this[this.tabledtAttachmentSummary.BuyersVATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersZoneORSubCityNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersZoneORSubCityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersZoneORSubCityNull() {
                this[this.tabledtAttachmentSummary.BuyersZoneORSubCityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersKebeleNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersKebeleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersKebeleNull() {
                this[this.tabledtAttachmentSummary.BuyersKebeleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersHouseNumberNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersHouseNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersHouseNumberNull() {
                this[this.tabledtAttachmentSummary.BuyersHouseNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBuyersPhoneNumberNull() {
                return this.IsNull(this.tabledtAttachmentSummary.BuyersPhoneNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBuyersPhoneNumberNull() {
                this[this.tabledtAttachmentSummary.BuyersPhoneNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionTotalNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionTotalNull() {
                this[this.tabledtAttachmentSummary.transactionTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionVATNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionVATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionVATNull() {
                this[this.tabledtAttachmentSummary.transactionVATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionGrandTotalNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionGrandTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionGrandTotalNull() {
                this[this.tabledtAttachmentSummary.transactionGrandTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionWithHoldingNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionWithHoldingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionWithHoldingNull() {
                this[this.tabledtAttachmentSummary.transactionWithHoldingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionNetPayNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionNetPayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionNetPayNull() {
                this[this.tabledtAttachmentSummary.transactionNetPayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionAmountInWordNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionAmountInWordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionAmountInWordNull() {
                this[this.tabledtAttachmentSummary.transactionAmountInWordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionPaymentMethodNull() {
                return this.IsNull(this.tabledtAttachmentSummary.transactionPaymentMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionPaymentMethodNull() {
                this[this.tabledtAttachmentSummary.transactionPaymentMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMRCNull() {
                return this.IsNull(this.tabledtAttachmentSummary.MRCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMRCNull() {
                this[this.tabledtAttachmentSummary.MRCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNoteNull() {
                return this.IsNull(this.tabledtAttachmentSummary.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNoteNull() {
                this[this.tabledtAttachmentSummary.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnumberOfRePrintNull() {
                return this.IsNull(this.tabledtAttachmentSummary.numberOfRePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnumberOfRePrintNull() {
                this[this.tabledtAttachmentSummary.numberOfRePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtSalesDetailRow : global::System.Data.DataRow {
            
            private dtSalesDetailDataTable tabledtSalesDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSalesDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtSalesDetail = ((dtSalesDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionDetailId {
                get {
                    return ((string)(this[this.tabledtSalesDetail.transactionDetailIdColumn]));
                }
                set {
                    this[this.tabledtSalesDetail.transactionDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionDetailStation {
                get {
                    return ((string)(this[this.tabledtSalesDetail.transactionDetailStationColumn]));
                }
                set {
                    this[this.tabledtSalesDetail.transactionDetailStationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionDetailNode {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.transactionDetailNodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionDetailNode\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.transactionDetailNodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string transactionID {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.transactionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactionID\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.transactionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string item_id {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.item_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'item_id\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.item_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string locatorFromId {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.locatorFromIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'locatorFromId\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.locatorFromIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail._Sn_Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Sn.\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UOM {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.UOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOM\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.UOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal UnitPrice {
                get {
                    try {
                        return ((decimal)(this[this.tabledtSalesDetail.UnitPriceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitPrice\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.UnitPriceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TotalAmount {
                get {
                    try {
                        return ((decimal)(this[this.tabledtSalesDetail.TotalAmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalAmount\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.TotalAmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtSalesDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionDetailNodeNull() {
                return this.IsNull(this.tabledtSalesDetail.transactionDetailNodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionDetailNodeNull() {
                this[this.tabledtSalesDetail.transactionDetailNodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactionIDNull() {
                return this.IsNull(this.tabledtSalesDetail.transactionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactionIDNull() {
                this[this.tabledtSalesDetail.transactionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isitem_idNull() {
                return this.IsNull(this.tabledtSalesDetail.item_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setitem_idNull() {
                this[this.tabledtSalesDetail.item_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IslocatorFromIdNull() {
                return this.IsNull(this.tabledtSalesDetail.locatorFromIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetlocatorFromIdNull() {
                this[this.tabledtSalesDetail.locatorFromIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is_Sn_Null() {
                return this.IsNull(this.tabledtSalesDetail._Sn_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set_Sn_Null() {
                this[this.tabledtSalesDetail._Sn_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtSalesDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtSalesDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtSalesDetail.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtSalesDetail.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUOMNull() {
                return this.IsNull(this.tabledtSalesDetail.UOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUOMNull() {
                this[this.tabledtSalesDetail.UOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitPriceNull() {
                return this.IsNull(this.tabledtSalesDetail.UnitPriceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitPriceNull() {
                this[this.tabledtSalesDetail.UnitPriceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAmountNull() {
                return this.IsNull(this.tabledtSalesDetail.TotalAmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAmountNull() {
                this[this.tabledtSalesDetail.TotalAmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tabledtSalesDetail.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tabledtSalesDetail.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtSalesDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtSalesDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtSalesDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtSalesDetail.BARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtSalesDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtSalesDetail.CODEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMovementDetailRow : global::System.Data.DataRow {
            
            private dtMovementDetailDataTable tabledtMovementDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMovementDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMovementDetail = ((dtMovementDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MovementDetailId {
                get {
                    return ((int)(this[this.tabledtMovementDetail.MovementDetailIdColumn]));
                }
                set {
                    this[this.tabledtMovementDetail.MovementDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MovementId {
                get {
                    try {
                        return ((int)(this[this.tabledtMovementDetail.MovementIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MovementId\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.MovementIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    return ((string)(this[this.tabledtMovementDetail._Sn_Column]));
                }
                set {
                    this[this.tabledtMovementDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tabledtMovementDetail.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtMovementDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMovementIdNull() {
                return this.IsNull(this.tabledtMovementDetail.MovementIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMovementIdNull() {
                this[this.tabledtMovementDetail.MovementIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtMovementDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtMovementDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledtMovementDetail.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledtMovementDetail.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtMovementDetail.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtMovementDetail.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledtMovementDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledtMovementDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tabledtMovementDetail.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tabledtMovementDetail.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtMovementDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtMovementDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtMovementDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtMovementDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtMovementDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtMovementDetail.BARColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtMovementSummaryRow : global::System.Data.DataRow {
            
            private dtMovementSummaryDataTable tabledtMovementSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtMovementSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtMovementSummary = ((dtMovementSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MovementId {
                get {
                    return ((int)(this[this.tabledtMovementSummary.MovementIdColumn]));
                }
                set {
                    this[this.tabledtMovementSummary.MovementIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreFrom {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.StoreFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreFrom\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.StoreFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreTo {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.StoreToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreTo\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.StoreToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.RequestNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestNumber\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.RequestNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.DocumentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNumber\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.DocumentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocumentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtMovementSummary.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNote {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.DocumentNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNote\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.DocumentNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckdBy {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.CheckdByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckdBy\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.CheckdByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtMovementSummary.rePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rePrint\' in table \'dtMovementSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtMovementSummary.rePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtMovementSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtMovementSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreFromNull() {
                return this.IsNull(this.tabledtMovementSummary.StoreFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreFromNull() {
                this[this.tabledtMovementSummary.StoreFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreToNull() {
                return this.IsNull(this.tabledtMovementSummary.StoreToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreToNull() {
                this[this.tabledtMovementSummary.StoreToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestNumberNull() {
                return this.IsNull(this.tabledtMovementSummary.RequestNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestNumberNull() {
                this[this.tabledtMovementSummary.RequestNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNumberNull() {
                return this.IsNull(this.tabledtMovementSummary.DocumentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNumberNull() {
                this[this.tabledtMovementSummary.DocumentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tabledtMovementSummary.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tabledtMovementSummary.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNoteNull() {
                return this.IsNull(this.tabledtMovementSummary.DocumentNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNoteNull() {
                this[this.tabledtMovementSummary.DocumentNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledtMovementSummary.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledtMovementSummary.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckdByNull() {
                return this.IsNull(this.tabledtMovementSummary.CheckdByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckdByNull() {
                this[this.tabledtMovementSummary.CheckdByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tabledtMovementSummary.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tabledtMovementSummary.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrePrintNull() {
                return this.IsNull(this.tabledtMovementSummary.rePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrePrintNull() {
                this[this.tabledtMovementSummary.rePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCountDetailRow : global::System.Data.DataRow {
            
            private dtCountDetailDataTable tabledtCountDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCountDetail = ((dtCountDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountDetailId {
                get {
                    return ((int)(this[this.tabledtCountDetail.CountDetailIdColumn]));
                }
                set {
                    this[this.tabledtCountDetail.CountDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountId {
                get {
                    try {
                        return ((int)(this[this.tabledtCountDetail.CountIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountId\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CountIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    return ((string)(this[this.tabledtCountDetail._Sn_Column]));
                }
                set {
                    this[this.tabledtCountDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Book_Qty {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCountDetail.Book_QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Book Qty\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.Book_QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Count_Qty {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCountDetail.Count_QtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count Qty\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.Count_QtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtCountDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtCountDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountIdNull() {
                return this.IsNull(this.tabledtCountDetail.CountIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountIdNull() {
                this[this.tabledtCountDetail.CountIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtCountDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtCountDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledtCountDetail.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledtCountDetail.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBook_QtyNull() {
                return this.IsNull(this.tabledtCountDetail.Book_QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBook_QtyNull() {
                this[this.tabledtCountDetail.Book_QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCount_QtyNull() {
                return this.IsNull(this.tabledtCountDetail.Count_QtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCount_QtyNull() {
                this[this.tabledtCountDetail.Count_QtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledtCountDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledtCountDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tabledtCountDetail.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tabledtCountDetail.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtCountDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtCountDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtCountDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtCountDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtCountDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtCountDetail.BARColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCountSummaryRow : global::System.Data.DataRow {
            
            private dtCountSummaryDataTable tabledtCountSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCountSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCountSummary = ((dtCountSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountId {
                get {
                    return ((int)(this[this.tabledtCountSummary.CountIdColumn]));
                }
                set {
                    this[this.tabledtCountSummary.CountIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Store {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.StoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Store\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.StoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.DocumentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNumber\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DocumentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocumentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtCountSummary.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNote {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.DocumentNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNote\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.DocumentNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckdBy {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.CheckdByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckdBy\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.CheckdByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtCountSummary.rePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rePrint\' in table \'dtCountSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCountSummary.rePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtCountSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtCountSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreNull() {
                return this.IsNull(this.tabledtCountSummary.StoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreNull() {
                this[this.tabledtCountSummary.StoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNumberNull() {
                return this.IsNull(this.tabledtCountSummary.DocumentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNumberNull() {
                this[this.tabledtCountSummary.DocumentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tabledtCountSummary.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tabledtCountSummary.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNoteNull() {
                return this.IsNull(this.tabledtCountSummary.DocumentNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNoteNull() {
                this[this.tabledtCountSummary.DocumentNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledtCountSummary.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledtCountSummary.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckdByNull() {
                return this.IsNull(this.tabledtCountSummary.CheckdByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckdByNull() {
                this[this.tabledtCountSummary.CheckdByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tabledtCountSummary.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tabledtCountSummary.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrePrintNull() {
                return this.IsNull(this.tabledtCountSummary.rePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrePrintNull() {
                this[this.tabledtCountSummary.rePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtUsageDetailRow : global::System.Data.DataRow {
            
            private dtUsageDetailDataTable tabledtUsageDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtUsageDetail = ((dtUsageDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UsageDetailId {
                get {
                    return ((int)(this[this.tabledtUsageDetail.UsageDetailIdColumn]));
                }
                set {
                    this[this.tabledtUsageDetail.UsageDetailIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UsageId {
                get {
                    try {
                        return ((int)(this[this.tabledtUsageDetail.UsageIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UsageId\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.UsageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    return ((string)(this[this.tabledtUsageDetail._Sn_Column]));
                }
                set {
                    this[this.tabledtUsageDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Quantity {
                get {
                    try {
                        return ((decimal)(this[this.tabledtUsageDetail.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE2 {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.CODE2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE2\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.CODE2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CODE {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CODE\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BAR {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageDetail.BARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BAR\' in table \'dtUsageDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageDetail.BARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsageIdNull() {
                return this.IsNull(this.tabledtUsageDetail.UsageIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsageIdNull() {
                this[this.tabledtUsageDetail.UsageIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtUsageDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtUsageDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledtUsageDetail.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledtUsageDetail.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtUsageDetail.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtUsageDetail.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledtUsageDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledtUsageDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tabledtUsageDetail.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tabledtUsageDetail.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODE2Null() {
                return this.IsNull(this.tabledtUsageDetail.CODE2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODE2Null() {
                this[this.tabledtUsageDetail.CODE2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCODENull() {
                return this.IsNull(this.tabledtUsageDetail.CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCODENull() {
                this[this.tabledtUsageDetail.CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBARNull() {
                return this.IsNull(this.tabledtUsageDetail.BARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBARNull() {
                this[this.tabledtUsageDetail.BARColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtUsageSummaryRow : global::System.Data.DataRow {
            
            private dtUsageSummaryDataTable tabledtUsageSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtUsageSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtUsageSummary = ((dtUsageSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UsageId {
                get {
                    return ((int)(this[this.tabledtUsageSummary.UsageIdColumn]));
                }
                set {
                    this[this.tabledtUsageSummary.UsageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreFrom {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.StoreFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreFrom\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.StoreFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.DocumentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNumber\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DocumentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocumentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtUsageSummary.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNote {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.DocumentNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNote\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.DocumentNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckdBy {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.CheckdByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckdBy\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.CheckdByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtUsageSummary.rePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rePrint\' in table \'dtUsageSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtUsageSummary.rePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtUsageSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtUsageSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreFromNull() {
                return this.IsNull(this.tabledtUsageSummary.StoreFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreFromNull() {
                this[this.tabledtUsageSummary.StoreFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNumberNull() {
                return this.IsNull(this.tabledtUsageSummary.DocumentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNumberNull() {
                this[this.tabledtUsageSummary.DocumentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tabledtUsageSummary.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tabledtUsageSummary.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNoteNull() {
                return this.IsNull(this.tabledtUsageSummary.DocumentNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNoteNull() {
                this[this.tabledtUsageSummary.DocumentNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledtUsageSummary.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledtUsageSummary.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckdByNull() {
                return this.IsNull(this.tabledtUsageSummary.CheckdByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckdByNull() {
                this[this.tabledtUsageSummary.CheckdByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tabledtUsageSummary.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tabledtUsageSummary.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrePrintNull() {
                return this.IsNull(this.tabledtUsageSummary.rePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrePrintNull() {
                this[this.tabledtUsageSummary.rePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtRefundSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtRefundSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryRowChangeEvent(dtRefundSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtRefundSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDispatchDetailRowChangeEvent : global::System.EventArgs {
            
            private dtDispatchDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailRowChangeEvent(dtDispatchDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDispatchSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtDispatchSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryRowChangeEvent(dtDispatchSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDispatchSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtSaleDepartmentInfoRowChangeEvent : global::System.EventArgs {
            
            private dtSaleDepartmentInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoRowChangeEvent(dtSaleDepartmentInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSaleDepartmentInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtAttachmentSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtAttachmentSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRowChangeEvent(dtAttachmentSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttachmentSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtSalesDetailRowChangeEvent : global::System.EventArgs {
            
            private dtSalesDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRowChangeEvent(dtSalesDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMovementDetailRowChangeEvent : global::System.EventArgs {
            
            private dtMovementDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRowChangeEvent(dtMovementDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtMovementSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtMovementSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRowChangeEvent(dtMovementSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtMovementSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCountDetailRowChangeEvent : global::System.EventArgs {
            
            private dtCountDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRowChangeEvent(dtCountDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCountSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtCountSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRowChangeEvent(dtCountSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCountSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtUsageDetailRowChangeEvent : global::System.EventArgs {
            
            private dtUsageDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRowChangeEvent(dtUsageDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtUsageSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtUsageSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRowChangeEvent(dtUsageSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtUsageSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591