DROP FUNCTION IF EXISTS `GET_DOCUMENTNO`;
DELIMITER $$
CREATE FUNCTION GET_DOCUMENTNO (_TRANSACTION_ID int(10)) RETURNS VARCHAR(60)
BEGIN
	DECLARE _TYPE CHAR(2);
	DECLARE _ID int(10) DEFAULT 0;
	DECLARE _DOC VARCHAR(60) DEFAULT 'NotAvailable';
	
	IF _TRANSACTION_ID IS NULL OR _TRANSACTION_ID <= 0 THEN 
		SET _ID = 0;
	ELSE	
		SELECT COAlESCE(M_INOUTLINE_ID,M_MOVEMENTLINE_ID,M_INVENTORYLINE_ID,
						T_INVENTORYUSEDETAIL_ID,0),MOVEMENTTYPE INTO _ID,_TYPE
		FROM M_TRANSACTION
		WHERE M_TRANSACTION_ID = _TRANSACTION_ID;
	END IF;
	
	
	IF _TYPE = 'BL' OR _ID = 0 THEN	
		SET _DOC = 'NotAvailable';
	ELSEIF _TYPE IN ('M+','M-') THEN
		SELECT DOCUMENTNO INTO _DOC
		FROM T_MOVEMENT
		WHERE T_MOVEMENT_ID IN
		(
			SELECT MAX(DISTINCT(T_MOVEMENT_ID))
			FROM T_MOVEMENTDETAIL
			WHERE T_MOVEMENTDETAIL_ID = _ID
		);
	ELSEIF _TYPE IN ('V+','V-','C+','C-') THEN
		SELECT DOCUMENTNO INTO _DOC
		FROM T_TRANSACTION
		WHERE T_TRANSACTION_ID IN
		(
			SELECT MAX(DISTINCT (T_TRANSACTION_ID))
			FROM T_TRXDETAIL
			WHERE T_TRXDETAIL_ID = _ID
		);
	ELSEIF _TYPE IN ('I+') THEN
		SELECT DOCUMENTNO INTO _DOC
		FROM T_PHYSICALCOUNT
		WHERE T_PHYSICALCOUNT_ID IN
		(
			SELECT MAX(DISTINCT(T_PHYSICALCOUNT_ID))
			FROM T_PHYSICALCOUNTDETAIL
			WHERE T_PHYSICALCOUNTDETAIL_ID = _ID
		);	
	ELSEIF _TYPE IN ('I-') THEN
		SELECT DOCUMENTNO INTO _DOC
		FROM T_INVENTORYUSE_ID
		WHERE T_INVENTORYUSE_ID IN
		(
			SELECT MAX(DISTINCT(T_INVENTORYUSE_ID))
			FROM T_INVENTORYUSEDETAIL
			WHERE T_INVENTORYUSEDETAIL_ID = _ID
		);
	END IF;
	RETURN _DOC;	
END $$

DROP FUNCTION IF EXISTS `TRX_TYPE`;
DELIMITER $$
CREATE FUNCTION TRX_TYPE (_TRANSACTION_ID int(10)) RETURNS VARCHAR(60)
BEGIN
	DECLARE _TYPE CHAR(2);
	DECLARE _ID int(10) DEFAULT 0;
	DECLARE _TRXT_YPE VARCHAR(60) DEFAULT 'NotAvailable';
	
	IF _TRANSACTION_ID IS NULL OR _TRANSACTION_ID <= 0 THEN 
		SET _ID = 0;
	ELSE	
		SELECT COAlESCE(M_INOUTLINE_ID,M_MOVEMENTLINE_ID,M_INVENTORYLINE_ID,
						T_INVENTORYUSEDETAIL_ID,0),MOVEMENTTYPE INTO _ID,_TYPE
		FROM M_TRANSACTION
		WHERE M_TRANSACTION_ID = _TRANSACTION_ID;
	END IF;
	
	CASE _TYPE
		WHEN 'V+' THEN SET _TRXT_YPE = 'Vendor Return';
		WHEN 'V-' THEN SET _TRXT_YPE = 'Vendor Recipt';
		WHEN 'M+' THEN SET _TRXT_YPE = 'Transfer In';
		WHEN 'M-' THEN SET _TRXT_YPE = 'Transfer Out';
		WHEN 'I+' THEN SET _TRXT_YPE = 'Physical Inventory';
		WHEN 'I-' THEN SET _TRXT_YPE = 'Internal Use';
		WHEN 'C+' THEN SET _TRXT_YPE = 'Customer Return';
		WHEN 'C-' THEN SET _TRXT_YPE = 'Customer Dispatch';
		ELSE SET _TRXT_YPE = 'Unknown';
	END CASE;
	
	RETURN _TRXT_YPE;	
END $$

DROP VIEW IF EXISTS `V_TRANSACTIONSUMMARY`;
CREATE VIEW `V_TRANSACTIONSUMMARY` AS
SELECT
	TRANSACTION.M_TRANSACTION_ID AS M_TRANSACTION_ID,
	TRANSACTION.AD_CLIENT_ID AS AD_CLIENT_ID,
	TRANSACTION.M_SHOP_ID AS M_SHOP_ID,
	TRANSACTION.AD_ORG_ID AS AD_ORG_ID,	
	TRANSACTION.MOVEMENTTYPE AS MOVEMENTTYPE,
	TRANSACTION.M_LOCATOR_ID AS M_LOCATOR_ID,
	TRANSACTION.M_PRODUCT_ID AS M_PRODUCT_ID,
	TRANSACTION.MOVEMENTDATE AS MOVEMENTDATE,
	TRANSACTION.MOVEMENTQTY AS MOVEMENTQTY,
	TRANSACTION.C_UOM_ID AS C_UOM_ID,	
	TRANSACTION.M_INOUTLINE_ID AS M_INOUTLINE_ID,
	TRANSACTION.M_MOVEMENTLINE_ID AS M_MOVEMENTLINE_ID,	
	TRANSACTION.M_INVENTORYLINE_ID AS M_INVENTORYLINE_ID,
	TRANSACTION.T_INVENTORYUSEDETAIL_ID AS T_INVENTORYUSEDETAIL_ID,
	GET_DOCUMENTNO(TRANSACTION.M_TRANSACTION_ID) AS DOCUMENTNO,
	TRX_TYPE (TRANSACTION.M_TRANSACTION_ID) AS Type,
	PRD.CODE AS CODE,
	PRD.NAME AS PRODUCT,
	PRD.M_PRODUCTCATEGORY_ID AS M_PRODUCTCATEGORY_ID,
	PRD_CAT.NAME AS CATEGORY,
	UOM.NAME AS UNIT,
	UOM.ABBREVATION AS UOM,
	STATION.NAME AS STATION,
	WAREHOUSE.NAME AS WAREHOUSE,
	ORG.NAME AS ORGANISATION
FROM (((((`M_TRANSACTION` `TRANSACTION` INNER JOIN `M_PRODUCT` `PRD`
ON `TRANSACTION`.`M_PRODUCT_ID` = `PRD`.`M_PRODUCT_ID`)
INNER JOIN `M_PRODUCTCATEGORY` `PRD_CAT`
ON `PRD`.`M_PRODUCTCATEGORY_ID` = `PRD_CAT`.`M_PRODUCTCATEGORY_ID`)
INNER JOIN `M_UOM` `UOM`
ON `TRANSACTION`.`C_UOM_ID` = `UOM`.`M_UOM_ID`)
INNER JOIN `M_SHOP` `STATION`
ON `TRANSACTION`.`M_SHOP_ID` = `STATION`.`M_SHOP_ID`)
INNER JOIN `AD_ORG` `ORG`
ON `TRANSACTION`.`AD_ORG_ID` = `ORG`.`AD_ORG_ID`)
INNER JOIN `M_WAREHOUSE` `WAREHOUSE`
ON `TRANSACTION`.`M_LOCATOR_ID` = `WAREHOUSE`.`M_WAREHOUSE_ID`;
