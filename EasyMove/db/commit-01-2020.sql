@mysql -hhost -uroot -pe4r5t6y7 easymove

DROP EVENT IF EXISTS updateDeliveredQty;
ALTER TABLE `easymove`.`m_inoutline` ADD INDEX `C_ORDERLINE_ID` ( `C_ORDERLINE_ID` );

CREATE OR REPLACE VIEW v_salesorderdetail AS
SELECT sd.C_ORDER_ID, sd.C_BPARTNER_ID, sd.DOCUMENTNO, sd.DELIVERYORDERNO, sd.ISACTIVE,
		sd.DOCSTATUS, sd.PROCESSING, sd.PROCESSED, sd.DATEORDERED, sd.C_ORDERLINE_ID,
		sd.LINE, sd.M_PRODUCT_ID, sd.C_UOM_ID, sd.M_WAREHOUSE_ID, sd.QTYORDERED, COALESCE(SUM(il.MOVEMENTQTY),0) AS QTYDELIVERED,
		b.NAME AS CUSTOMER, w.NAME AS STORE, p.NAME AS PRODUCT, u.NAME AS UNIT,
		(sd.QTYORDERED - COALESCE(SUM(il.MOVEMENTQTY),0)) AS QTYRESERVED
FROM salesorderdetail sd LEFT JOIN m_inoutline il
	ON sd.C_ORDERLINE_ID = il.C_ORDERLINE_ID LEFT JOIN c_bpartner b
	ON sd.C_BPARTNER_ID = b.C_BPARTNER_ID LEFT JOIN em_m_warehouse w
	ON sd.M_WAREHOUSE_ID = w.M_WAREHOUSE_ID LEFT JOIN em_m_product p
	ON sd.M_PRODUCT_ID = p.M_PRODUCT_ID LEFT JOIN em_c_uom u
	ON p.C_UOM_ID = u.C_UOM_ID
GROUP BY sd.C_ORDER_ID, sd.C_BPARTNER_ID, sd.DOCUMENTNO, sd.DELIVERYORDERNO, sd.ISACTIVE,
		sd.DOCSTATUS, sd.PROCESSING, sd.PROCESSED, sd.DATEORDERED, sd.C_ORDERLINE_ID,
		sd.LINE, sd.M_PRODUCT_ID, sd.C_UOM_ID, sd.M_WAREHOUSE_ID, sd.QTYORDERED, sd.QTYDELIVERED,
		b.NAME, w.NAME, p.NAME, u.NAME;


CREATE TABLE M_BOM_CHANGE (
 `M_BOM_CHANGE_ID` INT(10),
 `EM_STATION_ID` INT(10) NOT NULL DEFAULT '0',
 `AD_CLIENT_ID` INT(10) NOT NULL ,
 `AD_ORG_ID` INT(10) NOT NULL ,
 `ISACTIVE` CHAR(1) NOT NULL DEFAULT 'Y',
 `CREATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 `CREATEDBY` INT(10) NOT NULL ,
 `UPDATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 `UPDATEDBY` INT(10) NOT NULL ,
 `DOCUMENTNO` VARCHAR(30) NOT NULL,
 `C_DOCTYPE_ID` INT(10) NOT NULL,
 `REQUESTDATE` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 `M_PRODUCT_ID` INT(10),
 `DESCRIPTION` VARCHAR(255),
 `DOCACTION` CHAR(2) NOT NULL DEFAULT 'CO',
 `DOCSTATUS` CHAR(2) NOT NULL DEFAULT 'DR',
 `PROCESSING` CHAR(1) NOT NULL DEFAULT 'Y',
 `PROCESSED` CHAR(1) NOT NULL DEFAULT 'N',
 `ISAPPROVED` CHAR(1) NOT NULL DEFAULT 'N',
 CONSTRAINT PRIMARY KEY (`M_BOM_CHANGE_ID`,`EM_STATION_ID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;

 CREATE TABLE `M_BOM_CHANGE_LINE` (
 `M_BOM_CHANGE_LINE_ID` INT(10),
 `EM_STATION_ID` INT(10) NOT NULL DEFAULT '0',
 `AD_CLIENT_ID` INT(10) NOT NULL,
 `AD_ORG_ID` INT(10) NOT NULL,
 `ISACTIVE` CHAR(1) NOT NULL DEFAULT 'Y',
 `CREATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 `CREATEDBY` INT(10) NOT NULL,
 `UPDATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
 `UPDATEDBY` INT(10) NOT NULL,
 `M_BOM_CHANGE_ID` INT(10) NOT NULL,
 `LINE` INT(10) NOT NULL,
 `M_PRODUCT_ID` INT(10),
 `C_UOM_ID` INT(10) NOT NULL,
 `BOMQTY` DOUBLE NOT NULL DEFAULT '0',
 `DESCRIPTION` VARCHAR(255),
 `PROCESSED` CHAR(1) NOT NULL DEFAULT 'N'
 CONSTRAINT PRIMARY KEY (`M_BOM_CHANGE_LINE_ID`,`EM_STATION_ID`)
) ENGINE=InnoDB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;

CREATE OR REPLACE VIEW v_bomchangedetail AS
SELECT b.M_BOM_CHANGE_ID, b.EM_STATION_ID, b.AD_CLIENT_ID, b.AD_ORG_ID,
b.ISACTIVE, b.CREATED, b.CREATEDBY, b.UPDATED, b.UPDATEDBY, b.DOCUMENTNO,
b.C_DOCTYPE_ID, b.REQUESTDATE, b.M_PRODUCT_ID, b.DESCRIPTION, b.DOCACTION,
b.DOCSTATUS, b.PROCESSING, b.PROCESSED, b.ISAPPROVED,
bl.M_BOM_CHANGE_LINE_ID, bl.LINE, bl.M_PRODUCT_ID as M_BOM_PRODUCT_ID, bl.C_UOM_ID,
bl.BOMQTY, bl.DESCRIPTION DESCRIPTION_DTL, p.NAME PRODUCT, pb.NAME AS BOM_NAME
FROM M_BOM_CHANGE b JOIN M_BOM_CHANGE_LINE bl
  ON b.M_BOM_CHANGE_ID = bl.M_BOM_CHANGE_ID LEFT JOIN EM_M_PRODUCT p
  ON b.M_PRODUCT_ID = p.M_PRODUCT_ID LEFT JOIN EM_M_PRODUCT pb
	ON bl.M_PRODUCT_ID = pb.M_PRODUCT_ID;

CREATE TABLE M_BOM_CAHNGE_ORDER(
	`M_BOM_CAHNGE_ORDER_ID`  INT(10),
	`EM_STATION_ID` INT(10) NOT NULL DEFAULT '0',
  `AD_CLIENT_ID` INT(10) NOT NULL,
  `AD_ORG_ID` INT(10) NOT NULL,
  `ISACTIVE` CHAR(1) NOT NULL DEFAULT 'Y',
  `CREATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `CREATEDBY` INT(10) NOT NULL,
  `UPDATED` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `UPDATEDBY` INT(10) NOT NULL,
	`M_BOM_CHANGE_ID` INT(10),
	`M_BOM_CHANGE_LINE_ID` INT(10),
	`REQUESTDATE` DATETIME NOT NULL DEFAULT '0000-00-00 00:00:00',
  `M_PRODUCT_ID` INT(10),
	`M_BOM_PRODUCT_ID` INT(10),
	`C_UOM_ID` INT(10) NOT NULL,
  `BOMQTY` DOUBLE NOT NULL DEFAULT '0',
	`CHANGETYPE` ENUM('ADD','MODIFY','REMOVE') NOT NULL DEFAULT 'ADD',
	CONSTRAINT PRIMARY KEY (`M_BOM_CAHNGE_ORDER_ID`,`EM_STATION_ID`)
 ) ENGINE=InnoDB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;

 CREATE TABLE M_BOM_CAHNGE_ORDER_STATUS(
 	`M_BOM_CAHNGE_ORDER_ID`  INT(10),
 	`EM_STATION_ID` INT(10) NOT NULL DEFAULT '0',
 	CONSTRAINT PRIMARY KEY (`M_BOM_CAHNGE_ORDER_ID`,`EM_STATION_ID`)
  ) ENGINE=InnoDB DEFAULT CHARSET=UTF8 COLLATE=UTF8_UNICODE_CI;


	DROP PROCEDURE IF EXISTS EXECUTE_BOM_CHANGE_ORDER;
	DELIMITER $$
	CREATE PROCEDURE EXECUTE_BOM_CHANGE_ORDER()
	BEGIN
		DECLARE DONE INT DEFAULT FALSE;

		DECLARE BOM_CAHNGE_ORDER_ID INT;
		DECLARE STATION_ID INT;
		DECLARE BOM_CHANGE_ID INT;
		DECLARE BOM_CHANGE_LINE_ID INT;
		DECLARE PRODUCT_ID INT;
		DECLARE BOM_PRODUCT_ID INT;
		DECLARE BOMQ DECIMAL;
		DECLARE CHANGET VARCHAR(10);

		DECLARE BOM_CHNG_ORDR CURSOR FOR
			SELECT o.M_BOM_CAHNGE_ORDER_ID, o.EM_STATION_ID, o.M_BOM_CHANGE_ID,
					o.M_BOM_CHANGE_LINE_ID, o.M_PRODUCT_ID,
					o.M_BOM_PRODUCT_ID, o.BOMQTY, o.CHANGETYPE
			FROM M_BOM_CAHNGE_ORDER o LEFT JOIN M_BOM_CAHNGE_ORDER_STATUS s
				ON o.M_BOM_CAHNGE_ORDER_ID = s.M_BOM_CAHNGE_ORDER_ID
			WHERE s.M_BOM_CAHNGE_ORDER_ID IS NULL;

		DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

		OPEN BOM_CHNG_ORDR;

		READ_LOOP: LOOP
			FETCH BOM_CHNG_ORDR INTO BOM_CAHNGE_ORDER_ID, STATION_ID,
				BOM_CHANGE_ID, BOM_CHANGE_LINE_ID, PRODUCT_ID,
				BOM_PRODUCT_ID, BOMQ, CHANGET;

			IF DONE THEN
				LEAVE READ_LOOP;
			END IF;

			IF CHANGET = "ADD" THEN
				INSERT INTO m_product_bom(M_PRODUCT_BOM_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
							CREATED, CREATEDBY, UPDATED, UPDATEDBY, LINE, M_PRODUCT_ID,
							M_PRODUCTBOM_ID, BOMQTY, BOMTYPE)
					VALUES(
						(SELECT MAX(M_PRODUCT_BOM_ID) + 1 FROM M_PRODUCT_BOM),
						1000000, 0, 'Y', NOW(), 1000000, NOW(), 1000000,
						(SELECT MAX(LINE) + 1 FROM M_PRODUCT_BOM WHERE M_PRODUCT_ID = PRODUCT_ID),
						PRODUCT_ID, BOM_PRODUCT_ID, BOMQ, 'P');

			ELSEIF CHANGET = "MODIFY" THEN
				UPDATE m_product_bom
				SET ISACTIVE = 'Y', BOMQTY = BOMQ
				WHERE M_PRODUCT_ID = PRODUCT_ID AND M_PRODUCTBOM_ID = BOM_PRODUCT_ID;

			ELSEIF CHANGET = "REMOVE" THEN
				DELETE FROM m_product_bom
				WHERE M_PRODUCT_ID = PRODUCT_ID AND M_PRODUCTBOM_ID = BOM_PRODUCT_ID;

			END IF;

			INSERT INTO M_BOM_CAHNGE_ORDER_STATUS VALUES (BOM_CAHNGE_ORDER_ID, STATION_ID);

			END LOOP;

	END; $$
	DELIMITER ;



DROP EVENT IF EXISTS runBomChangeOrderExec;
	DELIMITER $$
	CREATE EVENT IF NOT EXISTS runBomChangeOrderExec
	ON SCHEDULE
		EVERY 60 MINUTE
		DO
			BEGIN
				CALL EXECUTE_BOM_CHANGE_ORDER();

			END;
	$$


ALTER TABLE em_process_access ADD COLUMN `VIEWPRODUCTMAKEUPCHANGE` CHAR(1) NOT NULL DEFAULT 'N',
		ADD COLUMN `CREATEPRODUCTMAKEUPCHANGE` CHAR(1) NOT NULL DEFAULT 'N',
		ADD COLUMN `CONFIRMPRODUCTMAKEUPCHANGE` CHAR(1) NOT NULL DEFAULT 'N';


INSERT INTO `em_ad_sequence` (`AD_SEQUENCE_ID`, `EM_STATION_ID`, `AD_CLIENT_ID`,
	`AD_ORG_ID`, `ISACTIVE`, `CREATED`, `CREATEDBY`, `UPDATED`, `UPDATEDBY`, `NAME`,
	 `DESCRIPTION`, `ISAUTOSEQUENCE`, `INCREMENTNO`, `STARTNO`, `CURRENTNEXT`,
	 `ISTABLEID`, `PREFIX`, `SUFFIX`) VALUES
(1000020, 7, 1000000, 0, 'Y', NOW(), 1000000, NOW(), 1000000, 'M_BOM_CHANGE', 'M_BOM_CHANGE', 'Y', 1, 1000000, 1000000, 'Y', NULL, NULL),
(1000021, 7, 1000000, 0, 'Y', NOW(), 1000000, NOW(), 1000000, 'M_BOM_CHANGE_LINE', 'M_BOM_CHANGE_LINE', 'Y', 1, 1000000, 1000000, 'Y', NULL, NULL),
(1000022, 7, 1000000, 0, 'Y', NOW(), 1000000, NOW(), 1000000, 'M_BOM_CAHNGE_ORDER', 'M_BOM_CAHNGE_ORDER', 'Y', 1, 1000000, 1000000, 'Y', NULL, NULL),
(351000019, 7, 1000000, 0, 'Y', NOW(), 1000000, NOW(), 1000000, 'BOM Change Request', 'BOM Change Request', 'Y', 1, 1000, 1000, 'N', 'HQ-', NULL);


DROP PROCEDURE V;
DELIMITER $$
CREATE PROCEDURE V()
BEGIN
	DECLARE STATION INT(10);
	DECLARE PRE VARCHAR(10);
	DECLARE STARTN INT(10);

	SELECT DISTINCT EM_STATION_ID INTO STATION FROM EM_AD_SEQUENCE WHERE EM_STATION_ID != 7;
	SELECT DISTINCT PREFIX INTO PRE FROM EM_AD_SEQUENCE WHERE EM_STATION_ID != 7 AND ISTABLEID = 'N' AND PREFIX != 'HQ-';
	SELECT DISTINCT MAX(STARTNO) INTO STARTN FROM EM_AD_SEQUENCE WHERE EM_STATION_ID != 7 AND ISTABLEID = 'Y';

	UPDATE `em_ad_sequence` SET EM_STATION_ID = STATION WHERE EM_STATION_ID = 7;
	UPDATE `em_ad_sequence` SET PREFIX = PRE WHERE ISTABLEID = 'N' AND PREFIX = 'HQ-';
	UPDATE `em_ad_sequence` SET STARTNO = STARTN, CURRENTNEXT = STARTN WHERE AD_SEQUENCE_ID IN (1000020,1000021,1000022);

END;
$$
CALL V();
DROP PROCEDURE V;
