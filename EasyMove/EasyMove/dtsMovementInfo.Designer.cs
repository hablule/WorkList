//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9151
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EasyMove {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dtsMovementInfo")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dtsMovementInfo : global::System.Data.DataSet {
        
        private dtDocumentDetailDataTable tabledtDocumentDetail;
        
        private dtDocumentSummaryDataTable tabledtDocumentSummary;
        
        private dtSalesOrderDetailDataTable tabledtSalesOrderDetail;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dtsMovementInfo() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dtsMovementInfo(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtDocumentDetail"] != null)) {
                    base.Tables.Add(new dtDocumentDetailDataTable(ds.Tables["dtDocumentDetail"]));
                }
                if ((ds.Tables["dtDocumentSummary"] != null)) {
                    base.Tables.Add(new dtDocumentSummaryDataTable(ds.Tables["dtDocumentSummary"]));
                }
                if ((ds.Tables["dtSalesOrderDetail"] != null)) {
                    base.Tables.Add(new dtSalesOrderDetailDataTable(ds.Tables["dtSalesOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDocumentDetailDataTable dtDocumentDetail {
            get {
                return this.tabledtDocumentDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDocumentSummaryDataTable dtDocumentSummary {
            get {
                return this.tabledtDocumentSummary;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtSalesOrderDetailDataTable dtSalesOrderDetail {
            get {
                return this.tabledtSalesOrderDetail;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dtsMovementInfo cln = ((dtsMovementInfo)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtDocumentDetail"] != null)) {
                    base.Tables.Add(new dtDocumentDetailDataTable(ds.Tables["dtDocumentDetail"]));
                }
                if ((ds.Tables["dtDocumentSummary"] != null)) {
                    base.Tables.Add(new dtDocumentSummaryDataTable(ds.Tables["dtDocumentSummary"]));
                }
                if ((ds.Tables["dtSalesOrderDetail"] != null)) {
                    base.Tables.Add(new dtSalesOrderDetailDataTable(ds.Tables["dtSalesOrderDetail"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtDocumentDetail = ((dtDocumentDetailDataTable)(base.Tables["dtDocumentDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtDocumentDetail != null)) {
                    this.tabledtDocumentDetail.InitVars();
                }
            }
            this.tabledtDocumentSummary = ((dtDocumentSummaryDataTable)(base.Tables["dtDocumentSummary"]));
            if ((initTable == true)) {
                if ((this.tabledtDocumentSummary != null)) {
                    this.tabledtDocumentSummary.InitVars();
                }
            }
            this.tabledtSalesOrderDetail = ((dtSalesOrderDetailDataTable)(base.Tables["dtSalesOrderDetail"]));
            if ((initTable == true)) {
                if ((this.tabledtSalesOrderDetail != null)) {
                    this.tabledtSalesOrderDetail.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dtsMovementInfo";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dtsMovementInfo.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtDocumentDetail = new dtDocumentDetailDataTable();
            base.Tables.Add(this.tabledtDocumentDetail);
            this.tabledtDocumentSummary = new dtDocumentSummaryDataTable();
            base.Tables.Add(this.tabledtDocumentSummary);
            this.tabledtSalesOrderDetail = new dtSalesOrderDetailDataTable();
            base.Tables.Add(this.tabledtSalesOrderDetail);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDocumentDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDocumentSummary() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtSalesOrderDetail() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dtsMovementInfo ds = new dtsMovementInfo();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtDocumentDetailRowChangeEventHandler(object sender, dtDocumentDetailRowChangeEvent e);
        
        public delegate void dtDocumentSummaryRowChangeEventHandler(object sender, dtDocumentSummaryRowChangeEvent e);
        
        public delegate void dtSalesOrderDetailRowChangeEventHandler(object sender, dtSalesOrderDetailRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDocumentDetailDataTable : global::System.Data.TypedTableBase<dtDocumentDetailRow> {
            
            private global::System.Data.DataColumn _columnSn_;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnPendingQty;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnRemark;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columnDocDetail_Detail;
            
            private global::System.Data.DataColumn columnOrderedQty;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailDataTable() {
                this.TableName = "dtDocumentDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocumentDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDocumentDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn _Sn_Column {
                get {
                    return this._columnSn_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingQtyColumn {
                get {
                    return this.columnPendingQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemarkColumn {
                get {
                    return this.columnRemark;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocDetail_DetailColumn {
                get {
                    return this.columnDocDetail_Detail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderedQtyColumn {
                get {
                    return this.columnOrderedQty;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRow this[int index] {
                get {
                    return ((dtDocumentDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtDocumentDetailRowChangeEventHandler dtDocumentDetailRowChanging;
            
            public event dtDocumentDetailRowChangeEventHandler dtDocumentDetailRowChanged;
            
            public event dtDocumentDetailRowChangeEventHandler dtDocumentDetailRowDeleting;
            
            public event dtDocumentDetailRowChangeEventHandler dtDocumentDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDocumentDetailRow(dtDocumentDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRow AdddtDocumentDetailRow(string _Sn_, string Description, string Unit, string PendingQty, string Quantity, string Remark, string comment, string DocDetail_Detail, decimal OrderedQty) {
                dtDocumentDetailRow rowdtDocumentDetailRow = ((dtDocumentDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        _Sn_,
                        Description,
                        Unit,
                        PendingQty,
                        Quantity,
                        Remark,
                        comment,
                        DocDetail_Detail,
                        OrderedQty};
                rowdtDocumentDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDocumentDetailRow);
                return rowdtDocumentDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRow FindBy_Sn_(string _Sn_) {
                return ((dtDocumentDetailRow)(this.Rows.Find(new object[] {
                            _Sn_})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDocumentDetailDataTable cln = ((dtDocumentDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDocumentDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this._columnSn_ = base.Columns["Sn."];
                this.columnDescription = base.Columns["Description"];
                this.columnUnit = base.Columns["Unit"];
                this.columnPendingQty = base.Columns["PendingQty"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnRemark = base.Columns["Remark"];
                this.columncomment = base.Columns["comment"];
                this.columnDocDetail_Detail = base.Columns["DocDetail_Detail"];
                this.columnOrderedQty = base.Columns["OrderedQty"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this._columnSn_ = new global::System.Data.DataColumn("Sn.", typeof(string), null, global::System.Data.MappingType.Element);
                this._columnSn_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSn_");
                this._columnSn_.ExtendedProperties.Add("Generator_UserColumnName", "Sn.");
                base.Columns.Add(this._columnSn_);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnPendingQty = new global::System.Data.DataColumn("PendingQty", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPendingQty);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnRemark = new global::System.Data.DataColumn("Remark", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemark);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columnDocDetail_Detail = new global::System.Data.DataColumn("DocDetail_Detail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocDetail_Detail);
                this.columnOrderedQty = new global::System.Data.DataColumn("OrderedQty", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderedQty);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this._columnSn_}, true));
                this._columnSn_.AllowDBNull = false;
                this._columnSn_.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRow NewdtDocumentDetailRow() {
                return ((dtDocumentDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDocumentDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDocumentDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDocumentDetailRowChanged != null)) {
                    this.dtDocumentDetailRowChanged(this, new dtDocumentDetailRowChangeEvent(((dtDocumentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDocumentDetailRowChanging != null)) {
                    this.dtDocumentDetailRowChanging(this, new dtDocumentDetailRowChangeEvent(((dtDocumentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDocumentDetailRowDeleted != null)) {
                    this.dtDocumentDetailRowDeleted(this, new dtDocumentDetailRowChangeEvent(((dtDocumentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDocumentDetailRowDeleting != null)) {
                    this.dtDocumentDetailRowDeleting(this, new dtDocumentDetailRowChangeEvent(((dtDocumentDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDocumentDetailRow(dtDocumentDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsMovementInfo ds = new dtsMovementInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDocumentDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDocumentSummaryDataTable : global::System.Data.TypedTableBase<dtDocumentSummaryRow> {
            
            private global::System.Data.DataColumn columnMovementId;
            
            private global::System.Data.DataColumn columnDocumentName;
            
            private global::System.Data.DataColumn columnStoreFrom;
            
            private global::System.Data.DataColumn columnStoreTo;
            
            private global::System.Data.DataColumn columnRequestNumber;
            
            private global::System.Data.DataColumn columnsupplierInvNo;
            
            private global::System.Data.DataColumn columnSalesOrderNo;
            
            private global::System.Data.DataColumn columnDocumentNumber;
            
            private global::System.Data.DataColumn columnDocumentDate;
            
            private global::System.Data.DataColumn columnDocumentNote;
            
            private global::System.Data.DataColumn columnPreparedBy;
            
            private global::System.Data.DataColumn columnCheckdBy;
            
            private global::System.Data.DataColumn columnApprovedBy;
            
            private global::System.Data.DataColumn columnrePrint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryDataTable() {
                this.TableName = "dtDocumentSummary";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocumentSummaryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDocumentSummaryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MovementIdColumn {
                get {
                    return this.columnMovementId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNameColumn {
                get {
                    return this.columnDocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreFromColumn {
                get {
                    return this.columnStoreFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreToColumn {
                get {
                    return this.columnStoreTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestNumberColumn {
                get {
                    return this.columnRequestNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn supplierInvNoColumn {
                get {
                    return this.columnsupplierInvNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesOrderNoColumn {
                get {
                    return this.columnSalesOrderNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNumberColumn {
                get {
                    return this.columnDocumentNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentDateColumn {
                get {
                    return this.columnDocumentDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNoteColumn {
                get {
                    return this.columnDocumentNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PreparedByColumn {
                get {
                    return this.columnPreparedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckdByColumn {
                get {
                    return this.columnCheckdBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ApprovedByColumn {
                get {
                    return this.columnApprovedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rePrintColumn {
                get {
                    return this.columnrePrint;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRow this[int index] {
                get {
                    return ((dtDocumentSummaryRow)(this.Rows[index]));
                }
            }
            
            public event dtDocumentSummaryRowChangeEventHandler dtDocumentSummaryRowChanging;
            
            public event dtDocumentSummaryRowChangeEventHandler dtDocumentSummaryRowChanged;
            
            public event dtDocumentSummaryRowChangeEventHandler dtDocumentSummaryRowDeleting;
            
            public event dtDocumentSummaryRowChangeEventHandler dtDocumentSummaryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDocumentSummaryRow(dtDocumentSummaryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRow AdddtDocumentSummaryRow(int MovementId, string DocumentName, string StoreFrom, string StoreTo, string RequestNumber, string supplierInvNo, string SalesOrderNo, string DocumentNumber, System.DateTime DocumentDate, string DocumentNote, string PreparedBy, string CheckdBy, string ApprovedBy, string rePrint) {
                dtDocumentSummaryRow rowdtDocumentSummaryRow = ((dtDocumentSummaryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MovementId,
                        DocumentName,
                        StoreFrom,
                        StoreTo,
                        RequestNumber,
                        supplierInvNo,
                        SalesOrderNo,
                        DocumentNumber,
                        DocumentDate,
                        DocumentNote,
                        PreparedBy,
                        CheckdBy,
                        ApprovedBy,
                        rePrint};
                rowdtDocumentSummaryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDocumentSummaryRow);
                return rowdtDocumentSummaryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRow FindByMovementId(int MovementId) {
                return ((dtDocumentSummaryRow)(this.Rows.Find(new object[] {
                            MovementId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDocumentSummaryDataTable cln = ((dtDocumentSummaryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDocumentSummaryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMovementId = base.Columns["MovementId"];
                this.columnDocumentName = base.Columns["DocumentName"];
                this.columnStoreFrom = base.Columns["StoreFrom"];
                this.columnStoreTo = base.Columns["StoreTo"];
                this.columnRequestNumber = base.Columns["RequestNumber"];
                this.columnsupplierInvNo = base.Columns["supplierInvNo"];
                this.columnSalesOrderNo = base.Columns["SalesOrderNo"];
                this.columnDocumentNumber = base.Columns["DocumentNumber"];
                this.columnDocumentDate = base.Columns["DocumentDate"];
                this.columnDocumentNote = base.Columns["DocumentNote"];
                this.columnPreparedBy = base.Columns["PreparedBy"];
                this.columnCheckdBy = base.Columns["CheckdBy"];
                this.columnApprovedBy = base.Columns["ApprovedBy"];
                this.columnrePrint = base.Columns["rePrint"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMovementId = new global::System.Data.DataColumn("MovementId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMovementId);
                this.columnDocumentName = new global::System.Data.DataColumn("DocumentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentName);
                this.columnStoreFrom = new global::System.Data.DataColumn("StoreFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreFrom);
                this.columnStoreTo = new global::System.Data.DataColumn("StoreTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStoreTo);
                this.columnRequestNumber = new global::System.Data.DataColumn("RequestNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestNumber);
                this.columnsupplierInvNo = new global::System.Data.DataColumn("supplierInvNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsupplierInvNo);
                this.columnSalesOrderNo = new global::System.Data.DataColumn("SalesOrderNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesOrderNo);
                this.columnDocumentNumber = new global::System.Data.DataColumn("DocumentNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNumber);
                this.columnDocumentDate = new global::System.Data.DataColumn("DocumentDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentDate);
                this.columnDocumentNote = new global::System.Data.DataColumn("DocumentNote", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNote);
                this.columnPreparedBy = new global::System.Data.DataColumn("PreparedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreparedBy);
                this.columnCheckdBy = new global::System.Data.DataColumn("CheckdBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckdBy);
                this.columnApprovedBy = new global::System.Data.DataColumn("ApprovedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApprovedBy);
                this.columnrePrint = new global::System.Data.DataColumn("rePrint", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrePrint);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnMovementId}, true));
                this.columnMovementId.AllowDBNull = false;
                this.columnMovementId.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRow NewdtDocumentSummaryRow() {
                return ((dtDocumentSummaryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDocumentSummaryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDocumentSummaryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDocumentSummaryRowChanged != null)) {
                    this.dtDocumentSummaryRowChanged(this, new dtDocumentSummaryRowChangeEvent(((dtDocumentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDocumentSummaryRowChanging != null)) {
                    this.dtDocumentSummaryRowChanging(this, new dtDocumentSummaryRowChangeEvent(((dtDocumentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDocumentSummaryRowDeleted != null)) {
                    this.dtDocumentSummaryRowDeleted(this, new dtDocumentSummaryRowChangeEvent(((dtDocumentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDocumentSummaryRowDeleting != null)) {
                    this.dtDocumentSummaryRowDeleting(this, new dtDocumentSummaryRowChangeEvent(((dtDocumentSummaryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDocumentSummaryRow(dtDocumentSummaryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsMovementInfo ds = new dtsMovementInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDocumentSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtSalesOrderDetailDataTable : global::System.Data.TypedTableBase<dtSalesOrderDetailRow> {
            
            private global::System.Data.DataColumn columnOrderID;
            
            private global::System.Data.DataColumn columnOrderLineID;
            
            private global::System.Data.DataColumn columnDeliveryOrder;
            
            private global::System.Data.DataColumn columnStore;
            
            private global::System.Data.DataColumn columnSalesRef;
            
            private global::System.Data.DataColumn columnDateOrdered;
            
            private global::System.Data.DataColumn columnCustomer;
            
            private global::System.Data.DataColumn columnLine;
            
            private global::System.Data.DataColumn columnProduct;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnOrdered;
            
            private global::System.Data.DataColumn columnDelivered;
            
            private global::System.Data.DataColumn columnPending;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailDataTable() {
                this.TableName = "dtSalesOrderDetail";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSalesOrderDetailDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtSalesOrderDetailDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderIDColumn {
                get {
                    return this.columnOrderID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderLineIDColumn {
                get {
                    return this.columnOrderLineID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveryOrderColumn {
                get {
                    return this.columnDeliveryOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StoreColumn {
                get {
                    return this.columnStore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesRefColumn {
                get {
                    return this.columnSalesRef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateOrderedColumn {
                get {
                    return this.columnDateOrdered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerColumn {
                get {
                    return this.columnCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LineColumn {
                get {
                    return this.columnLine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProductColumn {
                get {
                    return this.columnProduct;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrderedColumn {
                get {
                    return this.columnOrdered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeliveredColumn {
                get {
                    return this.columnDelivered;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PendingColumn {
                get {
                    return this.columnPending;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRow this[int index] {
                get {
                    return ((dtSalesOrderDetailRow)(this.Rows[index]));
                }
            }
            
            public event dtSalesOrderDetailRowChangeEventHandler dtSalesOrderDetailRowChanging;
            
            public event dtSalesOrderDetailRowChangeEventHandler dtSalesOrderDetailRowChanged;
            
            public event dtSalesOrderDetailRowChangeEventHandler dtSalesOrderDetailRowDeleting;
            
            public event dtSalesOrderDetailRowChangeEventHandler dtSalesOrderDetailRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtSalesOrderDetailRow(dtSalesOrderDetailRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRow AdddtSalesOrderDetailRow(int OrderID, int OrderLineID, string DeliveryOrder, string Store, string SalesRef, System.DateTime DateOrdered, string Customer, string Line, string Product, string Unit, decimal Ordered, decimal Delivered, decimal Pending) {
                dtSalesOrderDetailRow rowdtSalesOrderDetailRow = ((dtSalesOrderDetailRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        OrderID,
                        OrderLineID,
                        DeliveryOrder,
                        Store,
                        SalesRef,
                        DateOrdered,
                        Customer,
                        Line,
                        Product,
                        Unit,
                        Ordered,
                        Delivered,
                        Pending};
                rowdtSalesOrderDetailRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtSalesOrderDetailRow);
                return rowdtSalesOrderDetailRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRow FindByOrderLineID(int OrderLineID) {
                return ((dtSalesOrderDetailRow)(this.Rows.Find(new object[] {
                            OrderLineID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtSalesOrderDetailDataTable cln = ((dtSalesOrderDetailDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtSalesOrderDetailDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOrderID = base.Columns["OrderID"];
                this.columnOrderLineID = base.Columns["OrderLineID"];
                this.columnDeliveryOrder = base.Columns["DeliveryOrder"];
                this.columnStore = base.Columns["Store"];
                this.columnSalesRef = base.Columns["SalesRef"];
                this.columnDateOrdered = base.Columns["DateOrdered"];
                this.columnCustomer = base.Columns["Customer"];
                this.columnLine = base.Columns["Line"];
                this.columnProduct = base.Columns["Product"];
                this.columnUnit = base.Columns["Unit"];
                this.columnOrdered = base.Columns["Ordered"];
                this.columnDelivered = base.Columns["Delivered"];
                this.columnPending = base.Columns["Pending"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOrderID = new global::System.Data.DataColumn("OrderID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderID);
                this.columnOrderLineID = new global::System.Data.DataColumn("OrderLineID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrderLineID);
                this.columnDeliveryOrder = new global::System.Data.DataColumn("DeliveryOrder", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeliveryOrder);
                this.columnStore = new global::System.Data.DataColumn("Store", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStore);
                this.columnSalesRef = new global::System.Data.DataColumn("SalesRef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesRef);
                this.columnDateOrdered = new global::System.Data.DataColumn("DateOrdered", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateOrdered);
                this.columnCustomer = new global::System.Data.DataColumn("Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer);
                this.columnLine = new global::System.Data.DataColumn("Line", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLine);
                this.columnProduct = new global::System.Data.DataColumn("Product", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProduct);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnOrdered = new global::System.Data.DataColumn("Ordered", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrdered);
                this.columnDelivered = new global::System.Data.DataColumn("Delivered", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDelivered);
                this.columnPending = new global::System.Data.DataColumn("Pending", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPending);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOrderLineID}, true));
                this.columnOrderLineID.AllowDBNull = false;
                this.columnOrderLineID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRow NewdtSalesOrderDetailRow() {
                return ((dtSalesOrderDetailRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtSalesOrderDetailRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtSalesOrderDetailRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtSalesOrderDetailRowChanged != null)) {
                    this.dtSalesOrderDetailRowChanged(this, new dtSalesOrderDetailRowChangeEvent(((dtSalesOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtSalesOrderDetailRowChanging != null)) {
                    this.dtSalesOrderDetailRowChanging(this, new dtSalesOrderDetailRowChangeEvent(((dtSalesOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtSalesOrderDetailRowDeleted != null)) {
                    this.dtSalesOrderDetailRowDeleted(this, new dtSalesOrderDetailRowChangeEvent(((dtSalesOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtSalesOrderDetailRowDeleting != null)) {
                    this.dtSalesOrderDetailRowDeleting(this, new dtSalesOrderDetailRowChangeEvent(((dtSalesOrderDetailRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtSalesOrderDetailRow(dtSalesOrderDetailRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsMovementInfo ds = new dtsMovementInfo();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtSalesOrderDetailDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDocumentDetailRow : global::System.Data.DataRow {
            
            private dtDocumentDetailDataTable tabledtDocumentDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocumentDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDocumentDetail = ((dtDocumentDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string _Sn_ {
                get {
                    return ((string)(this[this.tabledtDocumentDetail._Sn_Column]));
                }
                set {
                    this[this.tabledtDocumentDetail._Sn_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PendingQty {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.PendingQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PendingQty\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.PendingQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Remark {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.RemarkColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Remark\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.RemarkColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocDetail_Detail {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentDetail.DocDetail_DetailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocDetail_Detail\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.DocDetail_DetailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OrderedQty {
                get {
                    try {
                        return ((decimal)(this[this.tabledtDocumentDetail.OrderedQtyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderedQty\' in table \'dtDocumentDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentDetail.OrderedQtyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tabledtDocumentDetail.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tabledtDocumentDetail.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledtDocumentDetail.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledtDocumentDetail.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingQtyNull() {
                return this.IsNull(this.tabledtDocumentDetail.PendingQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingQtyNull() {
                this[this.tabledtDocumentDetail.PendingQtyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQuantityNull() {
                return this.IsNull(this.tabledtDocumentDetail.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQuantityNull() {
                this[this.tabledtDocumentDetail.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemarkNull() {
                return this.IsNull(this.tabledtDocumentDetail.RemarkColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemarkNull() {
                this[this.tabledtDocumentDetail.RemarkColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tabledtDocumentDetail.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tabledtDocumentDetail.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocDetail_DetailNull() {
                return this.IsNull(this.tabledtDocumentDetail.DocDetail_DetailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocDetail_DetailNull() {
                this[this.tabledtDocumentDetail.DocDetail_DetailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderedQtyNull() {
                return this.IsNull(this.tabledtDocumentDetail.OrderedQtyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderedQtyNull() {
                this[this.tabledtDocumentDetail.OrderedQtyColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDocumentSummaryRow : global::System.Data.DataRow {
            
            private dtDocumentSummaryDataTable tabledtDocumentSummary;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocumentSummaryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDocumentSummary = ((dtDocumentSummaryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MovementId {
                get {
                    return ((int)(this[this.tabledtDocumentSummary.MovementIdColumn]));
                }
                set {
                    this[this.tabledtDocumentSummary.MovementIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentName {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.DocumentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentName\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.DocumentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreFrom {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.StoreFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreFrom\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.StoreFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StoreTo {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.StoreToColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StoreTo\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.StoreToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.RequestNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestNumber\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.RequestNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string supplierInvNo {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.supplierInvNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'supplierInvNo\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.supplierInvNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesOrderNo {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.SalesOrderNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesOrderNo\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.SalesOrderNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNumber {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.DocumentNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNumber\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.DocumentNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DocumentDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtDocumentSummary.DocumentDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentDate\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.DocumentDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNote {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.DocumentNoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentNote\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.DocumentNoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PreparedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.PreparedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PreparedBy\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.PreparedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckdBy {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.CheckdByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckdBy\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.CheckdByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ApprovedBy {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.ApprovedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ApprovedBy\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.ApprovedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rePrint {
                get {
                    try {
                        return ((string)(this[this.tabledtDocumentSummary.rePrintColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rePrint\' in table \'dtDocumentSummary\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocumentSummary.rePrintColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNameNull() {
                return this.IsNull(this.tabledtDocumentSummary.DocumentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNameNull() {
                this[this.tabledtDocumentSummary.DocumentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreFromNull() {
                return this.IsNull(this.tabledtDocumentSummary.StoreFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreFromNull() {
                this[this.tabledtDocumentSummary.StoreFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreToNull() {
                return this.IsNull(this.tabledtDocumentSummary.StoreToColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreToNull() {
                this[this.tabledtDocumentSummary.StoreToColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestNumberNull() {
                return this.IsNull(this.tabledtDocumentSummary.RequestNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestNumberNull() {
                this[this.tabledtDocumentSummary.RequestNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssupplierInvNoNull() {
                return this.IsNull(this.tabledtDocumentSummary.supplierInvNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsupplierInvNoNull() {
                this[this.tabledtDocumentSummary.supplierInvNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesOrderNoNull() {
                return this.IsNull(this.tabledtDocumentSummary.SalesOrderNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesOrderNoNull() {
                this[this.tabledtDocumentSummary.SalesOrderNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNumberNull() {
                return this.IsNull(this.tabledtDocumentSummary.DocumentNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNumberNull() {
                this[this.tabledtDocumentSummary.DocumentNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentDateNull() {
                return this.IsNull(this.tabledtDocumentSummary.DocumentDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentDateNull() {
                this[this.tabledtDocumentSummary.DocumentDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNoteNull() {
                return this.IsNull(this.tabledtDocumentSummary.DocumentNoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNoteNull() {
                this[this.tabledtDocumentSummary.DocumentNoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPreparedByNull() {
                return this.IsNull(this.tabledtDocumentSummary.PreparedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPreparedByNull() {
                this[this.tabledtDocumentSummary.PreparedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckdByNull() {
                return this.IsNull(this.tabledtDocumentSummary.CheckdByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckdByNull() {
                this[this.tabledtDocumentSummary.CheckdByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApprovedByNull() {
                return this.IsNull(this.tabledtDocumentSummary.ApprovedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetApprovedByNull() {
                this[this.tabledtDocumentSummary.ApprovedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrePrintNull() {
                return this.IsNull(this.tabledtDocumentSummary.rePrintColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrePrintNull() {
                this[this.tabledtDocumentSummary.rePrintColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtSalesOrderDetailRow : global::System.Data.DataRow {
            
            private dtSalesOrderDetailDataTable tabledtSalesOrderDetail;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtSalesOrderDetailRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtSalesOrderDetail = ((dtSalesOrderDetailDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderID {
                get {
                    try {
                        return ((int)(this[this.tabledtSalesOrderDetail.OrderIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OrderID\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.OrderIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OrderLineID {
                get {
                    return ((int)(this[this.tabledtSalesOrderDetail.OrderLineIDColumn]));
                }
                set {
                    this[this.tabledtSalesOrderDetail.OrderLineIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeliveryOrder {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.DeliveryOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeliveryOrder\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.DeliveryOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Store {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.StoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Store\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.StoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesRef {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.SalesRefColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesRef\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.SalesRefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DateOrdered {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtSalesOrderDetail.DateOrderedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateOrdered\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.DateOrderedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Customer {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Line {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.LineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Line\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.LineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Product {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.ProductColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Product\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.ProductColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    try {
                        return ((string)(this[this.tabledtSalesOrderDetail.UnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unit\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Ordered {
                get {
                    try {
                        return ((decimal)(this[this.tabledtSalesOrderDetail.OrderedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ordered\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.OrderedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Delivered {
                get {
                    try {
                        return ((decimal)(this[this.tabledtSalesOrderDetail.DeliveredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Delivered\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.DeliveredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Pending {
                get {
                    try {
                        return ((decimal)(this[this.tabledtSalesOrderDetail.PendingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Pending\' in table \'dtSalesOrderDetail\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtSalesOrderDetail.PendingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderIDNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.OrderIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderIDNull() {
                this[this.tabledtSalesOrderDetail.OrderIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveryOrderNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.DeliveryOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveryOrderNull() {
                this[this.tabledtSalesOrderDetail.DeliveryOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStoreNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.StoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStoreNull() {
                this[this.tabledtSalesOrderDetail.StoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesRefNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.SalesRefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesRefNull() {
                this[this.tabledtSalesOrderDetail.SalesRefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateOrderedNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.DateOrderedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateOrderedNull() {
                this[this.tabledtSalesOrderDetail.DateOrderedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNull() {
                this[this.tabledtSalesOrderDetail.CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLineNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.LineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLineNull() {
                this[this.tabledtSalesOrderDetail.LineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProductNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.ProductColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProductNull() {
                this[this.tabledtSalesOrderDetail.ProductColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tabledtSalesOrderDetail.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrderedNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.OrderedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrderedNull() {
                this[this.tabledtSalesOrderDetail.OrderedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeliveredNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.DeliveredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeliveredNull() {
                this[this.tabledtSalesOrderDetail.DeliveredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPendingNull() {
                return this.IsNull(this.tabledtSalesOrderDetail.PendingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPendingNull() {
                this[this.tabledtSalesOrderDetail.PendingColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDocumentDetailRowChangeEvent : global::System.EventArgs {
            
            private dtDocumentDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRowChangeEvent(dtDocumentDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDocumentSummaryRowChangeEvent : global::System.EventArgs {
            
            private dtDocumentSummaryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRowChangeEvent(dtDocumentSummaryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocumentSummaryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtSalesOrderDetailRowChangeEvent : global::System.EventArgs {
            
            private dtSalesOrderDetailRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRowChangeEvent(dtSalesOrderDetailRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtSalesOrderDetailRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591