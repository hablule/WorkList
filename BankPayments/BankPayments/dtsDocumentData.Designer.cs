//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BankPayments {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dtsDocumentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dtsDocumentData : global::System.Data.DataSet {
        
        private dtPaymentVoucherDataTable tabledtPaymentVoucher;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dtsDocumentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dtsDocumentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtPaymentVoucher"] != null)) {
                    base.Tables.Add(new dtPaymentVoucherDataTable(ds.Tables["dtPaymentVoucher"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtPaymentVoucherDataTable dtPaymentVoucher {
            get {
                return this.tabledtPaymentVoucher;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dtsDocumentData cln = ((dtsDocumentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtPaymentVoucher"] != null)) {
                    base.Tables.Add(new dtPaymentVoucherDataTable(ds.Tables["dtPaymentVoucher"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtPaymentVoucher = ((dtPaymentVoucherDataTable)(base.Tables["dtPaymentVoucher"]));
            if ((initTable == true)) {
                if ((this.tabledtPaymentVoucher != null)) {
                    this.tabledtPaymentVoucher.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dtsDocumentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dtsDocumentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtPaymentVoucher = new dtPaymentVoucherDataTable();
            base.Tables.Add(this.tabledtPaymentVoucher);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtPaymentVoucher() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dtsDocumentData ds = new dtsDocumentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtPaymentVoucherRowChangeEventHandler(object sender, dtPaymentVoucherRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtPaymentVoucherDataTable : global::System.Data.TypedTableBase<dtPaymentVoucherRow> {
            
            private global::System.Data.DataColumn columnC_BANKCHECK_ID;
            
            private global::System.Data.DataColumn columnDOCUMENTNO;
            
            private global::System.Data.DataColumn columnDATE;
            
            private global::System.Data.DataColumn columnPAYEE;
            
            private global::System.Data.DataColumn columnAMOUNT;
            
            private global::System.Data.DataColumn columnAMOUNTINWORD;
            
            private global::System.Data.DataColumn columnPURPOSE;
            
            private global::System.Data.DataColumn columnCOMMENT;
            
            private global::System.Data.DataColumn columnCHECKNO;
            
            private global::System.Data.DataColumn columnBANK;
            
            private global::System.Data.DataColumn columnACCOUNTNO;
            
            private global::System.Data.DataColumn columnPREPAREDBY;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherDataTable() {
                this.TableName = "dtPaymentVoucher";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtPaymentVoucherDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtPaymentVoucherDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_BANKCHECK_IDColumn {
                get {
                    return this.columnC_BANKCHECK_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENTNOColumn {
                get {
                    return this.columnDOCUMENTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DATEColumn {
                get {
                    return this.columnDATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PAYEEColumn {
                get {
                    return this.columnPAYEE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTColumn {
                get {
                    return this.columnAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTINWORDColumn {
                get {
                    return this.columnAMOUNTINWORD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PURPOSEColumn {
                get {
                    return this.columnPURPOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn COMMENTColumn {
                get {
                    return this.columnCOMMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHECKNOColumn {
                get {
                    return this.columnCHECKNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BANKColumn {
                get {
                    return this.columnBANK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACCOUNTNOColumn {
                get {
                    return this.columnACCOUNTNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREPAREDBYColumn {
                get {
                    return this.columnPREPAREDBY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherRow this[int index] {
                get {
                    return ((dtPaymentVoucherRow)(this.Rows[index]));
                }
            }
            
            public event dtPaymentVoucherRowChangeEventHandler dtPaymentVoucherRowChanging;
            
            public event dtPaymentVoucherRowChangeEventHandler dtPaymentVoucherRowChanged;
            
            public event dtPaymentVoucherRowChangeEventHandler dtPaymentVoucherRowDeleting;
            
            public event dtPaymentVoucherRowChangeEventHandler dtPaymentVoucherRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtPaymentVoucherRow(dtPaymentVoucherRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherRow AdddtPaymentVoucherRow(string C_BANKCHECK_ID, string DOCUMENTNO, System.DateTime DATE, string PAYEE, decimal AMOUNT, string AMOUNTINWORD, string PURPOSE, string COMMENT, string CHECKNO, string BANK, string ACCOUNTNO, string PREPAREDBY) {
                dtPaymentVoucherRow rowdtPaymentVoucherRow = ((dtPaymentVoucherRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        C_BANKCHECK_ID,
                        DOCUMENTNO,
                        DATE,
                        PAYEE,
                        AMOUNT,
                        AMOUNTINWORD,
                        PURPOSE,
                        COMMENT,
                        CHECKNO,
                        BANK,
                        ACCOUNTNO,
                        PREPAREDBY};
                rowdtPaymentVoucherRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtPaymentVoucherRow);
                return rowdtPaymentVoucherRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtPaymentVoucherDataTable cln = ((dtPaymentVoucherDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtPaymentVoucherDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnC_BANKCHECK_ID = base.Columns["C_BANKCHECK_ID"];
                this.columnDOCUMENTNO = base.Columns["DOCUMENTNO"];
                this.columnDATE = base.Columns["DATE"];
                this.columnPAYEE = base.Columns["PAYEE"];
                this.columnAMOUNT = base.Columns["AMOUNT"];
                this.columnAMOUNTINWORD = base.Columns["AMOUNTINWORD"];
                this.columnPURPOSE = base.Columns["PURPOSE"];
                this.columnCOMMENT = base.Columns["COMMENT"];
                this.columnCHECKNO = base.Columns["CHECKNO"];
                this.columnBANK = base.Columns["BANK"];
                this.columnACCOUNTNO = base.Columns["ACCOUNTNO"];
                this.columnPREPAREDBY = base.Columns["PREPAREDBY"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnC_BANKCHECK_ID = new global::System.Data.DataColumn("C_BANKCHECK_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_BANKCHECK_ID);
                this.columnDOCUMENTNO = new global::System.Data.DataColumn("DOCUMENTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENTNO);
                this.columnDATE = new global::System.Data.DataColumn("DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDATE);
                this.columnPAYEE = new global::System.Data.DataColumn("PAYEE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPAYEE);
                this.columnAMOUNT = new global::System.Data.DataColumn("AMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNT);
                this.columnAMOUNTINWORD = new global::System.Data.DataColumn("AMOUNTINWORD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNTINWORD);
                this.columnPURPOSE = new global::System.Data.DataColumn("PURPOSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPURPOSE);
                this.columnCOMMENT = new global::System.Data.DataColumn("COMMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCOMMENT);
                this.columnCHECKNO = new global::System.Data.DataColumn("CHECKNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHECKNO);
                this.columnBANK = new global::System.Data.DataColumn("BANK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBANK);
                this.columnACCOUNTNO = new global::System.Data.DataColumn("ACCOUNTNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACCOUNTNO);
                this.columnPREPAREDBY = new global::System.Data.DataColumn("PREPAREDBY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREPAREDBY);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherRow NewdtPaymentVoucherRow() {
                return ((dtPaymentVoucherRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtPaymentVoucherRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtPaymentVoucherRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtPaymentVoucherRowChanged != null)) {
                    this.dtPaymentVoucherRowChanged(this, new dtPaymentVoucherRowChangeEvent(((dtPaymentVoucherRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtPaymentVoucherRowChanging != null)) {
                    this.dtPaymentVoucherRowChanging(this, new dtPaymentVoucherRowChangeEvent(((dtPaymentVoucherRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtPaymentVoucherRowDeleted != null)) {
                    this.dtPaymentVoucherRowDeleted(this, new dtPaymentVoucherRowChangeEvent(((dtPaymentVoucherRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtPaymentVoucherRowDeleting != null)) {
                    this.dtPaymentVoucherRowDeleting(this, new dtPaymentVoucherRowChangeEvent(((dtPaymentVoucherRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtPaymentVoucherRow(dtPaymentVoucherRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsDocumentData ds = new dtsDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtPaymentVoucherDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtPaymentVoucherRow : global::System.Data.DataRow {
            
            private dtPaymentVoucherDataTable tabledtPaymentVoucher;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtPaymentVoucherRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtPaymentVoucher = ((dtPaymentVoucherDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_BANKCHECK_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.C_BANKCHECK_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_BANKCHECK_ID\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.C_BANKCHECK_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.DOCUMENTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENTNO\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.DOCUMENTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtPaymentVoucher.DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DATE\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PAYEE {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.PAYEEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PAYEE\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.PAYEEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtPaymentVoucher.AMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNT\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.AMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AMOUNTINWORD {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.AMOUNTINWORDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNTINWORD\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.AMOUNTINWORDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PURPOSE {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.PURPOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PURPOSE\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.PURPOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string COMMENT {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.COMMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'COMMENT\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.COMMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHECKNO {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.CHECKNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHECKNO\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.CHECKNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BANK {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.BANKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BANK\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.BANKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ACCOUNTNO {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.ACCOUNTNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ACCOUNTNO\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.ACCOUNTNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREPAREDBY {
                get {
                    try {
                        return ((string)(this[this.tabledtPaymentVoucher.PREPAREDBYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PREPAREDBY\' in table \'dtPaymentVoucher\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtPaymentVoucher.PREPAREDBYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_BANKCHECK_IDNull() {
                return this.IsNull(this.tabledtPaymentVoucher.C_BANKCHECK_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_BANKCHECK_IDNull() {
                this[this.tabledtPaymentVoucher.C_BANKCHECK_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENTNONull() {
                return this.IsNull(this.tabledtPaymentVoucher.DOCUMENTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENTNONull() {
                this[this.tabledtPaymentVoucher.DOCUMENTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDATENull() {
                return this.IsNull(this.tabledtPaymentVoucher.DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDATENull() {
                this[this.tabledtPaymentVoucher.DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPAYEENull() {
                return this.IsNull(this.tabledtPaymentVoucher.PAYEEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPAYEENull() {
                this[this.tabledtPaymentVoucher.PAYEEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTNull() {
                return this.IsNull(this.tabledtPaymentVoucher.AMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTNull() {
                this[this.tabledtPaymentVoucher.AMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTINWORDNull() {
                return this.IsNull(this.tabledtPaymentVoucher.AMOUNTINWORDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTINWORDNull() {
                this[this.tabledtPaymentVoucher.AMOUNTINWORDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPURPOSENull() {
                return this.IsNull(this.tabledtPaymentVoucher.PURPOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPURPOSENull() {
                this[this.tabledtPaymentVoucher.PURPOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCOMMENTNull() {
                return this.IsNull(this.tabledtPaymentVoucher.COMMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCOMMENTNull() {
                this[this.tabledtPaymentVoucher.COMMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHECKNONull() {
                return this.IsNull(this.tabledtPaymentVoucher.CHECKNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHECKNONull() {
                this[this.tabledtPaymentVoucher.CHECKNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBANKNull() {
                return this.IsNull(this.tabledtPaymentVoucher.BANKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBANKNull() {
                this[this.tabledtPaymentVoucher.BANKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACCOUNTNONull() {
                return this.IsNull(this.tabledtPaymentVoucher.ACCOUNTNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACCOUNTNONull() {
                this[this.tabledtPaymentVoucher.ACCOUNTNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREPAREDBYNull() {
                return this.IsNull(this.tabledtPaymentVoucher.PREPAREDBYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREPAREDBYNull() {
                this[this.tabledtPaymentVoucher.PREPAREDBYColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtPaymentVoucherRowChangeEvent : global::System.EventArgs {
            
            private dtPaymentVoucherRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherRowChangeEvent(dtPaymentVoucherRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtPaymentVoucherRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591