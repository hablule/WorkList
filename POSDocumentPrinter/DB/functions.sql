DROP FUNCTION IF EXISTS `GET_SOURCEDATE`;
DELIMITER $$
CREATE FUNCTION GET_SOURCEDATE (_C_CASHLINESOURCE_ID int(10), _SOURCETYPE enum('Sales', 'CRV', 'Exemption', 'Refund')) RETURNS DATE
BEGIN

	DECLARE _SOURCEDATE DATE;
	DECLARE _SOURCE_ID INT(10);
	DECLARE _SOURCE_STATION_ID INT(10);
	
	IF _C_CASHLINESOURCE_ID = 0 THEN
		RETURN _SOURCEDATE;		
	ELSEIF _SOURCETYPE = 'Sales' THEN
		
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM SALES
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Refund' THEN
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM REFUNDS
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'CRV' THEN
		SELECT C_PAYMENT_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATETRX INTO _SOURCEDATE
		FROM C_PAYMENT
		WHERE C_PAYMENT_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Exemption' THEN
		SELECT C_EXEMPTION_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATEINVOICED INTO _SOURCEDATE
		FROM C_EXEMPTION
		WHERE C_EXEMPTION_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	END IF;
	
	RETURN _SOURCEDATE;	
END $$


DROP FUNCTION IF EXISTS `GET_AMOUNTPAID`;
DELIMITER $$
CREATE FUNCTION GET_AMOUNTPAID (_INVOICE_ID INT(10), _STATION_ID INT(10)) RETURNS DECIMAL(16,4)
BEGIN

	DECLARE _AMOUNTPAID DECIMAL(16,4);
	DECLARE _TEMPAMOUNT DECIMAL (16,4);
	
	SET _AMOUNTPAID = 0;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_PAYMENTALLOCATE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_ALLOCATIONLINE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(EXEMPTED_AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_EXEMPTIONLINE
	WHERE SALES_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	
	RETURN _AMOUNTPAID;	
END $$




DROP FUNCTION  IF EXISTS `PER_OPENRECORDCOUNT`;
DELIMITER $$
CREATE FUNCTION  PER_OPENRECORDCOUNT (STN_ID int(10)) RETURNS INT
DETERMINISTIC
BEGIN
	UPDATE PER_OPENRECORD
	SET ACTUALVALUE = 
	(
		SELECT COUNT(_RECORD)
		FROM 
		(
			SELECT s.ID AS _RECORD, ABS(COALESCE(SUM(sl.AMOUNT),0) - s.TOTAL_AMOUNT) as OPENAMT
			FROM SALES s LEFT JOIN C_CASHLINESOURCE sl
			ON s.ID = sl.C_INVOICE_ID AND s.STATION = sl.STATION_ID AND sl.SOURCETYPE = 'Sales'
			WHERE s.SOLD_DATE BETWEEN '2016-02-01' AND DATE_SUB(NOW(), INTERVAL 2 DAY) AND s.STATION = STN_ID
			GROUP BY s.ID
			HAVING OPENAMT != 0.5
		) RCD
	)
	WHERE CRITERIA_CODE = 10;
	
	UPDATE PER_OPENRECORD
	SET ACTUALVALUE = 
	(
		SELECT COUNT(_RECORD)
		FROM 
		(
			SELECT c.C_PAYMENT_ID AS _RECORD, ABS(COALESCE(SUM(sl.AMOUNT),0) - c.PAYAMT) as OPENAMT
			FROM C_PAYMENT c LEFT JOIN C_CASHLINESOURCE sl
			ON c.C_PAYMENT_ID = sl.C_PAYMENT_ID AND c.STATION_ID = sl.STATION_ID AND sl.SOURCETYPE = 'CRV'
			WHERE c.DATETRX BETWEEN '2016-02-01' AND DATE_SUB(NOW(), INTERVAL 2 DAY) AND c.STATION_ID = STN_ID
			GROUP BY c.C_PAYMENT_ID
			HAVING OPENAMT != 0.5
		) RCD
	)
	WHERE CRITERIA_CODE = 20;
	
	
	UPDATE PER_OPENRECORD
	SET ACTUALVALUE = 
	(
		SELECT COUNT(_RECORD)
		FROM 
		(
			SELECT e.C_EXEMPTION_ID AS _RECORD, ABS(COALESCE(SUM(ABS(sl.AMOUNT)),0) + COALESCE(SUM(ABS(cl.AMOUNT)),0) - e.EXEMPTEDAMT) as OPENAMT
			FROM C_PAYMENTALLOCATE cl RIGHT JOIN C_EXEMPTION e 
			ON cl.C_INVOICE_ID = e.C_EXEMPTION_ID AND e.STATION_ID = cl.STATION_ID AND ISEXEMPTION = 'Y'
			LEFT JOIN C_CASHLINESOURCE sl
			ON e.C_EXEMPTION_ID = sl.C_EXEMPTION_ID AND e.STATION_ID = sl.STATION_ID AND sl.SOURCETYPE = 'Exemption'
			WHERE e.DATEINVOICED BETWEEN '2016-02-01' AND DATE_SUB(NOW(), INTERVAL 2 DAY) AND e.STATION_ID = STN_ID
			GROUP BY e.C_EXEMPTION_ID
			HAVING OPENAMT != 0.5
		) RCD
	)
	WHERE CRITERIA_CODE = 30;
	
	UPDATE PER_OPENRECORD
	SET ACTUALVALUE = (SELECT DATEDIFF(NOW(),(SELECT REPORTEDDATE FROM PER_AUDITREPORT WHERE STATION_ID = STN_ID)))
	WHERE CRITERIA_CODE = 40;
	
	UPDATE PER_OPENRECORD
	SET ACTUALVALUE = (SELECT RECORDCOUNT FROM EASYMOVE.openmovement)
	WHERE CRITERIA_CODE = 50;
	
	RETURN 1;
	
END $$
