CREATE TABLE AD_SEQUENCE(
AD_SEQUENCE_ID INT(10) PRIMARY KEY,
CREATED DATETIME NOT NULL,
CREATEDBY INT(10) NOT NULL,
UPDATED DATETIME NOT NULL,
UPDATEDBY  INT(10) NOT NULL,
ISACTIVE CHAR(1) NOT NULL,
NAME VARCHAR (60),
DESCRIPTION VARCHAR (255),
INCREMENTNO INT(10) NOT NULL,
STARTNO INT(10) NOT NULL,
CURRENTNEXT INT(10) NOT NULL,
ISTABLEID CHAR (1),
PREFIX VARCHAR (10),
SUFFIX VARCHAR (10),
STATION_ID INT(10)
);

INSERT INTO AD_SEQUENCE(AD_SEQUENCE_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, ISACTIVE, NAME, INCREMENTNO, STARTNO, CURRENTNEXT, ISTABLEID)
VALUES
(1000000, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'AD_SEQUENCE', 1, 100, 100, 'Y'),
(1000001, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_EXEMPTION', 1, 100, 100, 'Y'),
(1000002, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_EXEMPTIONLINE', 1, 100, 100, 'Y'),
(1000003, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_PAYMENT', 1, 100, 100, 'Y'),
(1000004, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_PAYMENTALLOCATE', 1, 100, 100, 'Y'),
(1000005, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_CASH', 1, 100, 100, 'Y'),
(1000006, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_CASHLINE', 1, 100, 100, 'Y'),
(1000007, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_CASHLINESOURCE', 1, 100, 100, 'Y');

INSERT INTO AD_SEQUENCE(AD_SEQUENCE_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, ISACTIVE, NAME,
			INCREMENTNO, STARTNO, CURRENTNEXT, ISTABLEID, PREFIX)
VALUES
(1000008, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'DEPOSIT_SLIP', 1, 100, 100, 'N','HQ-');

UPDATE AD_SEQUENCE
SET STATION_ID = 
(
SELECT MAX(STATION) 
FROM SALES
);

UPDATE AD_SEQUENCE
SET STARTNO = STATION_ID * 10000000, CURRENTNEXT = STATION_ID * 10000000
WHERE ISTABLEID = 'Y';


UPDATE AD_SEQUENCE
SET STARTNO = STATION_ID * 10000, CURRENTNEXT = STATION_ID * 10000
WHERE ISTABLEID = 'N';


CREATE TABLE C_EXEMPTION (
C_EXEMPTION_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DOCUMENTNO VARCHAR(30) NOT NULL,
DATEINVOICED DATE,
DESCRIPTION VARCHAR(255),
C_BPARTNER_ID INT(10),
EXEMPTIONTYPE ENUM('WITHHOLDING','VAT'),
BASEAMOUNT DOUBLE(16,4),
EXEMPTEDAMT DOUBLE(16,4),
PROCESSED CHAR(1) NOT NULL DEFAULT 'Y',
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_EXEMPTION_ID`, `STATION_ID`)
);

CREATE TABLE C_EXEMPTIONLINE (
C_EXEMPTIONLINE_ID INT(10),
C_EXEMPTION_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
SALES_ID INT(10),
SALES_AMOUNT DOUBLE(16,4),
EXEMPTABLE_AMOUNT DOUBLE(16,4),
EXEMPTED_AMOUNT DOUBLE(16,4),
REMAINING_EXEMPTION DOUBLE(16,4),
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_EXEMPTIONLINE_ID`, `STATION_ID`)
);

CREATE OR REPLACE VIEW V_EXEMPTIONDTL AS
SELECT e.C_EXEMPTION_ID, e.AD_ORG_ID, e.ISACTIVE, e.DOCUMENTNO, e.DATEINVOICED, e.DESCRIPTION, e.C_BPARTNER_ID, 
e.EXEMPTIONTYPE, e.BASEAMOUNT, e.EXEMPTEDAMT, e.PROCESSED, e.STATION_ID, 
el.C_EXEMPTIONLINE_ID, el.SALES_ID,
el.SALES_AMOUNT, el.EXEMPTABLE_AMOUNT, el.EXEMPTED_AMOUNT, el.REMAINING_EXEMPTION
FROM C_EXEMPTION e JOIN C_EXEMPTIONLINE el
ON e.C_EXEMPTION_ID = el.C_EXEMPTION_ID;



CREATE TABLE C_PAYMENT 
(
C_PAYMENT_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DOCUMENTNO VARCHAR(30) NOT NULL,
C_BPARTNER_ID INT(10),
ISBILLINGPARTNER CHAR( 1 ) DEFAULT 'N' NOT NULL
DATETRX DATE,
DESCRIPTION VARCHAR(255),
TENDERTYPE ENUM('Cash','Check','CPO'),
CHECKNO VARCHAR(20),
PROCESSED CHAR(1) NOT NULL DEFAULT 'Y',
PAYAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
ISADVANCE CHAR( 1 ) DEFAULT 'N' NOT NULL,
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY (`C_PAYMENT_ID`, `STATION_ID`),
CONSTRAINT UNIQUE (`DOCUMENTNO`)
);


CREATE TABLE C_PAYMENTALLOCATE
(
C_PAYMENTALLOCATE_ID INT(10),
C_PAYMENT_ID INT(10) NOT NULL,
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
ISEXEMPTION CHAR(1) NOT NULL DEFAULT 'N',
C_INVOICE_ID INT(10) NOT NULL,
AMOUNT DOUBLE(16,4) NOT NULL DEFAULT 0,
OVERUNDERAMT DOUBLE(16,4) DEFAULT 0,
INVOICEAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
DESCRIPTION VARCHAR(255),
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY (`C_PAYMENTALLOCATE_ID`, `STATION_ID`), 
CONSTRAINT UNIQUE KEY (`C_PAYMENT_ID`, `C_INVOICE_ID`, `ISEXEMPTION`)
);


CREATE OR REPLACE VIEW V_PAYMENTDTL AS
SELECT p.C_PAYMENT_ID, p.AD_ORG_ID, p.ISACTIVE, p.DOCUMENTNO, p.DATETRX, p.DESCRIPTION,
 p.C_BPARTNER_ID, p.ISBILLINGPARTNER, p.TENDERTYPE, p.PAYAMT, p.ISADVANCE, p.CHECKNO, p.PROCESSED, p.STATION_ID, 
pa.C_PAYMENTALLOCATE_ID, pa.ISEXEMPTION, pa.C_INVOICE_ID, pa.AMOUNT, pa.OVERUNDERAMT, 
pa.INVOICEAMT, pa.DESCRIPTION ALLOCATION_DESC
FROM C_PAYMENT p LEFT JOIN C_PAYMENTALLOCATE pa
ON p.C_PAYMENT_ID = pa.C_PAYMENT_ID;



DROP FUNCTION IF EXISTS `GET_AMOUNTPAID`;
DELIMITER $$
CREATE FUNCTION GET_AMOUNTPAID (_INVOICE_ID INT(10), _STATION_ID INT(10)) RETURNS DECIMAL(16,4)
BEGIN

	DECLARE _AMOUNTPAID DECIMAL(16,4);
	DECLARE _TEMPAMOUNT DECIMAL (16,4);
	
	SET _AMOUNTPAID = 0;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_PAYMENTALLOCATE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_ALLOCATIONLINE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(EXEMPTED_AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_EXEMPTIONLINE
	WHERE SALES_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	
	RETURN _AMOUNTPAID;	
END $$


CREATE OR REPLACE VIEW V_INVOICEDUEAMOUNT AS
SELECT s.*, s.total_amount - GET_AMOUNTPAID(s.id, s.station) - with_holding AS DUE 
FROM SALES s
WHERE s.CASH_CREDIT = 'CREDIT';

CREATE TABLE C_ALLOCATIONHDR(
C_ALLOCATIONHDR_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DOCUMENTNO VARCHAR(30) NOT NULL,
DATETRX DATE,
DATEACCT DATE,
C_CURRENCY_ID INT(10) DEFAULT 204,
ISMANUAL CHAR(1) NOT NULL DEFAULT 'Y',
DOCSTATUS CHAR(2) NOT NULL DEFAULT 'DR',
DOCACTION CHAR(2) NOT NULL DEFAULT 'CO',
ISAPPROVED CHAR(1) NOT NULL DEFAULT 'N',
PROCESSING CHAR(1) NOT NULL DEFAULT 'N',
PROCESSED CHAR(1) NOT NULL DEFAULT 'N',
POSTED CHAR(1) NOT NULL DEFAULT 'N',
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_ALLOCATIONHDR_ID`, `STATION_ID`)
);

CREATE TABLE C_ALLOCATIONLINE(
C_ALLOCATIONLINE_ID INT(10),
C_ALLOCATIONHDR_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DATETRX DATE,
ISMANUAL CHAR(1) NOT NULL DEFAULT 'Y',
ISEXEMPTION CHAR(1) NOT NULL DEFAULT 'N',
C_INVOICE_ID INT(10),
C_BPARTNER_ID INT(10),
C_PAYMENT_ID INT(10),
AMOUNT DOUBLE(16,4) NOT NULL,
DISCOUNTAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
WRITEOFFAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
OVERUNDERAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
POSTED CHAR(1) NOT NULL DEFAULT 'N',
INVOICEAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
DESCRIPTION VARCHAR(255),
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_ALLOCATIONLINE_ID`, `STATION_ID`)
);




CREATE TABLE C_CASH
(
C_CASH_ID INT(10),
AD_CLIENT_ID INT(10) NOT NULL DEFAULT 1000000,
AD_ORG_ID INT (10) NOT NULL,
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
C_CASHBOOK_ID INT(10),
NAME VARCHAR(30) NOT NULL,
ISCARDPAYMENT CHAR( 1 ) DEFAULT 'N' NOT NULL,
COMMISSIONRATE DOUBLE( 16, 4 ) DEFAULT '0' NOT NULL,
DESCRIPTION VARCHAR(255),
STATEMENTDATE DATE NOT NULL,
DATEACCT DATE NOT NULL,
ENDINGBALANCE DOUBLE(16,4) NOT NULL DEFAULT 0,
STATEMENTDIFFERENCE DOUBLE(16,4) NOT NULL DEFAULT 0,
PROCESSING CHAR(1) NOT NULL DEFAULT 'N',
PROCESSED CHAR(1) NOT NULL DEFAULT 'Y',
DOCSTATUS CHAR (2) NOT NULL DEFAULT 'CO',
DOCACTION CHAR (2) NOT NULL DEFAULT 'CL',
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY (`C_CASH_ID`, `STATION_ID`)
);

ALTER TABLE `c_cash` ADD `ISCARDPAYMENT` CHAR( 1 ) DEFAULT 'N' NOT NULL AFTER `NAME` ,
ADD `COMMISSIONRATE` DOUBLE( 16, 4 ) DEFAULT '0' NOT NULL AFTER `ISCARDPAYMENT` ;

ALTER TABLE `C_CASH` CHANGE STATEMENTDATE STATEMENTDATE DATE NOT NULL, CHANGE DATEACCT DATEACCT DATE NOT NULL;

CREATE TABLE C_CASHLINE
(
C_CASHLINE_ID INT(10),
C_CASH_ID INT(10),
AD_CLIENT_ID INT(10) NOT NULL,
AD_ORG_ID INT (10) NOT NULL,
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
LINE INT(10) NOT NULL,
DESCRIPTION VARCHAR(255),
CASHTYPE CHAR(1) NOT NULL DEFAULT 'T',
C_BANKACCOUNT_ID INT(10) NOT NULL,
C_CURRENCY_ID INT(10) NOT NULL DEFAULT 204,
AMOUNT DOUBLE(16,4) NOT NULL DEFAULT 0,
PROCESSED CHAR(1) NOT NULL DEFAULT 'Y',
TENDERTYPE ENUM('Cash','Check','CPO'),
CHECKNO VARCHAR(20),
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY (`C_CASHLINE_ID`, `STATION_ID`)
);

CREATE TABLE C_CASHLINESOURCE
(
C_CASHLINESOURCE_ID INT(10),
C_CASHLINE_ID INT(10),
AD_CLIENT_ID INT(10) NOT NULL,
AD_ORG_ID INT (10) NOT NULL,
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
DESCRIPTION VARCHAR(255),
SOURCETYPE ENUM ('Sales','CRV','Exemption','Refund') NOT NULL,
C_PAYMENT_ID INT(10),
C_INVOICE_ID INT(10),
C_EXEMPTION_ID INT(10),
ONHANDAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
AMOUNT DOUBLE(16,4) NOT NULL DEFAULT 0,
OVERUNDERAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY (`C_CASHLINESOURCE_ID`, `STATION_ID`)
);


DROP FUNCTION IF EXISTS `GET_SOURCEDATE`;
DELIMITER $$
CREATE FUNCTION GET_SOURCEDATE (_C_CASHLINESOURCE_ID int(10), _SOURCETYPE enum('Sales', 'CRV', 'Exemption', 'Refund')) RETURNS DATE
BEGIN

	DECLARE _SOURCEDATE DATE;
	DECLARE _SOURCE_ID INT(10);
	DECLARE _SOURCE_STATION_ID INT(10);
	
	IF _C_CASHLINESOURCE_ID = 0 THEN
		RETURN _SOURCEDATE;		
	ELSEIF _SOURCETYPE = 'Sales' THEN
		
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM SALES
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Refund' THEN
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM REFUNDS
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'CRV' THEN
		SELECT C_PAYMENT_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATETRX INTO _SOURCEDATE
		FROM C_PAYMENT
		WHERE C_PAYMENT_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Exemption' THEN
		SELECT C_EXEMPTION_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATEINVOICED INTO _SOURCEDATE
		FROM C_EXEMPTION
		WHERE C_EXEMPTION_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	END IF;
	
	RETURN _SOURCEDATE;	
END $$


CREATE OR REPLACE VIEW V_DEPOSITDTL AS
SELECT c.C_CASH_ID, c.AD_ORG_ID, c.ISACTIVE, c.C_CASHBOOK_ID, c.NAME, c.ISCARDPAYMENT, c.COMMISSIONRATE, c.DESCRIPTION as DESCRIPTION, c.STATEMENTDATE, c.ENDINGBALANCE, c.STATEMENTDIFFERENCE, c.PROCESSED, c.STATION_ID,
	cl.C_CASHLINE_ID, cl.LINE, cl.DESCRIPTION as DES_CASHLINE, cl.C_BANKACCOUNT_ID, cl.AMOUNT as AMOUNT_CASHLINE, cl.TENDERTYPE, cl.CHECKNO,
	cs.C_CASHLINESOURCE_ID, cs.DESCRIPTION as DES_LINESOURCE, cs.SOURCETYPE, 
	GET_SOURCEDATE(cs.C_CASHLINESOURCE_ID, cs.SOURCETYPE) AS SOURCEDATE, cs.C_PAYMENT_ID, cs.C_INVOICE_ID, 
	cs.C_EXEMPTION_ID, cs.ONHANDAMT, cs.AMOUNT as AMOUNT_LINESOURCE, cs.OVERUNDERAMT
FROM C_CASHLINESOURCE cs RIGHT JOIN C_CASHLINE cl
	ON cs.C_CASHLINE_ID = cl.C_CASHLINE_ID RIGHT JOIN C_CASH c
	ON c.C_CASH_ID = cl.C_CASH_ID;
	
	
CREATE TABLE C_BANKACCOUNT
(
C_BANKACCOUNT_ID INT(10),
ACCOUNTNO VARCHAR(30) NOT NULL,
BANKNAME VARCHAR(80) NOT NULL,
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
CONSTRAINT PRIMARY KEY (`C_BANKACCOUNT_ID`)
);


INSERT INTO `c_bankaccount` (`C_BANKACCOUNT_ID`, `ACCOUNTNO`, `BANKNAME`, `ISACTIVE`)
 VALUES
(1000000, '1842-01224', 'Abbysinia Bank', 'Y'),
(1000001, '01160002147700-HQ', 'Awash International Bank', 'Y'),
(1000002, '0130412013600-2587', 'Awash International Bank', 'Y'),
(1000003, '01338/310382/00-1313', 'Commercial Bank Of Ethiopia', 'Y'),
(1000004, '0032513387001-23587', 'Dashen Bank', 'Y'),
(1000005, 'HO', 'NIB Internation Bank', 'Y'),
(1000006, '00735700300-(364)', 'NIB Internation Bank', 'Y'),
(1000007, '000187', 'Wogagen Bank', 'Y'),
(351000001, '1032210002556017', 'Zemen Bank', 'Y'),
(351000002, '1035110002556013', 'Zemen Bank', 'Y'),
(351000004, '01304115064500-Finfi', 'Awash International Bank', 'Y'),
(351000006, '28297-78', 'Lion International Bank Sc.', 'Y'),
(351000007, '1152510653931018', 'United Bank Sc.', 'Y'),
(351000008, '115181065391018', 'United Bank Sc.', 'Y'),
(351000009, 'Retention', 'Abbysinia Bank', 'Y'),
(351000010, 'unkown', 'Wogagen Bank', 'Y'),
(351000011, 'Overdraft', 'NIB Internation Bank', 'Y'),
(351000012, 'Adama', 'NIB Internation Bank', 'Y'),
(351000013, '00110031589', 'Lion International Bank Sc.', 'Y'),
(351000014, 'merkato', 'Awash International Bank', 'Y'),
(351000015, 'CRV Cash Collection', 'Gplc Virtual Bank', 'Y'),
(351000016, '1351815250108016', 'United Bank Sc.', 'Y'),
(351000017, 'SHENKOR-657C01000003', 'Commercial Bank Of Ethiopia', 'Y'),
(351000018, 'ABOKER', 'Commercial Bank Of Ethiopia', 'Y'),
(351000019, 'HARAR-1000062410691', 'Commercial Bank Of Ethiopia', 'Y'),
(351000020, 'GIT Cost', 'Gplc Virtual Bank', 'Y'),
(351000021, 'ACCT FOR CASH ESTABL', 'Gplc Virtual Bank', 'Y'),
(351000022, 'Kolfe_0031904235035', 'Dashen Bank', 'Y');

ALTER TABLE `ad_sequence` TYPE = MYISAM ;
ALTER TABLE `C_EXEMPTION` TYPE = MYISAM ;
ALTER TABLE `C_EXEMPTIONLINE` TYPE = MYISAM ;
ALTER TABLE `C_PAYMENT` TYPE = MYISAM ;
ALTER TABLE `C_PAYMENTALLOCATE` TYPE = MYISAM ;
ALTER TABLE `C_CASH` TYPE = MYISAM ;
ALTER TABLE `C_CASHLINE` TYPE = MYISAM ;
ALTER TABLE `C_CASHLINESOURCE` TYPE = MYISAM ;
ALTER TABLE `C_BANKACCOUNT` TYPE = MYISAM ;
ALTER TABLE `c_bankaccount` TYPE = MYISAM ;

ALTER TABLE `sales` ADD INDEX ( `customer_id` , `station` );

CREATE TABLE IF NOT EXISTS DELE_SALES (
  ID bigint(20) NOT NULL DEFAULT '0',
  STATION int(11) NOT NULL DEFAULT '0',
  CUSTOMER_ID int(11) NOT NULL DEFAULT '0',
  CONSTRAINT PRIMARY KEY (`ID`, `STATION`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
ALTER TABLE `DELE_SALES` ADD INDEX (`CUSTOMER_ID` , `STATION`);


CREATE TABLE IF NOT EXISTS DELE_RFND (
  ID bigint(20) NOT NULL DEFAULT '0',
  STATION int(11) NOT NULL DEFAULT '0',
  CUSTOMER_ID int(11) NOT NULL DEFAULT '0',
  CONSTRAINT PRIMARY KEY (`ID`, `STATION`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
ALTER TABLE `DELE_RFND` ADD INDEX (`CUSTOMER_ID` , `STATION`);



ALTER TABLE `easymove`.`em_m_movement` ADD INDEX ( `UPDATED` );
ALTER TABLE `easymove`.`em_m_movementline` ADD INDEX ( `UPDATED` );

ALTER TABLE `easymove`.`em_move_status` ADD INDEX ( `CREATED` );
ALTER TABLE `easymove`.`em_printjob` ADD INDEX ( `CREATED` );

ALTER TABLE `C_EXEMPTION` ADD INDEX ( `UPDATED` );
ALTER TABLE `C_EXEMPTIONLINE` ADD INDEX ( `UPDATED` );

ALTER TABLE `C_PAYMENT` ADD INDEX ( `UPDATED` );
ALTER TABLE `C_PAYMENTALLOCATE` ADD INDEX ( `UPDATED` );

ALTER TABLE `C_CASH` ADD INDEX ( `UPDATED` );
ALTER TABLE `C_CASHLINE` ADD INDEX ( `UPDATED` );
ALTER TABLE `C_CASHLINESOURCE` ADD INDEX ( `UPDATED` );

DELETE FROM print_job WHERE PRINTED <= '2013-12-31';

