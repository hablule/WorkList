@mysql -hglhqserver -uroot -pe4r5t6y7 marakipos2011
ALTER TABLE `C_CASH` CHANGE STATEMENTDATE STATEMENTDATE DATE NOT NULL, CHANGE DATEACCT DATEACCT DATE NOT NULL;


DROP FUNCTION IF EXISTS `GET_SOURCEDATE`;
DELIMITER $$
CREATE FUNCTION GET_SOURCEDATE (_C_CASHLINESOURCE_ID int(10), _SOURCETYPE enum('Sales', 'CRV', 'Exemption', 'Refund')) RETURNS DATE
BEGIN

	DECLARE _SOURCEDATE DATE;
	DECLARE _SOURCE_ID INT(10);
	DECLARE _SOURCE_STATION_ID INT(10);
	
	IF _C_CASHLINESOURCE_ID = 0 THEN
		RETURN _SOURCEDATE;		
	ELSEIF _SOURCETYPE = 'Sales' THEN
		
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM SALES
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Refund' THEN
		SELECT C_INVOICE_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT SOLD_DATE INTO _SOURCEDATE
		FROM REFUNDS
		WHERE ID = _SOURCE_ID AND STATION = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'CRV' THEN
		SELECT C_PAYMENT_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATETRX INTO _SOURCEDATE
		FROM C_PAYMENT
		WHERE C_PAYMENT_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	ELSEIF _SOURCETYPE = 'Exemption' THEN
		SELECT C_EXEMPTION_ID, STATION_ID INTO _SOURCE_ID, _SOURCE_STATION_ID
		FROM C_CASHLINESOURCE
		WHERE C_CASHLINESOURCE_ID = _C_CASHLINESOURCE_ID;
		
		SELECT DATEINVOICED INTO _SOURCEDATE
		FROM C_EXEMPTION
		WHERE C_EXEMPTION_ID = _SOURCE_ID AND STATION_ID = _SOURCE_STATION_ID;
		
	END IF;
	
	RETURN _SOURCEDATE;	
END $$


CREATE OR REPLACE VIEW V_DEPOSITDTL AS
SELECT c.C_CASH_ID, c.AD_ORG_ID, c.ISACTIVE, c.C_CASHBOOK_ID, c.NAME, c.ISCARDPAYMENT, c.COMMISSIONRATE, c.DESCRIPTION as DESCRIPTION, c.STATEMENTDATE, c.ENDINGBALANCE, c.STATEMENTDIFFERENCE, c.PROCESSED, c.STATION_ID,
	cl.C_CASHLINE_ID, cl.LINE, cl.DESCRIPTION as DES_CASHLINE, cl.C_BANKACCOUNT_ID, cl.AMOUNT as AMOUNT_CASHLINE, cl.TENDERTYPE, cl.CHECKNO,
	cs.C_CASHLINESOURCE_ID, cs.DESCRIPTION as DES_LINESOURCE, cs.SOURCETYPE, 
	GET_SOURCEDATE(cs.C_CASHLINESOURCE_ID, cs.SOURCETYPE) AS SOURCEDATE, cs.C_PAYMENT_ID, cs.C_INVOICE_ID, 
	cs.C_EXEMPTION_ID, cs.ONHANDAMT, cs.AMOUNT as AMOUNT_LINESOURCE, cs.OVERUNDERAMT
FROM C_CASHLINESOURCE cs RIGHT JOIN C_CASHLINE cl
	ON cs.C_CASHLINE_ID = cl.C_CASHLINE_ID RIGHT JOIN C_CASH c
	ON c.C_CASH_ID = cl.C_CASH_ID;
	
	-- -- =======================================================
	
ALTER TABLE `refunds` ADD `SALES_ID` INT( 10 ) DEFAULT '0' NOT NULL AFTER `sold_date` ;

ALTER TABLE `c_payment` ADD `ISADVANCE` CHAR( 1 ) DEFAULT 'N' NOT NULL AFTER `PAYAMT` ;


ALTER TABLE `c_payment` ADD `ISBILLINGPARTNER` CHAR( 1 ) DEFAULT 'N' NOT NULL AFTER `C_BPARTNER_ID` ;

CREATE OR REPLACE VIEW V_PAYMENTDTL AS
SELECT p.C_PAYMENT_ID, p.AD_ORG_ID, p.ISACTIVE, p.DOCUMENTNO, p.DATETRX, p.DESCRIPTION,
 p.C_BPARTNER_ID, p.ISBILLINGPARTNER, p.TENDERTYPE, p.PAYAMT, p.ISADVANCE, p.CHECKNO, p.PROCESSED, p.STATION_ID, 
pa.C_PAYMENTALLOCATE_ID, pa.ISEXEMPTION, pa.C_INVOICE_ID, pa.AMOUNT, pa.OVERUNDERAMT, 
pa.INVOICEAMT, pa.DESCRIPTION ALLOCATION_DESC
FROM C_PAYMENT p LEFT JOIN C_PAYMENTALLOCATE pa
ON p.C_PAYMENT_ID = pa.C_PAYMENT_ID;



CREATE TABLE C_ALLOCATIONHDR(
C_ALLOCATIONHDR_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DOCUMENTNO VARCHAR(30) NOT NULL,
DATETRX DATE,
DATEACCT DATE,
C_CURRENCY_ID INT(10) DEFAULT 204,
ISMANUAL CHAR(1) NOT NULL DEFAULT 'Y',
DOCSTATUS CHAR(2) NOT NULL DEFAULT 'DR',
DOCACTION CHAR(2) NOT NULL DEFAULT 'CO',
ISAPPROVED CHAR(1) NOT NULL DEFAULT 'N',
PROCESSING CHAR(1) NOT NULL DEFAULT 'N',
PROCESSED CHAR(1) NOT NULL DEFAULT 'N',
POSTED CHAR(1) NOT NULL DEFAULT 'N',
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_ALLOCATIONHDR_ID`, `STATION_ID`)
);

ALTER TABLE `C_ALLOCATIONHDR` TYPE = MYISAM ;

CREATE TABLE C_ALLOCATIONLINE(
C_ALLOCATIONLINE_ID INT(10),
C_ALLOCATIONHDR_ID INT(10),
AD_ORG_ID INT(10),
CREATED DATETIME,
CREATEDBY INT(10),
UPDATED DATETIME,
UPDATEDBY INT(10),
ISACTIVE CHAR(1) NOT NULL DEFAULT 'Y',
DATETRX DATE,
ISMANUAL CHAR(1) NOT NULL DEFAULT 'Y',
ISEXEMPTION CHAR(1) NOT NULL DEFAULT 'N',
C_INVOICE_ID INT(10),
C_BPARTNER_ID INT(10),
C_PAYMENT_ID INT(10),
AMOUNT DOUBLE(16,4) NOT NULL,
DISCOUNTAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
WRITEOFFAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
OVERUNDERAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
POSTED CHAR(1) NOT NULL DEFAULT 'N',
INVOICEAMT DOUBLE(16,4) NOT NULL DEFAULT 0,
DESCRIPTION VARCHAR(255),
STATION_ID INT(10),
CONSTRAINT PRIMARY KEY(`C_ALLOCATIONLINE_ID`, `STATION_ID`)
);

ALTER TABLE `C_ALLOCATIONLINE` TYPE = MYISAM ;


INSERT INTO AD_SEQUENCE(AD_SEQUENCE_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, ISACTIVE, NAME, INCREMENTNO, STARTNO, CURRENTNEXT, ISTABLEID)
VALUES
(1000009, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_ALLOCATIONHDR', 1, 100000000, 100000000, 'Y'),
(1000010, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'C_ALLOCATIONLINE', 1, 100000000, 100000000, 'Y');

INSERT INTO AD_SEQUENCE(AD_SEQUENCE_ID, CREATED, CREATEDBY, UPDATED, UPDATEDBY, ISACTIVE, NAME,
			INCREMENTNO, STARTNO, CURRENTNEXT, ISTABLEID, PREFIX)
VALUES
(1000011, SYSDATE(), 0, SYSDATE(), 0, 'Y', 'ALLOCATION_HDR', 1, 10000, 10000, 'N','HQ-');


UPDATE AD_SEQUENCE
SET STATION_ID = 
(
SELECT MAX(STATION) 
FROM SALES
);



DROP FUNCTION IF EXISTS `GET_AMOUNTPAID`;
DELIMITER $$
CREATE FUNCTION GET_AMOUNTPAID (_INVOICE_ID INT(10), _STATION_ID INT(10)) RETURNS DECIMAL(16,4)
BEGIN

	DECLARE _AMOUNTPAID DECIMAL(16,4);
	DECLARE _TEMPAMOUNT DECIMAL (16,4);
	
	SET _AMOUNTPAID = 0;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_PAYMENTALLOCATE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_ALLOCATIONLINE
	WHERE C_INVOICE_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	SELECT COALESCE (SUM(EXEMPTED_AMOUNT), 0) INTO _TEMPAMOUNT
	FROM C_EXEMPTIONLINE
	WHERE SALES_ID = _INVOICE_ID AND STATION_ID = _STATION_ID;
	
	SET _AMOUNTPAID = _AMOUNTPAID + _TEMPAMOUNT;
	
	
	RETURN _AMOUNTPAID;	
END $$


CREATE OR REPLACE VIEW V_INVOICEDUEAMOUNT AS
SELECT s.*, s.total_amount - GET_AMOUNTPAID(s.id, s.station) - with_holding AS DUE 
FROM SALES s
WHERE s.CASH_CREDIT = 'CREDIT';
