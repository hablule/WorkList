//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.9151
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BuySimple {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dtsDocumentData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dtsDocumentData : global::System.Data.DataSet {
        
        private dtCostListDataTable tabledtCostList;
        
        private dtCostDistributionDataTable tabledtCostDistribution;
        
        private dtDocInfoDataTable tabledtDocInfo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dtsDocumentData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dtsDocumentData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtCostList"] != null)) {
                    base.Tables.Add(new dtCostListDataTable(ds.Tables["dtCostList"]));
                }
                if ((ds.Tables["dtCostDistribution"] != null)) {
                    base.Tables.Add(new dtCostDistributionDataTable(ds.Tables["dtCostDistribution"]));
                }
                if ((ds.Tables["dtDocInfo"] != null)) {
                    base.Tables.Add(new dtDocInfoDataTable(ds.Tables["dtDocInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCostListDataTable dtCostList {
            get {
                return this.tabledtCostList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtCostDistributionDataTable dtCostDistribution {
            get {
                return this.tabledtCostDistribution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDocInfoDataTable dtDocInfo {
            get {
                return this.tabledtDocInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dtsDocumentData cln = ((dtsDocumentData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtCostList"] != null)) {
                    base.Tables.Add(new dtCostListDataTable(ds.Tables["dtCostList"]));
                }
                if ((ds.Tables["dtCostDistribution"] != null)) {
                    base.Tables.Add(new dtCostDistributionDataTable(ds.Tables["dtCostDistribution"]));
                }
                if ((ds.Tables["dtDocInfo"] != null)) {
                    base.Tables.Add(new dtDocInfoDataTable(ds.Tables["dtDocInfo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtCostList = ((dtCostListDataTable)(base.Tables["dtCostList"]));
            if ((initTable == true)) {
                if ((this.tabledtCostList != null)) {
                    this.tabledtCostList.InitVars();
                }
            }
            this.tabledtCostDistribution = ((dtCostDistributionDataTable)(base.Tables["dtCostDistribution"]));
            if ((initTable == true)) {
                if ((this.tabledtCostDistribution != null)) {
                    this.tabledtCostDistribution.InitVars();
                }
            }
            this.tabledtDocInfo = ((dtDocInfoDataTable)(base.Tables["dtDocInfo"]));
            if ((initTable == true)) {
                if ((this.tabledtDocInfo != null)) {
                    this.tabledtDocInfo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dtsDocumentData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dtsDocumentData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtCostList = new dtCostListDataTable();
            base.Tables.Add(this.tabledtCostList);
            this.tabledtCostDistribution = new dtCostDistributionDataTable();
            base.Tables.Add(this.tabledtCostDistribution);
            this.tabledtDocInfo = new dtDocInfoDataTable();
            base.Tables.Add(this.tabledtDocInfo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCostList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtCostDistribution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDocInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dtsDocumentData ds = new dtsDocumentData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtCostListRowChangeEventHandler(object sender, dtCostListRowChangeEvent e);
        
        public delegate void dtCostDistributionRowChangeEventHandler(object sender, dtCostDistributionRowChangeEvent e);
        
        public delegate void dtDocInfoRowChangeEventHandler(object sender, dtDocInfoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCostListDataTable : global::System.Data.TypedTableBase<dtCostListRow> {
            
            private global::System.Data.DataColumn columnC_TAX_ID;
            
            private global::System.Data.DataColumn columnC_CHARGE_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnIsCost;
            
            private global::System.Data.DataColumn columnAMOUNTSHARED;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListDataTable() {
                this.TableName = "dtCostList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCostListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCostListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_TAX_IDColumn {
                get {
                    return this.columnC_TAX_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_CHARGE_IDColumn {
                get {
                    return this.columnC_CHARGE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCostColumn {
                get {
                    return this.columnIsCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AMOUNTSHAREDColumn {
                get {
                    return this.columnAMOUNTSHARED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListRow this[int index] {
                get {
                    return ((dtCostListRow)(this.Rows[index]));
                }
            }
            
            public event dtCostListRowChangeEventHandler dtCostListRowChanging;
            
            public event dtCostListRowChangeEventHandler dtCostListRowChanged;
            
            public event dtCostListRowChangeEventHandler dtCostListRowDeleting;
            
            public event dtCostListRowChangeEventHandler dtCostListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCostListRow(dtCostListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListRow AdddtCostListRow(string C_TAX_ID, string C_CHARGE_ID, string NAME, string IsCost, decimal AMOUNTSHARED) {
                dtCostListRow rowdtCostListRow = ((dtCostListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        C_TAX_ID,
                        C_CHARGE_ID,
                        NAME,
                        IsCost,
                        AMOUNTSHARED};
                rowdtCostListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCostListRow);
                return rowdtCostListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCostListDataTable cln = ((dtCostListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCostListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnC_TAX_ID = base.Columns["C_TAX_ID"];
                this.columnC_CHARGE_ID = base.Columns["C_CHARGE_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnIsCost = base.Columns["IsCost"];
                this.columnAMOUNTSHARED = base.Columns["AMOUNTSHARED"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnC_TAX_ID = new global::System.Data.DataColumn("C_TAX_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_TAX_ID);
                this.columnC_CHARGE_ID = new global::System.Data.DataColumn("C_CHARGE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_CHARGE_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnIsCost = new global::System.Data.DataColumn("IsCost", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCost);
                this.columnAMOUNTSHARED = new global::System.Data.DataColumn("AMOUNTSHARED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAMOUNTSHARED);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListRow NewdtCostListRow() {
                return ((dtCostListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCostListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCostListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCostListRowChanged != null)) {
                    this.dtCostListRowChanged(this, new dtCostListRowChangeEvent(((dtCostListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCostListRowChanging != null)) {
                    this.dtCostListRowChanging(this, new dtCostListRowChangeEvent(((dtCostListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCostListRowDeleted != null)) {
                    this.dtCostListRowDeleted(this, new dtCostListRowChangeEvent(((dtCostListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCostListRowDeleting != null)) {
                    this.dtCostListRowDeleting(this, new dtCostListRowChangeEvent(((dtCostListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCostListRow(dtCostListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsDocumentData ds = new dtsDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCostListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtCostDistributionDataTable : global::System.Data.TypedTableBase<dtCostDistributionRow> {
            
            private global::System.Data.DataColumn columnC_INVOICELINE_ID;
            
            private global::System.Data.DataColumn columnLINE;
            
            private global::System.Data.DataColumn columnM_PRODUCT_ID;
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnQTYENTERED;
            
            private global::System.Data.DataColumn columnPRICEENTERED;
            
            private global::System.Data.DataColumn columnLINENETAMT;
            
            private global::System.Data.DataColumn columnPRICEACTUAL;
            
            private global::System.Data.DataColumn columnTAXAMOUNT;
            
            private global::System.Data.DataColumn columnTOTALAMOUNT;
            
            private global::System.Data.DataColumn columnRatio;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionDataTable() {
                this.TableName = "dtCostDistribution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCostDistributionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtCostDistributionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn C_INVOICELINE_IDColumn {
                get {
                    return this.columnC_INVOICELINE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINEColumn {
                get {
                    return this.columnLINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn M_PRODUCT_IDColumn {
                get {
                    return this.columnM_PRODUCT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QTYENTEREDColumn {
                get {
                    return this.columnQTYENTERED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEENTEREDColumn {
                get {
                    return this.columnPRICEENTERED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINENETAMTColumn {
                get {
                    return this.columnLINENETAMT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PRICEACTUALColumn {
                get {
                    return this.columnPRICEACTUAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TAXAMOUNTColumn {
                get {
                    return this.columnTAXAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTALAMOUNTColumn {
                get {
                    return this.columnTOTALAMOUNT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatioColumn {
                get {
                    return this.columnRatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionRow this[int index] {
                get {
                    return ((dtCostDistributionRow)(this.Rows[index]));
                }
            }
            
            public event dtCostDistributionRowChangeEventHandler dtCostDistributionRowChanging;
            
            public event dtCostDistributionRowChangeEventHandler dtCostDistributionRowChanged;
            
            public event dtCostDistributionRowChangeEventHandler dtCostDistributionRowDeleting;
            
            public event dtCostDistributionRowChangeEventHandler dtCostDistributionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtCostDistributionRow(dtCostDistributionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionRow AdddtCostDistributionRow(string C_INVOICELINE_ID, string LINE, string M_PRODUCT_ID, string NAME, decimal QTYENTERED, decimal PRICEENTERED, decimal LINENETAMT, decimal PRICEACTUAL, decimal TAXAMOUNT, decimal TOTALAMOUNT, decimal Ratio) {
                dtCostDistributionRow rowdtCostDistributionRow = ((dtCostDistributionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        C_INVOICELINE_ID,
                        LINE,
                        M_PRODUCT_ID,
                        NAME,
                        QTYENTERED,
                        PRICEENTERED,
                        LINENETAMT,
                        PRICEACTUAL,
                        TAXAMOUNT,
                        TOTALAMOUNT,
                        Ratio};
                rowdtCostDistributionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtCostDistributionRow);
                return rowdtCostDistributionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtCostDistributionDataTable cln = ((dtCostDistributionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtCostDistributionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnC_INVOICELINE_ID = base.Columns["C_INVOICELINE_ID"];
                this.columnLINE = base.Columns["LINE"];
                this.columnM_PRODUCT_ID = base.Columns["M_PRODUCT_ID"];
                this.columnNAME = base.Columns["NAME"];
                this.columnQTYENTERED = base.Columns["QTYENTERED"];
                this.columnPRICEENTERED = base.Columns["PRICEENTERED"];
                this.columnLINENETAMT = base.Columns["LINENETAMT"];
                this.columnPRICEACTUAL = base.Columns["PRICEACTUAL"];
                this.columnTAXAMOUNT = base.Columns["TAXAMOUNT"];
                this.columnTOTALAMOUNT = base.Columns["TOTALAMOUNT"];
                this.columnRatio = base.Columns["Ratio"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnC_INVOICELINE_ID = new global::System.Data.DataColumn("C_INVOICELINE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnC_INVOICELINE_ID);
                this.columnLINE = new global::System.Data.DataColumn("LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE);
                this.columnM_PRODUCT_ID = new global::System.Data.DataColumn("M_PRODUCT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnM_PRODUCT_ID);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnQTYENTERED = new global::System.Data.DataColumn("QTYENTERED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQTYENTERED);
                this.columnPRICEENTERED = new global::System.Data.DataColumn("PRICEENTERED", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICEENTERED);
                this.columnLINENETAMT = new global::System.Data.DataColumn("LINENETAMT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINENETAMT);
                this.columnPRICEACTUAL = new global::System.Data.DataColumn("PRICEACTUAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPRICEACTUAL);
                this.columnTAXAMOUNT = new global::System.Data.DataColumn("TAXAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAXAMOUNT);
                this.columnTOTALAMOUNT = new global::System.Data.DataColumn("TOTALAMOUNT", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTALAMOUNT);
                this.columnRatio = new global::System.Data.DataColumn("Ratio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatio);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionRow NewdtCostDistributionRow() {
                return ((dtCostDistributionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtCostDistributionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtCostDistributionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtCostDistributionRowChanged != null)) {
                    this.dtCostDistributionRowChanged(this, new dtCostDistributionRowChangeEvent(((dtCostDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtCostDistributionRowChanging != null)) {
                    this.dtCostDistributionRowChanging(this, new dtCostDistributionRowChangeEvent(((dtCostDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtCostDistributionRowDeleted != null)) {
                    this.dtCostDistributionRowDeleted(this, new dtCostDistributionRowChangeEvent(((dtCostDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtCostDistributionRowDeleting != null)) {
                    this.dtCostDistributionRowDeleting(this, new dtCostDistributionRowChangeEvent(((dtCostDistributionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtCostDistributionRow(dtCostDistributionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsDocumentData ds = new dtsDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtCostDistributionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDocInfoDataTable : global::System.Data.TypedTableBase<dtDocInfoRow> {
            
            private global::System.Data.DataColumn columndocumentName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoDataTable() {
                this.TableName = "dtDocInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDocInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn documentNameColumn {
                get {
                    return this.columndocumentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoRow this[int index] {
                get {
                    return ((dtDocInfoRow)(this.Rows[index]));
                }
            }
            
            public event dtDocInfoRowChangeEventHandler dtDocInfoRowChanging;
            
            public event dtDocInfoRowChangeEventHandler dtDocInfoRowChanged;
            
            public event dtDocInfoRowChangeEventHandler dtDocInfoRowDeleting;
            
            public event dtDocInfoRowChangeEventHandler dtDocInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDocInfoRow(dtDocInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoRow AdddtDocInfoRow(string documentName) {
                dtDocInfoRow rowdtDocInfoRow = ((dtDocInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        documentName};
                rowdtDocInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDocInfoRow);
                return rowdtDocInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDocInfoDataTable cln = ((dtDocInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDocInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndocumentName = base.Columns["documentName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndocumentName = new global::System.Data.DataColumn("documentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocumentName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoRow NewdtDocInfoRow() {
                return ((dtDocInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDocInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDocInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDocInfoRowChanged != null)) {
                    this.dtDocInfoRowChanged(this, new dtDocInfoRowChangeEvent(((dtDocInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDocInfoRowChanging != null)) {
                    this.dtDocInfoRowChanging(this, new dtDocInfoRowChangeEvent(((dtDocInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDocInfoRowDeleted != null)) {
                    this.dtDocInfoRowDeleted(this, new dtDocInfoRowChangeEvent(((dtDocInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDocInfoRowDeleting != null)) {
                    this.dtDocInfoRowDeleting(this, new dtDocInfoRowChangeEvent(((dtDocInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDocInfoRow(dtDocInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dtsDocumentData ds = new dtsDocumentData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDocInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCostListRow : global::System.Data.DataRow {
            
            private dtCostListDataTable tabledtCostList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCostListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCostList = ((dtCostListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_TAX_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtCostList.C_TAX_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_TAX_ID\' in table \'dtCostList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostList.C_TAX_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_CHARGE_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtCostList.C_CHARGE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_CHARGE_ID\' in table \'dtCostList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostList.C_CHARGE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tabledtCostList.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'dtCostList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostList.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsCost {
                get {
                    try {
                        return ((string)(this[this.tabledtCostList.IsCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCost\' in table \'dtCostList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostList.IsCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AMOUNTSHARED {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostList.AMOUNTSHAREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AMOUNTSHARED\' in table \'dtCostList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostList.AMOUNTSHAREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_TAX_IDNull() {
                return this.IsNull(this.tabledtCostList.C_TAX_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_TAX_IDNull() {
                this[this.tabledtCostList.C_TAX_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_CHARGE_IDNull() {
                return this.IsNull(this.tabledtCostList.C_CHARGE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_CHARGE_IDNull() {
                this[this.tabledtCostList.C_CHARGE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tabledtCostList.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tabledtCostList.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCostNull() {
                return this.IsNull(this.tabledtCostList.IsCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCostNull() {
                this[this.tabledtCostList.IsCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAMOUNTSHAREDNull() {
                return this.IsNull(this.tabledtCostList.AMOUNTSHAREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAMOUNTSHAREDNull() {
                this[this.tabledtCostList.AMOUNTSHAREDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtCostDistributionRow : global::System.Data.DataRow {
            
            private dtCostDistributionDataTable tabledtCostDistribution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtCostDistributionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtCostDistribution = ((dtCostDistributionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string C_INVOICELINE_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtCostDistribution.C_INVOICELINE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'C_INVOICELINE_ID\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.C_INVOICELINE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE {
                get {
                    try {
                        return ((string)(this[this.tabledtCostDistribution.LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string M_PRODUCT_ID {
                get {
                    try {
                        return ((string)(this[this.tabledtCostDistribution.M_PRODUCT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'M_PRODUCT_ID\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.M_PRODUCT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tabledtCostDistribution.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NAME\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal QTYENTERED {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.QTYENTEREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'QTYENTERED\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.QTYENTEREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICEENTERED {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.PRICEENTEREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICEENTERED\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.PRICEENTEREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LINENETAMT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.LINENETAMTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINENETAMT\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.LINENETAMTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PRICEACTUAL {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.PRICEACTUALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PRICEACTUAL\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.PRICEACTUALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TAXAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.TAXAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TAXAMOUNT\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.TAXAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TOTALAMOUNT {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.TOTALAMOUNTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TOTALAMOUNT\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.TOTALAMOUNTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Ratio {
                get {
                    try {
                        return ((decimal)(this[this.tabledtCostDistribution.RatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ratio\' in table \'dtCostDistribution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtCostDistribution.RatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsC_INVOICELINE_IDNull() {
                return this.IsNull(this.tabledtCostDistribution.C_INVOICELINE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetC_INVOICELINE_IDNull() {
                this[this.tabledtCostDistribution.C_INVOICELINE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENull() {
                return this.IsNull(this.tabledtCostDistribution.LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENull() {
                this[this.tabledtCostDistribution.LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsM_PRODUCT_IDNull() {
                return this.IsNull(this.tabledtCostDistribution.M_PRODUCT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetM_PRODUCT_IDNull() {
                this[this.tabledtCostDistribution.M_PRODUCT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tabledtCostDistribution.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tabledtCostDistribution.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQTYENTEREDNull() {
                return this.IsNull(this.tabledtCostDistribution.QTYENTEREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQTYENTEREDNull() {
                this[this.tabledtCostDistribution.QTYENTEREDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICEENTEREDNull() {
                return this.IsNull(this.tabledtCostDistribution.PRICEENTEREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICEENTEREDNull() {
                this[this.tabledtCostDistribution.PRICEENTEREDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINENETAMTNull() {
                return this.IsNull(this.tabledtCostDistribution.LINENETAMTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINENETAMTNull() {
                this[this.tabledtCostDistribution.LINENETAMTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPRICEACTUALNull() {
                return this.IsNull(this.tabledtCostDistribution.PRICEACTUALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPRICEACTUALNull() {
                this[this.tabledtCostDistribution.PRICEACTUALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTAXAMOUNTNull() {
                return this.IsNull(this.tabledtCostDistribution.TAXAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTAXAMOUNTNull() {
                this[this.tabledtCostDistribution.TAXAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTALAMOUNTNull() {
                return this.IsNull(this.tabledtCostDistribution.TOTALAMOUNTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTALAMOUNTNull() {
                this[this.tabledtCostDistribution.TOTALAMOUNTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatioNull() {
                return this.IsNull(this.tabledtCostDistribution.RatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatioNull() {
                this[this.tabledtCostDistribution.RatioColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDocInfoRow : global::System.Data.DataRow {
            
            private dtDocInfoDataTable tabledtDocInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDocInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDocInfo = ((dtDocInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string documentName {
                get {
                    try {
                        return ((string)(this[this.tabledtDocInfo.documentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'documentName\' in table \'dtDocInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDocInfo.documentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdocumentNameNull() {
                return this.IsNull(this.tabledtDocInfo.documentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdocumentNameNull() {
                this[this.tabledtDocInfo.documentNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCostListRowChangeEvent : global::System.EventArgs {
            
            private dtCostListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListRowChangeEvent(dtCostListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtCostDistributionRowChangeEvent : global::System.EventArgs {
            
            private dtCostDistributionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionRowChangeEvent(dtCostDistributionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtCostDistributionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDocInfoRowChangeEvent : global::System.EventArgs {
            
            private dtDocInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoRowChangeEvent(dtDocInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDocInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591